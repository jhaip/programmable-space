
/Users/jhaip/Code/lovelace/src/particle-photon/rfid/target/rfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e28  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a2e40  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000008c  20000300  080a2e44  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000a3c  20000390  20000390  00030390  2**3
                  ALLOC
  5 .module_info_suffix 00000028  080a2ed0  080a2ed0  00022ed0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a2ef8  080a2ef8  00022ef8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000fae79  00000000  00000000  00022efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00017858  00000000  00000000  0011dd75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000190c5  00000000  00000000  001355cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002780  00000000  00000000  0014e692  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003dc0  00000000  00000000  00150e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00030812  00000000  00000000  00154bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000391b6  00000000  00000000  001853e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a102d  00000000  00000000  001be59a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000cb24  00000000  00000000  0025f5c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	c0 28 0a 08                                         .(..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fb47 	bl	80a26c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fb4c 	bl	80a26d6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a2e44 	.word	0x080a2e44
 80a004c:	2000038c 	.word	0x2000038c
 80a0050:	20000390 	.word	0x20000390
 80a0054:	20000dcc 	.word	0x20000dcc
 80a0058:	20000dcc 	.word	0x20000dcc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f8e7 	bl	80a2230 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2dd0 	.word	0x080a2dd0
 80a0084:	080a2e34 	.word	0x080a2e34

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8ae 	b.w	80a01e8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f95d 	bl	80a034c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b88d 	b.w	80a21b4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 b911 	b.w	80a12c0 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 b917 	b.w	80a12d0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
 80a00b2:	b510      	push	{r4, lr}
 80a00b4:	4604      	mov	r4, r0
 80a00b6:	3004      	adds	r0, #4
 80a00b8:	f001 fb0b 	bl	80a16d2 <_ZN6StringD1Ev>
 80a00bc:	4620      	mov	r0, r4
 80a00be:	bd10      	pop	{r4, pc}

080a00c0 <_ZN14http_request_tD1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
 80a00c0:	b510      	push	{r4, lr}
 80a00c2:	4604      	mov	r4, r0
 80a00c4:	303c      	adds	r0, #60	; 0x3c
 80a00c6:	f001 fb04 	bl	80a16d2 <_ZN6StringD1Ev>
 80a00ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a00ce:	f001 fb00 	bl	80a16d2 <_ZN6StringD1Ev>
 80a00d2:	4620      	mov	r0, r4
 80a00d4:	f001 fafd 	bl	80a16d2 <_ZN6StringD1Ev>
 80a00d8:	4620      	mov	r0, r4
 80a00da:	bd10      	pop	{r4, pc}

080a00dc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a00dc:	b538      	push	{r3, r4, r5, lr}
 80a00de:	4b0b      	ldr	r3, [pc, #44]	; (80a010c <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a00e0:	6984      	ldr	r4, [r0, #24]
 80a00e2:	4605      	mov	r5, r0
 80a00e4:	6003      	str	r3, [r0, #0]
 80a00e6:	b17c      	cbz	r4, 80a0108 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00e8:	6863      	ldr	r3, [r4, #4]
 80a00ea:	3b01      	subs	r3, #1
 80a00ec:	6063      	str	r3, [r4, #4]
 80a00ee:	b95b      	cbnz	r3, 80a0108 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a00f0:	6823      	ldr	r3, [r4, #0]
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	689b      	ldr	r3, [r3, #8]
 80a00f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00f8:	68a3      	ldr	r3, [r4, #8]
 80a00fa:	3b01      	subs	r3, #1
 80a00fc:	60a3      	str	r3, [r4, #8]
 80a00fe:	b91b      	cbnz	r3, 80a0108 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0100:	6823      	ldr	r3, [r4, #0]
 80a0102:	4620      	mov	r0, r4
 80a0104:	68db      	ldr	r3, [r3, #12]
 80a0106:	4798      	blx	r3
 80a0108:	4628      	mov	r0, r5
 80a010a:	bd38      	pop	{r3, r4, r5, pc}
 80a010c:	080a2b70 	.word	0x080a2b70

080a0110 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
 80a0110:	b510      	push	{r4, lr}
 80a0112:	4604      	mov	r4, r0
 80a0114:	f7ff ffe2 	bl	80a00dc <_ZN9TCPClientD1Ev>
 80a0118:	4620      	mov	r0, r4
 80a011a:	bd10      	pop	{r4, pc}

080a011c <_ZN9TCPClientD0Ev>:
 80a011c:	b510      	push	{r4, lr}
 80a011e:	4604      	mov	r4, r0
 80a0120:	f7ff ffdc 	bl	80a00dc <_ZN9TCPClientD1Ev>
 80a0124:	4620      	mov	r0, r4
 80a0126:	f7ff ffba 	bl	80a009e <_ZdlPv>
 80a012a:	4620      	mov	r0, r4
 80a012c:	bd10      	pop	{r4, pc}
	...

080a0130 <_Z19publishValueMessagei6String>:
http_response_t response;

String myID = System.deviceID();

void publishValueMessage(int sensorId, String sensorValue)
{
 80a0130:	b570      	push	{r4, r5, r6, lr}
 80a0132:	4b24      	ldr	r3, [pc, #144]	; (80a01c4 <_Z19publishValueMessagei6String+0x94>)
 80a0134:	b0d6      	sub	sp, #344	; 0x158
 80a0136:	681a      	ldr	r2, [r3, #0]
  char str[300];
  sprintf(str, "{\"claim\":\"Photon%s read \\\"%s\\\" on sensor %i\", \"retract\":\"$ $ Photon%s read $ on sensor %i\"}", (const char *)myID, sensorValue.c_str(), sensorId, (const char *)myID, sensorId);
 80a0138:	9002      	str	r0, [sp, #8]
 80a013a:	e88d 0005 	stmia.w	sp, {r0, r2}
 80a013e:	a80b      	add	r0, sp, #44	; 0x2c
 80a0140:	680b      	ldr	r3, [r1, #0]
 80a0142:	4921      	ldr	r1, [pc, #132]	; (80a01c8 <_Z19publishValueMessagei6String+0x98>)
 80a0144:	f001 f8d4 	bl	80a12f0 <sprintf>
  Serial.println(str);
 80a0148:	f001 ff4c 	bl	80a1fe4 <_Z16_fetch_usbserialv>
 80a014c:	a90b      	add	r1, sp, #44	; 0x2c
 80a014e:	f001 f9ae 	bl	80a14ae <_ZN5Print7printlnEPKc>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0152:	4e1e      	ldr	r6, [pc, #120]	; (80a01cc <_Z19publishValueMessagei6String+0x9c>)
  request.ip = {10, 0, 0, 185};
 80a0154:	23b9      	movs	r3, #185	; 0xb9
 80a0156:	9300      	str	r3, [sp, #0]
 80a0158:	2300      	movs	r3, #0
 80a015a:	461a      	mov	r2, r3
 80a015c:	210a      	movs	r1, #10
 80a015e:	a805      	add	r0, sp, #20
 80a0160:	f106 0414 	add.w	r4, r6, #20
 80a0164:	ad06      	add	r5, sp, #24
 80a0166:	f001 f955 	bl	80a1414 <_ZN9IPAddressC1Ehhhh>
 80a016a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a016c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a016e:	682b      	ldr	r3, [r5, #0]
  request.port = 5000;
  request.path = "/cleanup-claim";
 80a0170:	4917      	ldr	r1, [pc, #92]	; (80a01d0 <_Z19publishValueMessagei6String+0xa0>)
 80a0172:	7023      	strb	r3, [r4, #0]
{
  char str[300];
  sprintf(str, "{\"claim\":\"Photon%s read \\\"%s\\\" on sensor %i\", \"retract\":\"$ $ Photon%s read $ on sensor %i\"}", (const char *)myID, sensorValue.c_str(), sensorId, (const char *)myID, sensorId);
  Serial.println(str);
  request.ip = {10, 0, 0, 185};
  request.port = 5000;
 80a0174:	f241 3388 	movw	r3, #5000	; 0x1388
  request.path = "/cleanup-claim";
 80a0178:	f106 0028 	add.w	r0, r6, #40	; 0x28
{
  char str[300];
  sprintf(str, "{\"claim\":\"Photon%s read \\\"%s\\\" on sensor %i\", \"retract\":\"$ $ Photon%s read $ on sensor %i\"}", (const char *)myID, sensorValue.c_str(), sensorId, (const char *)myID, sensorId);
  Serial.println(str);
  request.ip = {10, 0, 0, 185};
  request.port = 5000;
 80a017c:	63b3      	str	r3, [r6, #56]	; 0x38
  request.path = "/cleanup-claim";
 80a017e:	f001 fb41 	bl	80a1804 <_ZN6StringaSEPKc>
  request.body = str;
 80a0182:	a90b      	add	r1, sp, #44	; 0x2c
 80a0184:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 80a0188:	f001 fb3c 	bl	80a1804 <_ZN6StringaSEPKc>
  Serial.println(request.body);
 80a018c:	f001 ff2a 	bl	80a1fe4 <_Z16_fetch_usbserialv>
 80a0190:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80a0192:	f001 f98c 	bl	80a14ae <_ZN5Print7printlnEPKc>
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
 80a0196:	4c0f      	ldr	r4, [pc, #60]	; (80a01d4 <_Z19publishValueMessagei6String+0xa4>)
 80a0198:	4b0f      	ldr	r3, [pc, #60]	; (80a01d8 <_Z19publishValueMessagei6String+0xa8>)
 80a019a:	4622      	mov	r2, r4
 80a019c:	4631      	mov	r1, r6
 80a019e:	9300      	str	r3, [sp, #0]
 80a01a0:	480e      	ldr	r0, [pc, #56]	; (80a01dc <_Z19publishValueMessagei6String+0xac>)
 80a01a2:	4b0f      	ldr	r3, [pc, #60]	; (80a01e0 <_Z19publishValueMessagei6String+0xb0>)
 80a01a4:	f000 f976 	bl	80a0494 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  http.post(request, response, headers);
  Serial.print("Application>\tResponse status: ");
 80a01a8:	f001 ff1c 	bl	80a1fe4 <_Z16_fetch_usbserialv>
 80a01ac:	490d      	ldr	r1, [pc, #52]	; (80a01e4 <_Z19publishValueMessagei6String+0xb4>)
 80a01ae:	f001 f96b 	bl	80a1488 <_ZN5Print5printEPKc>
  Serial.println(response.status);
 80a01b2:	f001 ff17 	bl	80a1fe4 <_Z16_fetch_usbserialv>
 80a01b6:	220a      	movs	r2, #10
 80a01b8:	6821      	ldr	r1, [r4, #0]
 80a01ba:	f001 f9d0 	bl	80a155e <_ZN5Print7printlnEii>
}
 80a01be:	b056      	add	sp, #344	; 0x158
 80a01c0:	bd70      	pop	{r4, r5, r6, pc}
 80a01c2:	bf00      	nop
 80a01c4:	200003a4 	.word	0x200003a4
 80a01c8:	080a28d4 	.word	0x080a28d4
 80a01cc:	200007e4 	.word	0x200007e4
 80a01d0:	080a2930 	.word	0x080a2930
 80a01d4:	200007d0 	.word	0x200007d0
 80a01d8:	080a293f 	.word	0x080a293f
 80a01dc:	200003b4 	.word	0x200003b4
 80a01e0:	20000300 	.word	0x20000300
 80a01e4:	080a2944 	.word	0x080a2944

080a01e8 <setup>:

void setup()
{
 80a01e8:	b510      	push	{r4, lr}
  Serial.begin(9600); // Initialize serial communications with the PC
  mfrc522.setSPIConfig();
 80a01ea:	4c0a      	ldr	r4, [pc, #40]	; (80a0214 <setup+0x2c>)
  Serial.println(response.status);
}

void setup()
{
  Serial.begin(9600); // Initialize serial communications with the PC
 80a01ec:	f001 fefa 	bl	80a1fe4 <_Z16_fetch_usbserialv>
 80a01f0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01f4:	f001 fedc 	bl	80a1fb0 <_ZN9USBSerial5beginEl>
  mfrc522.setSPIConfig();
 80a01f8:	4620      	mov	r0, r4
 80a01fa:	f000 fa7f 	bl	80a06fc <_ZN7MFRC52212setSPIConfigEv>
  // mfrc522_b.setSPIConfig();
  // mfrc522_c.setSPIConfig();
  // mfrc522_d.setSPIConfig();
  // mfrc522_e.setSPIConfig();

  mfrc522.PCD_Init();   // Init MFRC522 card
 80a01fe:	4620      	mov	r0, r4
 80a0200:	f000 fbba 	bl	80a0978 <_ZN7MFRC5228PCD_InitEv>
  // mfrc522_b.PCD_Init(); // Init MFRC522 card
  // mfrc522_c.PCD_Init(); // Init MFRC522 card
  // mfrc522_d.PCD_Init(); // Init MFRC522 card
  // mfrc522_e.PCD_Init(); // Init MFRC522 card
  Serial.println("Scan PICC to see UID and type...");
 80a0204:	f001 feee 	bl	80a1fe4 <_Z16_fetch_usbserialv>
}
 80a0208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mfrc522.PCD_Init();   // Init MFRC522 card
  // mfrc522_b.PCD_Init(); // Init MFRC522 card
  // mfrc522_c.PCD_Init(); // Init MFRC522 card
  // mfrc522_d.PCD_Init(); // Init MFRC522 card
  // mfrc522_e.PCD_Init(); // Init MFRC522 card
  Serial.println("Scan PICC to see UID and type...");
 80a020c:	4902      	ldr	r1, [pc, #8]	; (80a0218 <setup+0x30>)
 80a020e:	f001 b94e 	b.w	80a14ae <_ZN5Print7printlnEPKc>
 80a0212:	bf00      	nop
 80a0214:	20000394 	.word	0x20000394
 80a0218:	080a2963 	.word	0x080a2963

080a021c <_Z12check_reader7MFRC522>:
}

String check_reader(MFRC522 reader)
{
 80a021c:	b084      	sub	sp, #16
 80a021e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0222:	b093      	sub	sp, #76	; 0x4c
 80a0224:	ac1b      	add	r4, sp, #108	; 0x6c
 80a0226:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  byte bufferATQA[2];
  byte bufferSize = sizeof(bufferATQA);
 80a022a:	aa12      	add	r2, sp, #72	; 0x48
 80a022c:	2302      	movs	r3, #2
  // mfrc522_e.PCD_Init(); // Init MFRC522 card
  Serial.println("Scan PICC to see UID and type...");
}

String check_reader(MFRC522 reader)
{
 80a022e:	4606      	mov	r6, r0
  byte bufferATQA[2];
  byte bufferSize = sizeof(bufferATQA);
 80a0230:	f802 3d45 	strb.w	r3, [r2, #-69]!
  byte result = reader.PICC_WakeupA(bufferATQA, &bufferSize);
 80a0234:	a901      	add	r1, sp, #4
 80a0236:	4620      	mov	r0, r4
 80a0238:	f000 fcc1 	bl	80a0bbe <_ZN7MFRC52212PICC_WakeupAEPhS0_>
  if (!(result == MFRC522::STATUS_OK || result == MFRC522::STATUS_COLLISION))
 80a023c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80a0240:	2801      	cmp	r0, #1
 80a0242:	d005      	beq.n	80a0250 <_Z12check_reader7MFRC522+0x34>
  {
    Serial.println("STATUS is not OK or COLLISION");
 80a0244:	f001 fece 	bl	80a1fe4 <_Z16_fetch_usbserialv>
 80a0248:	493b      	ldr	r1, [pc, #236]	; (80a0338 <_Z12check_reader7MFRC522+0x11c>)
 80a024a:	f001 f930 	bl	80a14ae <_ZN5Print7printlnEPKc>
 80a024e:	e003      	b.n	80a0258 <_Z12check_reader7MFRC522+0x3c>
    return "null";
  }

  // Select one of the cards
  if (!reader.PICC_ReadCardSerial())
 80a0250:	4620      	mov	r0, r4
 80a0252:	f000 fe2d 	bl	80a0eb0 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a0256:	b920      	cbnz	r0, 80a0262 <_Z12check_reader7MFRC522+0x46>
  {
    return "null";
 80a0258:	4938      	ldr	r1, [pc, #224]	; (80a033c <_Z12check_reader7MFRC522+0x120>)
 80a025a:	4630      	mov	r0, r6
 80a025c:	f001 fa80 	bl	80a1760 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0260:	e064      	b.n	80a032c <_Z12check_reader7MFRC522+0x110>
  }

  MFRC522::Uid *uid = &(reader.uid);
  String cardUidString = "";
 80a0262:	4937      	ldr	r1, [pc, #220]	; (80a0340 <_Z12check_reader7MFRC522+0x124>)
 80a0264:	a802      	add	r0, sp, #8
 80a0266:	f001 fa7b 	bl	80a1760 <_ZN6StringC1EPK19__FlashStringHelper>
  Serial.print("Card UID: ");
 80a026a:	f001 febb 	bl	80a1fe4 <_Z16_fetch_usbserialv>
 80a026e:	4935      	ldr	r1, [pc, #212]	; (80a0344 <_Z12check_reader7MFRC522+0x128>)
 80a0270:	f001 f90a 	bl	80a1488 <_ZN5Print5printEPKc>
  for (byte i = 0; i < uid->size; i++)
  {
    cardUidString = String(cardUidString + String(uid->uidByte[i] < 0x10 ? "0" : ""));
 80a0274:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80a0348 <_Z12check_reader7MFRC522+0x12c>
 80a0278:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80a0340 <_Z12check_reader7MFRC522+0x124>
    return "null";
  }

  MFRC522::Uid *uid = &(reader.uid);
  String cardUidString = "";
  Serial.print("Card UID: ");
 80a027c:	2700      	movs	r7, #0
  for (byte i = 0; i < uid->size; i++)
 80a027e:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 80a0282:	b2fd      	uxtb	r5, r7
 80a0284:	42ab      	cmp	r3, r5
 80a0286:	d942      	bls.n	80a030e <_Z12check_reader7MFRC522+0xf2>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a0288:	a902      	add	r1, sp, #8
 80a028a:	a80a      	add	r0, sp, #40	; 0x28
 80a028c:	f001 faa7 	bl	80a17de <_ZN6StringC1ERKS_>
  {
    cardUidString = String(cardUidString + String(uid->uidByte[i] < 0x10 ? "0" : ""));
 80a0290:	ab1a      	add	r3, sp, #104	; 0x68
 80a0292:	441d      	add	r5, r3
 80a0294:	7969      	ldrb	r1, [r5, #5]
 80a0296:	a806      	add	r0, sp, #24
 80a0298:	290f      	cmp	r1, #15
 80a029a:	bf94      	ite	ls
 80a029c:	4649      	movls	r1, r9
 80a029e:	4641      	movhi	r1, r8
 80a02a0:	f001 fa5e 	bl	80a1760 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02a4:	a906      	add	r1, sp, #24
 80a02a6:	a80a      	add	r0, sp, #40	; 0x28
 80a02a8:	f001 faea 	bl	80a1880 <_ZplRK15StringSumHelperRK6String>
 80a02ac:	4601      	mov	r1, r0
 80a02ae:	a80e      	add	r0, sp, #56	; 0x38
 80a02b0:	f001 fa95 	bl	80a17de <_ZN6StringC1ERKS_>
 80a02b4:	a90e      	add	r1, sp, #56	; 0x38
 80a02b6:	a802      	add	r0, sp, #8
 80a02b8:	f001 fa9c 	bl	80a17f4 <_ZN6StringaSEOS_>
 80a02bc:	a80e      	add	r0, sp, #56	; 0x38
 80a02be:	f001 fa08 	bl	80a16d2 <_ZN6StringD1Ev>
 80a02c2:	a806      	add	r0, sp, #24
 80a02c4:	f001 fa05 	bl	80a16d2 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a02c8:	a80a      	add	r0, sp, #40	; 0x28
 80a02ca:	f001 fa02 	bl	80a16d2 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a02ce:	a902      	add	r1, sp, #8
 80a02d0:	a80a      	add	r0, sp, #40	; 0x28
 80a02d2:	f001 fa84 	bl	80a17de <_ZN6StringC1ERKS_>
    cardUidString = String(cardUidString + String(uid->uidByte[i], HEX));
 80a02d6:	2210      	movs	r2, #16
 80a02d8:	7969      	ldrb	r1, [r5, #5]
 80a02da:	a806      	add	r0, sp, #24
 80a02dc:	f001 faa3 	bl	80a1826 <_ZN6StringC1Ehh>
 80a02e0:	a906      	add	r1, sp, #24
 80a02e2:	a80a      	add	r0, sp, #40	; 0x28
 80a02e4:	f001 facc 	bl	80a1880 <_ZplRK15StringSumHelperRK6String>
 80a02e8:	4601      	mov	r1, r0
 80a02ea:	a80e      	add	r0, sp, #56	; 0x38
 80a02ec:	f001 fa77 	bl	80a17de <_ZN6StringC1ERKS_>
 80a02f0:	a90e      	add	r1, sp, #56	; 0x38
 80a02f2:	a802      	add	r0, sp, #8
 80a02f4:	f001 fa7e 	bl	80a17f4 <_ZN6StringaSEOS_>
 80a02f8:	a80e      	add	r0, sp, #56	; 0x38
 80a02fa:	f001 f9ea 	bl	80a16d2 <_ZN6StringD1Ev>
 80a02fe:	a806      	add	r0, sp, #24
 80a0300:	f001 f9e7 	bl	80a16d2 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0304:	a80a      	add	r0, sp, #40	; 0x28
 80a0306:	f001 f9e4 	bl	80a16d2 <_ZN6StringD1Ev>
 80a030a:	3701      	adds	r7, #1
  }

  MFRC522::Uid *uid = &(reader.uid);
  String cardUidString = "";
  Serial.print("Card UID: ");
  for (byte i = 0; i < uid->size; i++)
 80a030c:	e7b7      	b.n	80a027e <_Z12check_reader7MFRC522+0x62>
  {
    cardUidString = String(cardUidString + String(uid->uidByte[i] < 0x10 ? "0" : ""));
    cardUidString = String(cardUidString + String(uid->uidByte[i], HEX));
  }
  Serial.println(cardUidString);
 80a030e:	f001 fe69 	bl	80a1fe4 <_Z16_fetch_usbserialv>
 80a0312:	9902      	ldr	r1, [sp, #8]
 80a0314:	f001 f8cb 	bl	80a14ae <_ZN5Print7printlnEPKc>

  reader.PICC_HaltA();
 80a0318:	4620      	mov	r0, r4
 80a031a:	f000 fda4 	bl	80a0e66 <_ZN7MFRC52210PICC_HaltAEv>
  return cardUidString;
 80a031e:	a902      	add	r1, sp, #8
 80a0320:	4630      	mov	r0, r6
 80a0322:	f001 f9c6 	bl	80a16b2 <_ZN6StringC1EOS_>
  {
    return "null";
  }

  MFRC522::Uid *uid = &(reader.uid);
  String cardUidString = "";
 80a0326:	a802      	add	r0, sp, #8
 80a0328:	f001 f9d3 	bl	80a16d2 <_ZN6StringD1Ev>
  }
  Serial.println(cardUidString);

  reader.PICC_HaltA();
  return cardUidString;
}
 80a032c:	4630      	mov	r0, r6
 80a032e:	b013      	add	sp, #76	; 0x4c
 80a0330:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0334:	b004      	add	sp, #16
 80a0336:	4770      	bx	lr
 80a0338:	080a2986 	.word	0x080a2986
 80a033c:	080a29a4 	.word	0x080a29a4
 80a0340:	080a2a12 	.word	0x080a2a12
 80a0344:	080a29a9 	.word	0x080a29a9
 80a0348:	080a2984 	.word	0x080a2984

080a034c <loop>:

void loop()
{
 80a034c:	b500      	push	{lr}
  delay(50);
 80a034e:	2032      	movs	r0, #50	; 0x32
  reader.PICC_HaltA();
  return cardUidString;
}

void loop()
{
 80a0350:	b08b      	sub	sp, #44	; 0x2c
  delay(50);
 80a0352:	f000 ffd5 	bl	80a1300 <delay>

  String val_a = check_reader(mfrc522);
 80a0356:	480d      	ldr	r0, [pc, #52]	; (80a038c <loop+0x40>)
 80a0358:	6842      	ldr	r2, [r0, #4]
 80a035a:	6883      	ldr	r3, [r0, #8]
 80a035c:	6801      	ldr	r1, [r0, #0]
 80a035e:	8980      	ldrh	r0, [r0, #12]
 80a0360:	f8ad 0000 	strh.w	r0, [sp]
 80a0364:	a802      	add	r0, sp, #8
 80a0366:	f7ff ff59 	bl	80a021c <_Z12check_reader7MFRC522>
  // String val_c = check_reader(mfrc522_c);
  // String val_d = check_reader(mfrc522_d);
  // String val_e = check_reader(mfrc522_e);
  // String val_f = check_reader(mfrc522_f);

  publishValueMessage(1, val_a);
 80a036a:	a902      	add	r1, sp, #8
 80a036c:	a806      	add	r0, sp, #24
 80a036e:	f001 fa36 	bl	80a17de <_ZN6StringC1ERKS_>
 80a0372:	a906      	add	r1, sp, #24
 80a0374:	2001      	movs	r0, #1
 80a0376:	f7ff fedb 	bl	80a0130 <_Z19publishValueMessagei6String>
 80a037a:	a806      	add	r0, sp, #24
 80a037c:	f001 f9a9 	bl	80a16d2 <_ZN6StringD1Ev>

void loop()
{
  delay(50);

  String val_a = check_reader(mfrc522);
 80a0380:	a802      	add	r0, sp, #8
 80a0382:	f001 f9a6 	bl	80a16d2 <_ZN6StringD1Ev>
  // publishValueMessage(2, val_b);
  // publishValueMessage(3, val_c);
  // publishValueMessage(4, val_d);
  // publishValueMessage(5, val_e);
  // publishValueMessage(6, val_f);
 80a0386:	b00b      	add	sp, #44	; 0x2c
 80a0388:	f85d fb04 	ldr.w	pc, [sp], #4
 80a038c:	20000394 	.word	0x20000394

080a0390 <_GLOBAL__sub_I_mfrc522>:
 80a0390:	b570      	push	{r4, r5, r6, lr}
// MFRC522 mfrc522_c(SS_PIN_C, RST_PIN);
// MFRC522 mfrc522_d(SS_PIN_D, RST_PIN);
// MFRC522 mfrc522_e(SS_PIN_E, RST_PIN);
// MFRC522 mfrc522_f(SS_PIN_F, RST_PIN);

HttpClient http;
 80a0392:	4c1f      	ldr	r4, [pc, #124]	; (80a0410 <_GLOBAL__sub_I_mfrc522+0x80>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0394:	f000 fde6 	bl	80a0f64 <HAL_Pin_Map>
#define SS_PIN_C D3
#define SS_PIN_D D4
#define SS_PIN_E D5

// Create MFRC522 instances
MFRC522 mfrc522(SS_PIN, RST_PIN);
 80a0398:	2202      	movs	r2, #2
 80a039a:	2101      	movs	r1, #1
 80a039c:	481d      	ldr	r0, [pc, #116]	; (80a0414 <_GLOBAL__sub_I_mfrc522+0x84>)
 80a039e:	f000 f995 	bl	80a06cc <_ZN7MFRC522C1Ehh>
// MFRC522 mfrc522_c(SS_PIN_C, RST_PIN);
// MFRC522 mfrc522_d(SS_PIN_D, RST_PIN);
// MFRC522 mfrc522_e(SS_PIN_E, RST_PIN);
// MFRC522 mfrc522_f(SS_PIN_F, RST_PIN);

HttpClient http;
 80a03a2:	4d1d      	ldr	r5, [pc, #116]	; (80a0418 <_GLOBAL__sub_I_mfrc522+0x88>)
 80a03a4:	4620      	mov	r0, r4
 80a03a6:	f000 f849 	bl	80a043c <_ZN10HttpClientC1Ev>
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
 80a03aa:	4e1c      	ldr	r6, [pc, #112]	; (80a041c <_GLOBAL__sub_I_mfrc522+0x8c>)
 80a03ac:	4620      	mov	r0, r4
 80a03ae:	4c1c      	ldr	r4, [pc, #112]	; (80a0420 <_GLOBAL__sub_I_mfrc522+0x90>)
 80a03b0:	462a      	mov	r2, r5
 80a03b2:	491c      	ldr	r1, [pc, #112]	; (80a0424 <_GLOBAL__sub_I_mfrc522+0x94>)
 80a03b4:	f002 f824 	bl	80a2400 <__aeabi_atexit>
 80a03b8:	4631      	mov	r1, r6
 80a03ba:	4620      	mov	r0, r4
 80a03bc:	f001 f9d0 	bl	80a1760 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03c0:	f104 0010 	add.w	r0, r4, #16
 80a03c4:	f001 f80a 	bl	80a13dc <_ZN9IPAddressC1Ev>
 80a03c8:	4631      	mov	r1, r6
 80a03ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a03ce:	f001 f9c7 	bl	80a1760 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03d2:	4631      	mov	r1, r6
 80a03d4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a03d8:	f001 f9c2 	bl	80a1760 <_ZN6StringC1EPK19__FlashStringHelper>
    {"Accept", "application/json"},
    {"Accept", "*/*"},
    {NULL, NULL} // NOTE: Always terminate headers will NULL
};

http_request_t request;
 80a03dc:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
 80a03de:	4c12      	ldr	r4, [pc, #72]	; (80a0428 <_GLOBAL__sub_I_mfrc522+0x98>)
 80a03e0:	462a      	mov	r2, r5
 80a03e2:	4912      	ldr	r1, [pc, #72]	; (80a042c <_GLOBAL__sub_I_mfrc522+0x9c>)
 80a03e4:	f002 f80c 	bl	80a2400 <__aeabi_atexit>
 80a03e8:	4631      	mov	r1, r6
 80a03ea:	1d20      	adds	r0, r4, #4
 80a03ec:	f001 f9b8 	bl	80a1760 <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
 80a03f0:	4620      	mov	r0, r4
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 80a03f2:	4c0f      	ldr	r4, [pc, #60]	; (80a0430 <_GLOBAL__sub_I_mfrc522+0xa0>)
 80a03f4:	462a      	mov	r2, r5
 80a03f6:	490f      	ldr	r1, [pc, #60]	; (80a0434 <_GLOBAL__sub_I_mfrc522+0xa4>)
 80a03f8:	f002 f802 	bl	80a2400 <__aeabi_atexit>
 80a03fc:	4620      	mov	r0, r4
 80a03fe:	f000 ff47 	bl	80a1290 <spark_deviceID>

String myID = System.deviceID();
 80a0402:	462a      	mov	r2, r5
 80a0404:	4620      	mov	r0, r4
  // publishValueMessage(2, val_b);
  // publishValueMessage(3, val_c);
  // publishValueMessage(4, val_d);
  // publishValueMessage(5, val_e);
  // publishValueMessage(6, val_f);
 80a0406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
};

http_request_t request;
http_response_t response;

String myID = System.deviceID();
 80a040a:	490b      	ldr	r1, [pc, #44]	; (80a0438 <_GLOBAL__sub_I_mfrc522+0xa8>)
 80a040c:	f001 bff8 	b.w	80a2400 <__aeabi_atexit>
 80a0410:	200003b4 	.word	0x200003b4
 80a0414:	20000394 	.word	0x20000394
 80a0418:	20000390 	.word	0x20000390
 80a041c:	080a2a12 	.word	0x080a2a12
 80a0420:	200007e4 	.word	0x200007e4
 80a0424:	080a0111 	.word	0x080a0111
 80a0428:	200007d0 	.word	0x200007d0
 80a042c:	080a00c1 	.word	0x080a00c1
 80a0430:	200003a4 	.word	0x200003a4
 80a0434:	080a00b3 	.word	0x080a00b3
 80a0438:	080a16d3 	.word	0x080a16d3

080a043c <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
 80a043c:	b510      	push	{r4, lr}
 80a043e:	4604      	mov	r4, r0
 80a0440:	f001 fc22 	bl	80a1c88 <_ZN9TCPClientC1Ev>
{

}
 80a0444:	4620      	mov	r0, r4
 80a0446:	bd10      	pop	{r4, pc}

080a0448 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
 80a0448:	b538      	push	{r3, r4, r5, lr}
 80a044a:	4604      	mov	r4, r0
 80a044c:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a044e:	f001 f81b 	bl	80a1488 <_ZN5Print5printEPKc>
    client.print(": ");
 80a0452:	4905      	ldr	r1, [pc, #20]	; (80a0468 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
 80a0454:	4620      	mov	r0, r4
 80a0456:	f001 f817 	bl	80a1488 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a045a:	4629      	mov	r1, r5
 80a045c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a045e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
 80a0462:	f001 b824 	b.w	80a14ae <_ZN5Print7printlnEPKc>
 80a0466:	bf00      	nop
 80a0468:	080a2a76 	.word	0x080a2a76

080a046c <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
 80a046c:	b538      	push	{r3, r4, r5, lr}
 80a046e:	4604      	mov	r4, r0
 80a0470:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a0472:	f001 f809 	bl	80a1488 <_ZN5Print5printEPKc>
    client.print(": ");
 80a0476:	4905      	ldr	r1, [pc, #20]	; (80a048c <_ZN10HttpClient10sendHeaderEPKci+0x20>)
 80a0478:	4620      	mov	r0, r4
 80a047a:	f001 f805 	bl	80a1488 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a047e:	4629      	mov	r1, r5
 80a0480:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a0482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
 80a0486:	220a      	movs	r2, #10
 80a0488:	f001 b869 	b.w	80a155e <_ZN5Print7printlnEii>
 80a048c:	080a2a76 	.word	0x080a2a76

080a0490 <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
 80a0490:	f000 bd68 	b.w	80a0f64 <HAL_Pin_Map>

080a0494 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a0494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0498:	460d      	mov	r5, r1
 80a049a:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a049c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a04a0:	b08f      	sub	sp, #60	; 0x3c
 80a04a2:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a04a4:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a04a6:	2100      	movs	r1, #0
 80a04a8:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a04aa:	4617      	mov	r7, r2
 80a04ac:	f001 f9f4 	bl	80a1898 <_ZNK6String6equalsEPKc>
 80a04b0:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
 80a04b4:	b960      	cbnz	r0, 80a04d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
 80a04b6:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
 80a04b8:	f1b8 0f00 	cmp.w	r8, #0
 80a04bc:	d002      	beq.n	80a04c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
 80a04be:	fa1f f288 	uxth.w	r2, r8
 80a04c2:	e000      	b.n	80a04c6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
 80a04c4:	2250      	movs	r2, #80	; 0x50
 80a04c6:	2300      	movs	r3, #0
 80a04c8:	4620      	mov	r0, r4
 80a04ca:	f001 fa87 	bl	80a19dc <_ZN9TCPClient7connectEPKctm>
 80a04ce:	e014      	b.n	80a04fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x66>
 80a04d0:	4b74      	ldr	r3, [pc, #464]	; (80a06a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
 80a04d2:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80a04d6:	f105 0c14 	add.w	ip, r5, #20
 80a04da:	9308      	str	r3, [sp, #32]
 80a04dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a04e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80a04e4:	f8dc 3000 	ldr.w	r3, [ip]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
 80a04e8:	fa1f f288 	uxth.w	r2, r8
 80a04ec:	f88e 3000 	strb.w	r3, [lr]
 80a04f0:	a908      	add	r1, sp, #32
 80a04f2:	2300      	movs	r3, #0
 80a04f4:	4620      	mov	r0, r4
 80a04f6:	f001 fbd1 	bl	80a1c9c <_ZN9TCPClient7connectE9IPAddresstm>
 80a04fa:	3000      	adds	r0, #0
 80a04fc:	bf18      	it	ne
 80a04fe:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
 80a0500:	b918      	cbnz	r0, 80a050a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
 80a0502:	4620      	mov	r0, r4
 80a0504:	f001 fb6e 	bl	80a1be4 <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
 80a0508:	e0c8      	b.n	80a069c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
 80a050a:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a050c:	4620      	mov	r0, r4
 80a050e:	f000 ffbb 	bl	80a1488 <_ZN5Print5printEPKc>
    client.print(" ");
 80a0512:	4965      	ldr	r1, [pc, #404]	; (80a06a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
 80a0514:	4620      	mov	r0, r4
 80a0516:	f000 ffb7 	bl	80a1488 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
 80a051a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80a051c:	4620      	mov	r0, r4
 80a051e:	f000 ffb3 	bl	80a1488 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
 80a0522:	4962      	ldr	r1, [pc, #392]	; (80a06ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
 80a0524:	4620      	mov	r0, r4
 80a0526:	f000 ffaf 	bl	80a1488 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
 80a052a:	4961      	ldr	r1, [pc, #388]	; (80a06b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
 80a052c:	4620      	mov	r0, r4
 80a052e:	4a61      	ldr	r2, [pc, #388]	; (80a06b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x220>)
 80a0530:	f7ff ff8a 	bl	80a0448 <_ZN10HttpClient10sendHeaderEPKcS1_>
 80a0534:	2100      	movs	r1, #0
 80a0536:	4628      	mov	r0, r5
 80a0538:	f001 f9ae 	bl	80a1898 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
 80a053c:	b920      	cbnz	r0, 80a0548 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
 80a053e:	682a      	ldr	r2, [r5, #0]
 80a0540:	495d      	ldr	r1, [pc, #372]	; (80a06b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
 80a0542:	4620      	mov	r0, r4
 80a0544:	f7ff ff80 	bl	80a0448 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
 80a0548:	f105 083c 	add.w	r8, r5, #60	; 0x3c
 80a054c:	2100      	movs	r1, #0
 80a054e:	4640      	mov	r0, r8
 80a0550:	f001 f9a2 	bl	80a1898 <_ZNK6String6equalsEPKc>
 80a0554:	b908      	cbnz	r0, 80a055a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc6>
        sendHeader("Content-Length", (aRequest.body).length());
 80a0556:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80a0558:	e005      	b.n	80a0566 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd2>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
 80a055a:	4958      	ldr	r1, [pc, #352]	; (80a06bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
 80a055c:	9818      	ldr	r0, [sp, #96]	; 0x60
 80a055e:	f002 f8eb 	bl	80a2738 <strcmp>
 80a0562:	4602      	mov	r2, r0
 80a0564:	b918      	cbnz	r0, 80a056e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xda>
        sendHeader("Content-Length", 0);
 80a0566:	4956      	ldr	r1, [pc, #344]	; (80a06c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
 80a0568:	4620      	mov	r0, r4
 80a056a:	f7ff ff7f 	bl	80a046c <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
 80a056e:	b15e      	cbz	r6, 80a0588 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    {
        int i = 0;
        while (headers[i].header != NULL)
 80a0570:	6831      	ldr	r1, [r6, #0]
 80a0572:	b149      	cbz	r1, 80a0588 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
        {
            if (headers[i].value != NULL) {
 80a0574:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
 80a0576:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
 80a0578:	b112      	cbz	r2, 80a0580 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xec>
                sendHeader(headers[i].header, headers[i].value);
 80a057a:	f7ff ff65 	bl	80a0448 <_ZN10HttpClient10sendHeaderEPKcS1_>
 80a057e:	e001      	b.n	80a0584 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf0>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
 80a0580:	f000 ff95 	bl	80a14ae <_ZN5Print7printlnEPKc>
 80a0584:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
 80a0586:	e7f3      	b.n	80a0570 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
 80a0588:	4620      	mov	r0, r4
 80a058a:	f000 ff84 	bl	80a1496 <_ZN5Print7printlnEv>
    client.flush();
 80a058e:	4620      	mov	r0, r4
 80a0590:	f001 fa17 	bl	80a19c2 <_ZN9TCPClient5flushEv>
 80a0594:	2100      	movs	r1, #0
 80a0596:	4640      	mov	r0, r8
 80a0598:	f001 f97e 	bl	80a1898 <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
 80a059c:	b918      	cbnz	r0, 80a05a6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x112>
        client.println(aRequest.body);
 80a059e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80a05a0:	4620      	mov	r0, r4
 80a05a2:	f000 ff84 	bl	80a14ae <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
 80a05a6:	f104 081c 	add.w	r8, r4, #28
 80a05aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a05ae:	2100      	movs	r1, #0
 80a05b0:	4640      	mov	r0, r8
 80a05b2:	f002 f890 	bl	80a26d6 <memset>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a05b6:	f000 fccd 	bl	80a0f54 <HAL_Timer_Get_Milli_Seconds>
    // timeout or an error.

    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
 80a05ba:	2600      	movs	r6, #0
 80a05bc:	4681      	mov	r9, r0
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
 80a05be:	4635      	mov	r5, r6
 80a05c0:	f000 fcc8 	bl	80a0f54 <HAL_Timer_Get_Milli_Seconds>
        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
            delay(200);
        }
    } while (client.connected() && !timeout && !error);
 80a05c4:	f241 3a88 	movw	sl, #5000	; 0x1388
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
 80a05c8:	4620      	mov	r0, r4
 80a05ca:	f001 facd 	bl	80a1b68 <_ZN9TCPClient9availableEv>
 80a05ce:	b1d8      	cbz	r0, 80a0608 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x174>
            char c = client.read();
 80a05d0:	4620      	mov	r0, r4
 80a05d2:	f001 fa70 	bl	80a1ab6 <_ZN9TCPClient4readEv>
 80a05d6:	4683      	mov	fp, r0
 80a05d8:	f000 fcbc 	bl	80a0f54 <HAL_Timer_Get_Milli_Seconds>

                break;
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
 80a05dc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80a05e0:	429d      	cmp	r5, r3
 80a05e2:	4681      	mov	r9, r0
 80a05e4:	d803      	bhi.n	80a05ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15a>
                buffer[bufferPosition] = c;
 80a05e6:	1963      	adds	r3, r4, r5
 80a05e8:	f883 b01c 	strb.w	fp, [r3, #28]
 80a05ec:	e00a      	b.n	80a0604 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
 80a05ee:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80a05f2:	429d      	cmp	r5, r3
 80a05f4:	d106      	bne.n	80a0604 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a05f6:	2300      	movs	r3, #0
 80a05f8:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
 80a05fc:	4620      	mov	r0, r4
 80a05fe:	f001 faf1 	bl	80a1be4 <_ZN9TCPClient4stopEv>
                error = true;
 80a0602:	2601      	movs	r6, #1

                #ifdef LOGGING
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
 80a0604:	3501      	adds	r5, #1
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
 80a0606:	e7df      	b.n	80a05c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
        }
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a0608:	1963      	adds	r3, r4, r5
 80a060a:	7718      	strb	r0, [r3, #28]
 80a060c:	f000 fca2 	bl	80a0f54 <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > TIMEOUT;
 80a0610:	ebc9 0b00 	rsb	fp, r9, r0

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
 80a0614:	b926      	cbnz	r6, 80a0620 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
 80a0616:	45d3      	cmp	fp, sl
 80a0618:	d802      	bhi.n	80a0620 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
            delay(200);
 80a061a:	20c8      	movs	r0, #200	; 0xc8
 80a061c:	f000 fe70 	bl	80a1300 <delay>
        }
    } while (client.connected() && !timeout && !error);
 80a0620:	4620      	mov	r0, r4
 80a0622:	f001 fbe3 	bl	80a1dec <_ZN9TCPClient9connectedEv>
 80a0626:	b118      	cbz	r0, 80a0630 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
 80a0628:	45d3      	cmp	fp, sl
 80a062a:	d801      	bhi.n	80a0630 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
 80a062c:	2e00      	cmp	r6, #0
 80a062e:	d0cb      	beq.n	80a05c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
 80a0630:	4620      	mov	r0, r4
 80a0632:	f001 fad7 	bl	80a1be4 <_ZN9TCPClient4stopEv>

    String raw_response(buffer);
 80a0636:	4641      	mov	r1, r8
 80a0638:	4668      	mov	r0, sp
 80a063a:	f001 f891 	bl	80a1760 <_ZN6StringC1EPK19__FlashStringHelper>

    // Not super elegant way of finding the status code, but it works.
    String statusCode = raw_response.substring(9,12);
 80a063e:	230c      	movs	r3, #12
 80a0640:	2209      	movs	r2, #9
 80a0642:	4669      	mov	r1, sp
 80a0644:	a804      	add	r0, sp, #16
 80a0646:	f001 f94b 	bl	80a18e0 <_ZNK6String9substringEjj>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(statusCode);
    #endif

    int bodyPos = raw_response.indexOf("\r\n\r\n");
 80a064a:	491e      	ldr	r1, [pc, #120]	; (80a06c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
 80a064c:	a808      	add	r0, sp, #32
 80a064e:	f001 f887 	bl	80a1760 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0652:	a908      	add	r1, sp, #32
 80a0654:	4668      	mov	r0, sp
 80a0656:	f001 f940 	bl	80a18da <_ZNK6String7indexOfERKS_>
 80a065a:	4604      	mov	r4, r0
 80a065c:	a808      	add	r0, sp, #32
 80a065e:	f001 f838 	bl	80a16d2 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
 80a0662:	1c63      	adds	r3, r4, #1
 80a0664:	d014      	beq.n	80a0690 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fc>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
 80a0666:	1d3d      	adds	r5, r7, #4
 80a0668:	4917      	ldr	r1, [pc, #92]	; (80a06c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
 80a066a:	4628      	mov	r0, r5
 80a066c:	f001 f8ca 	bl	80a1804 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
 80a0670:	1d22      	adds	r2, r4, #4
 80a0672:	4669      	mov	r1, sp
 80a0674:	a808      	add	r0, sp, #32
 80a0676:	f001 f95b 	bl	80a1930 <_ZNK6String9substringEj>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a067a:	a908      	add	r1, sp, #32
 80a067c:	4628      	mov	r0, r5
 80a067e:	f001 f8fb 	bl	80a1878 <_ZN6String6concatERKS_>
 80a0682:	a808      	add	r0, sp, #32
 80a0684:	f001 f825 	bl	80a16d2 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
 80a0688:	9804      	ldr	r0, [sp, #16]
 80a068a:	f002 f807 	bl	80a269c <atoi>
 80a068e:	6038      	str	r0, [r7, #0]
    if (bodyPos == -1) {
        #ifdef LOGGING
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
        #endif

        return;
 80a0690:	a804      	add	r0, sp, #16
 80a0692:	f001 f81e 	bl	80a16d2 <_ZN6StringD1Ev>
 80a0696:	4668      	mov	r0, sp
 80a0698:	f001 f81b 	bl	80a16d2 <_ZN6StringD1Ev>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
 80a069c:	b00f      	add	sp, #60	; 0x3c
 80a069e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a06a2:	bf00      	nop
 80a06a4:	080a2a44 	.word	0x080a2a44
 80a06a8:	080a2a72 	.word	0x080a2a72
 80a06ac:	080a29dd 	.word	0x080a29dd
 80a06b0:	080a29ef 	.word	0x080a29ef
 80a06b4:	080a29e9 	.word	0x080a29e9
 80a06b8:	080a29fa 	.word	0x080a29fa
 80a06bc:	080a293f 	.word	0x080a293f
 80a06c0:	080a29ff 	.word	0x080a29ff
 80a06c4:	080a2a0e 	.word	0x080a2a0e
 80a06c8:	080a2a12 	.word	0x080a2a12

080a06cc <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
 80a06cc:	b538      	push	{r3, r4, r5, lr}
 80a06ce:	4604      	mov	r4, r0
 80a06d0:	4615      	mov	r5, r2
 80a06d2:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
 80a06d4:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
 80a06d6:	2101      	movs	r1, #1
 80a06d8:	f001 fdfa 	bl	80a22d0 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
 80a06dc:	7b20      	ldrb	r0, [r4, #12]
 80a06de:	2101      	movs	r1, #1
 80a06e0:	f001 fe07 	bl	80a22f2 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
 80a06e4:	4628      	mov	r0, r5
	_chipSelectPin = chipSelectPin;
	pinMode(_chipSelectPin, OUTPUT);
	digitalWrite(_chipSelectPin, HIGH);
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
 80a06e6:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
 80a06e8:	2101      	movs	r1, #1
 80a06ea:	f001 fdf1 	bl	80a22d0 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
 80a06ee:	7b60      	ldrb	r0, [r4, #13]
 80a06f0:	2100      	movs	r1, #0
 80a06f2:	f001 fdfe 	bl	80a22f2 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
 80a06f6:	4620      	mov	r0, r4
 80a06f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a06fc <_ZN7MFRC52212setSPIConfigEv>:

/**
 * Set SPI bus to work with MFRC522 chip.
 * Please call this function if you have changed the SPI config since the MFRC522 constructor was run.
 */
void MFRC522::setSPIConfig() {
 80a06fc:	b510      	push	{r4, lr}
	SPI.begin();			// Init SPI bus
 80a06fe:	4c09      	ldr	r4, [pc, #36]	; (80a0724 <_ZN7MFRC52212setSPIConfigEv+0x28>)
 80a0700:	4620      	mov	r0, r4
 80a0702:	f000 ff67 	bl	80a15d4 <_ZN8SPIClass5beginEv>
	SPI.setClockDivider(SPI_CLOCK_DIV8);
 80a0706:	4620      	mov	r0, r4
 80a0708:	2110      	movs	r1, #16
 80a070a:	f000 ffb5 	bl	80a1678 <_ZN8SPIClass15setClockDividerEh>
	SPI.setBitOrder(MSBFIRST);
 80a070e:	4620      	mov	r0, r4
 80a0710:	2101      	movs	r1, #1
 80a0712:	f000 ff64 	bl	80a15de <_ZN8SPIClass11setBitOrderEh>
	SPI.setDataMode(SPI_MODE0);
 80a0716:	4620      	mov	r0, r4
} // End setSPIConfig()
 80a0718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void MFRC522::setSPIConfig() {
	SPI.begin();			// Init SPI bus
	SPI.setClockDivider(SPI_CLOCK_DIV8);
	SPI.setBitOrder(MSBFIRST);
	SPI.setDataMode(SPI_MODE0);
 80a071c:	2100      	movs	r1, #0
 80a071e:	f000 bf61 	b.w	80a15e4 <_ZN8SPIClass11setDataModeEh>
 80a0722:	bf00      	nop
 80a0724:	20000d0c 	.word	0x20000d0c

080a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
 80a0728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a072a:	460f      	mov	r7, r1
 80a072c:	4616      	mov	r6, r2
 80a072e:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a0730:	4d09      	ldr	r5, [pc, #36]	; (80a0758 <_ZN7MFRC52217PCD_WriteRegisterEhh+0x30>)
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a0732:	2100      	movs	r1, #0
 80a0734:	7b00      	ldrb	r0, [r0, #12]
 80a0736:	f001 fddc 	bl	80a22f2 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a073a:	f007 017e 	and.w	r1, r7, #126	; 0x7e
 80a073e:	4628      	mov	r0, r5
 80a0740:	f000 ffae 	bl	80a16a0 <_ZN8SPIClass8transferEh>
	SPI.transfer(value);
 80a0744:	4631      	mov	r1, r6
 80a0746:	4628      	mov	r0, r5
 80a0748:	f000 ffaa 	bl	80a16a0 <_ZN8SPIClass8transferEh>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a074c:	7b20      	ldrb	r0, [r4, #12]
 80a074e:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a0750:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
									byte value		///< The value to write.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	SPI.transfer(value);
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a0754:	f001 bdcd 	b.w	80a22f2 <digitalWrite>
 80a0758:	20000d0c 	.word	0x20000d0c

080a075c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a075e:	460d      	mov	r5, r1
 80a0760:	4614      	mov	r4, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a0762:	2100      	movs	r1, #0
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a0764:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a0766:	7b00      	ldrb	r0, [r0, #12]
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a0768:	461f      	mov	r7, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a076a:	f001 fdc2 	bl	80a22f2 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a076e:	f005 017e 	and.w	r1, r5, #126	; 0x7e
 80a0772:	480a      	ldr	r0, [pc, #40]	; (80a079c <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x40>)
 80a0774:	f000 ff94 	bl	80a16a0 <_ZN8SPIClass8transferEh>
 80a0778:	3c01      	subs	r4, #1
 80a077a:	1e7d      	subs	r5, r7, #1
 80a077c:	443c      	add	r4, r7
	for (byte index = 0; index < count; index++) {
 80a077e:	42a5      	cmp	r5, r4
 80a0780:	d005      	beq.n	80a078e <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x32>
		SPI.transfer(values[index]);
 80a0782:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a0786:	4805      	ldr	r0, [pc, #20]	; (80a079c <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x40>)
 80a0788:	f000 ff8a 	bl	80a16a0 <_ZN8SPIClass8transferEh>
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
 80a078c:	e7f7      	b.n	80a077e <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x22>
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a078e:	7b30      	ldrb	r0, [r6, #12]
 80a0790:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a0792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a0796:	f001 bdac 	b.w	80a22f2 <digitalWrite>
 80a079a:	bf00      	nop
 80a079c:	20000d0c 	.word	0x20000d0c

080a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80a07a0:	b538      	push	{r3, r4, r5, lr}
 80a07a2:	460c      	mov	r4, r1
 80a07a4:	4605      	mov	r5, r0
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a07a6:	2100      	movs	r1, #0
 80a07a8:	7b00      	ldrb	r0, [r0, #12]
 80a07aa:	f001 fda2 	bl	80a22f2 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a07ae:	f004 017e 	and.w	r1, r4, #126	; 0x7e
 80a07b2:	4c08      	ldr	r4, [pc, #32]	; (80a07d4 <_ZN7MFRC52216PCD_ReadRegisterEh+0x34>)
 80a07b4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a07b8:	4620      	mov	r0, r4
 80a07ba:	f000 ff71 	bl	80a16a0 <_ZN8SPIClass8transferEh>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
 80a07be:	2100      	movs	r1, #0
 80a07c0:	4620      	mov	r0, r4
 80a07c2:	f000 ff6d 	bl	80a16a0 <_ZN8SPIClass8transferEh>
 80a07c6:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a07c8:	2101      	movs	r1, #1
 80a07ca:	7b28      	ldrb	r0, [r5, #12]
 80a07cc:	f001 fd91 	bl	80a22f2 <digitalWrite>
	return value;
} // End PCD_ReadRegister()
 80a07d0:	4620      	mov	r0, r4
 80a07d2:	bd38      	pop	{r3, r4, r5, pc}
 80a07d4:	20000d0c 	.word	0x20000d0c

080a07d8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
 */
void MFRC522::PCD_ReadRegister(	byte reg,		///< The register to read from. One of the PCD_Register enums.
								byte count,		///< The number of bytes to read
								byte *values,	///< Byte array to store the values in.
								byte rxAlign	///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
 80a07d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a07dc:	4680      	mov	r8, r0
 80a07de:	461f      	mov	r7, r3
 80a07e0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	if (count == 0) {
 80a07e4:	4615      	mov	r5, r2
 80a07e6:	2a00      	cmp	r2, #0
 80a07e8:	d043      	beq.n	80a0872 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x9a>
		return;
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a07ea:	f001 017e 	and.w	r1, r1, #126	; 0x7e
 80a07ee:	f041 0680 	orr.w	r6, r1, #128	; 0x80
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a07f2:	7b00      	ldrb	r0, [r0, #12]
 80a07f4:	2100      	movs	r1, #0
 80a07f6:	f001 fd7c 	bl	80a22f2 <digitalWrite>
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a07fa:	4631      	mov	r1, r6
 80a07fc:	481e      	ldr	r0, [pc, #120]	; (80a0878 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xa0>)
 80a07fe:	f000 ff4f 	bl	80a16a0 <_ZN8SPIClass8transferEh>
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
 80a0802:	3d01      	subs	r5, #1
 80a0804:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a0806:	f04f 0b00 	mov.w	fp, #0
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
				mask |= (1 << i);
 80a080a:	f04f 0a01 	mov.w	sl, #1
 80a080e:	fa5f f48b 	uxtb.w	r4, fp
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
 80a0812:	42a5      	cmp	r5, r4
 80a0814:	d921      	bls.n	80a085a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
 80a0816:	b9bc      	cbnz	r4, 80a0848 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
 80a0818:	f1b9 0f00 	cmp.w	r9, #0
 80a081c:	d014      	beq.n	80a0848 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
 80a081e:	464b      	mov	r3, r9
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a0820:	2b07      	cmp	r3, #7
 80a0822:	d806      	bhi.n	80a0832 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
 80a0824:	fa0a f003 	lsl.w	r0, sl, r3
 80a0828:	4304      	orrs	r4, r0
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a082a:	3301      	adds	r3, #1
				mask |= (1 << i);
 80a082c:	b2e4      	uxtb	r4, r4
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a082e:	b2db      	uxtb	r3, r3
 80a0830:	e7f6      	b.n	80a0820 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x48>
				mask |= (1 << i);
			}
			// Read value and tell that we want to read the same address again.
			byte value = SPI.transfer(address);	
 80a0832:	4631      	mov	r1, r6
 80a0834:	4810      	ldr	r0, [pc, #64]	; (80a0878 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xa0>)
 80a0836:	f000 ff33 	bl	80a16a0 <_ZN8SPIClass8transferEh>
			// Apply mask to both current value of values[0] and the new data in value.
			values[0] = (values[index] & ~mask) | (value & mask);
 80a083a:	783b      	ldrb	r3, [r7, #0]
 80a083c:	4020      	ands	r0, r4
 80a083e:	ea23 0304 	bic.w	r3, r3, r4
 80a0842:	4318      	orrs	r0, r3
 80a0844:	7038      	strb	r0, [r7, #0]
 80a0846:	e005      	b.n	80a0854 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x7c>
		}
		else { // Normal case
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
 80a0848:	4631      	mov	r1, r6
 80a084a:	480b      	ldr	r0, [pc, #44]	; (80a0878 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xa0>)
 80a084c:	f000 ff28 	bl	80a16a0 <_ZN8SPIClass8transferEh>
 80a0850:	f807 000b 	strb.w	r0, [r7, fp]
 80a0854:	f10b 0b01 	add.w	fp, fp, #1
 80a0858:	e7d9      	b.n	80a080e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x36>
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a085a:	2100      	movs	r1, #0
 80a085c:	4806      	ldr	r0, [pc, #24]	; (80a0878 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0xa0>)
 80a085e:	f000 ff1f 	bl	80a16a0 <_ZN8SPIClass8transferEh>
 80a0862:	5578      	strb	r0, [r7, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a0864:	f898 000c 	ldrb.w	r0, [r8, #12]
 80a0868:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
 80a086a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a086e:	f001 bd40 	b.w	80a22f2 <digitalWrite>
 80a0872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0876:	bf00      	nop
 80a0878:	20000d0c 	.word	0x20000d0c

080a087c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
 80a087c:	b570      	push	{r4, r5, r6, lr}
 80a087e:	4605      	mov	r5, r0
 80a0880:	460e      	mov	r6, r1
 80a0882:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a0884:	f7ff ff8c 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a0888:	ea40 0204 	orr.w	r2, r0, r4
 80a088c:	4631      	mov	r1, r6
 80a088e:	4628      	mov	r0, r5
} // End PCD_SetRegisterBitMask()
 80a0890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a0894:	b2d2      	uxtb	r2, r2
 80a0896:	f7ff bf47 	b.w	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a089a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
 80a089a:	b570      	push	{r4, r5, r6, lr}
 80a089c:	4605      	mov	r5, r0
 80a089e:	460e      	mov	r6, r1
 80a08a0:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a08a2:	f7ff ff7d 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a08a6:	ea20 0204 	bic.w	r2, r0, r4
 80a08aa:	4631      	mov	r1, r6
 80a08ac:	4628      	mov	r0, r5
} // End PCD_ClearRegisterBitMask()
 80a08ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a08b2:	b2d2      	uxtb	r2, r2
 80a08b4:	f7ff bf38 	b.w	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a08b8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a08b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08ba:	4604      	mov	r4, r0
 80a08bc:	4615      	mov	r5, r2
 80a08be:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a08c0:	2200      	movs	r2, #0
 80a08c2:	2102      	movs	r1, #2
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a08c4:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a08c6:	f7ff ff2f 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80a08ca:	2204      	movs	r2, #4
 80a08cc:	210a      	movs	r1, #10
 80a08ce:	4620      	mov	r0, r4
 80a08d0:	f7ff ff2a 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a08d4:	2280      	movs	r2, #128	; 0x80
 80a08d6:	2114      	movs	r1, #20
 80a08d8:	4620      	mov	r0, r4
 80a08da:	f7ff ffcf 	bl	80a087c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
 80a08de:	462a      	mov	r2, r5
 80a08e0:	463b      	mov	r3, r7
 80a08e2:	2112      	movs	r1, #18
 80a08e4:	4620      	mov	r0, r4
 80a08e6:	f7ff ff39 	bl	80a075c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 80a08ea:	2203      	movs	r2, #3
 80a08ec:	2102      	movs	r1, #2
 80a08ee:	4620      	mov	r0, r4
 80a08f0:	f7ff ff1a 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a08f4:	f241 3588 	movw	r5, #5000	; 0x1388
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	word i = 5000;
	byte n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 80a08f8:	210a      	movs	r1, #10
 80a08fa:	4620      	mov	r0, r4
 80a08fc:	f7ff ff50 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 80a0900:	0743      	lsls	r3, r0, #29
 80a0902:	d405      	bmi.n	80a0910 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
 80a0904:	3d01      	subs	r5, #1
 80a0906:	b2ad      	uxth	r5, r5
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 80a0908:	2d00      	cmp	r5, #0
 80a090a:	d1f5      	bne.n	80a08f8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
 80a090c:	2004      	movs	r0, #4
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
	result[1] = PCD_ReadRegister(CRCResultRegH);
	return STATUS_OK;
} // End PCD_CalculateCRC()
 80a090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
			return STATUS_TIMEOUT;
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 80a0910:	2200      	movs	r2, #0
 80a0912:	4620      	mov	r0, r4
 80a0914:	2102      	movs	r1, #2
 80a0916:	f7ff ff07 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a091a:	2144      	movs	r1, #68	; 0x44
 80a091c:	4620      	mov	r0, r4
 80a091e:	f7ff ff3f 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a0922:	2142      	movs	r1, #66	; 0x42
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a0924:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a0926:	4620      	mov	r0, r4
 80a0928:	f7ff ff3a 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a092c:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
 80a092e:	2001      	movs	r0, #1
 80a0930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0932 <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a0932:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a0934:	220f      	movs	r2, #15
 80a0936:	2102      	movs	r1, #2
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a0938:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a093a:	f7ff fef5 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
 80a093e:	2032      	movs	r0, #50	; 0x32
 80a0940:	f000 fcde 	bl	80a1300 <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 80a0944:	2102      	movs	r1, #2
 80a0946:	4620      	mov	r0, r4
 80a0948:	f7ff ff2a 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a094c:	06c3      	lsls	r3, r0, #27
 80a094e:	d4f9      	bmi.n	80a0944 <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
 80a0950:	bd10      	pop	{r4, pc}

080a0952 <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a0952:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
 80a0954:	2128      	movs	r1, #40	; 0x28

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a0956:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
 80a0958:	f7ff ff22 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
 80a095c:	f000 0303 	and.w	r3, r0, #3
 80a0960:	2b03      	cmp	r3, #3
 80a0962:	d008      	beq.n	80a0976 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a0964:	f040 0203 	orr.w	r2, r0, #3
 80a0968:	b2d2      	uxtb	r2, r2
 80a096a:	4620      	mov	r0, r4
	}
} // End PCD_AntennaOn()
 80a096c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
	byte value = PCD_ReadRegister(TxControlReg);
	if ((value & 0x03) != 0x03) {
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a0970:	2128      	movs	r1, #40	; 0x28
 80a0972:	f7ff bed9 	b.w	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a0976:	bd10      	pop	{r4, pc}

080a0978 <_ZN7MFRC5228PCD_InitEv>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void MFRC522::PCD_Init() {
 80a0978:	b510      	push	{r4, lr}
 80a097a:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
 80a097c:	7b40      	ldrb	r0, [r0, #13]
 80a097e:	f001 fcd1 	bl	80a2324 <digitalRead>
 80a0982:	b938      	cbnz	r0, 80a0994 <_ZN7MFRC5228PCD_InitEv+0x1c>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
 80a0984:	7b60      	ldrb	r0, [r4, #13]
 80a0986:	2101      	movs	r1, #1
 80a0988:	f001 fcb3 	bl	80a22f2 <digitalWrite>
		// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
		delay(50);
 80a098c:	2032      	movs	r0, #50	; 0x32
 80a098e:	f000 fcb7 	bl	80a1300 <delay>
 80a0992:	e002      	b.n	80a099a <_ZN7MFRC5228PCD_InitEv+0x22>
	}
	else { // Perform a soft reset
		PCD_Reset();
 80a0994:	4620      	mov	r0, r4
 80a0996:	f7ff ffcc 	bl	80a0932 <_ZN7MFRC5229PCD_ResetEv>
	}
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80a099a:	4620      	mov	r0, r4
 80a099c:	2280      	movs	r2, #128	; 0x80
 80a099e:	2154      	movs	r1, #84	; 0x54
 80a09a0:	f7ff fec2 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 80a09a4:	4620      	mov	r0, r4
 80a09a6:	22a9      	movs	r2, #169	; 0xa9
 80a09a8:	2156      	movs	r1, #86	; 0x56
 80a09aa:	f7ff febd 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80a09ae:	4620      	mov	r0, r4
 80a09b0:	2203      	movs	r2, #3
 80a09b2:	2158      	movs	r1, #88	; 0x58
 80a09b4:	f7ff feb8 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80a09b8:	4620      	mov	r0, r4
 80a09ba:	22e8      	movs	r2, #232	; 0xe8
 80a09bc:	215a      	movs	r1, #90	; 0x5a
 80a09be:	f7ff feb3 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80a09c2:	4620      	mov	r0, r4
 80a09c4:	2240      	movs	r2, #64	; 0x40
 80a09c6:	212a      	movs	r1, #42	; 0x2a
 80a09c8:	f7ff feae 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80a09cc:	4620      	mov	r0, r4
 80a09ce:	223d      	movs	r2, #61	; 0x3d
 80a09d0:	2122      	movs	r1, #34	; 0x22
 80a09d2:	f7ff fea9 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a09d6:	4620      	mov	r0, r4
} // End PCD_Init()
 80a09d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
    PCD_WriteRegister(TReloadRegL, 0xE8);
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a09dc:	f7ff bfb9 	b.w	80a0952 <_ZN7MFRC52213PCD_AntennaOnEv>

080a09e0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
										byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
										byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
										byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
										byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
										bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 80a09e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a09e4:	b087      	sub	sp, #28
 80a09e6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80a09ea:	4604      	mov	r4, r0
 80a09ec:	468b      	mov	fp, r1
 80a09ee:	9202      	str	r2, [sp, #8]
 80a09f0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80a09f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a09f4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a09f8:	f1b8 0f00 	cmp.w	r8, #0
 80a09fc:	d002      	beq.n	80a0a04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
 80a09fe:	f898 6000 	ldrb.w	r6, [r8]
 80a0a02:	e000      	b.n	80a0a06 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x26>
 80a0a04:	4646      	mov	r6, r8
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a0a06:	2200      	movs	r2, #0
 80a0a08:	2102      	movs	r1, #2
 80a0a0a:	4620      	mov	r0, r4
 80a0a0c:	9303      	str	r3, [sp, #12]
 80a0a0e:	f7ff fe8b 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80a0a12:	227f      	movs	r2, #127	; 0x7f
 80a0a14:	2108      	movs	r1, #8
 80a0a16:	4620      	mov	r0, r4
 80a0a18:	f7ff fe86 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a0a1c:	eb06 160a 	add.w	r6, r6, sl, lsl #4
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a0a20:	2280      	movs	r2, #128	; 0x80
 80a0a22:	2114      	movs	r1, #20
 80a0a24:	4620      	mov	r0, r4
 80a0a26:	f7ff ff29 	bl	80a087c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a0a2a:	b2f6      	uxtb	r6, r6
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80a0a2c:	9b03      	ldr	r3, [sp, #12]
 80a0a2e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a0a32:	2112      	movs	r1, #18
 80a0a34:	4620      	mov	r0, r4
 80a0a36:	f7ff fe91 	bl	80a075c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 80a0a3a:	4632      	mov	r2, r6
 80a0a3c:	211a      	movs	r1, #26
 80a0a3e:	4620      	mov	r0, r4
 80a0a40:	f7ff fe72 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 80a0a44:	465a      	mov	r2, fp
 80a0a46:	2102      	movs	r1, #2
 80a0a48:	4620      	mov	r0, r4
 80a0a4a:	f7ff fe6d 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
 80a0a4e:	f1bb 0f0c 	cmp.w	fp, #12
 80a0a52:	d104      	bne.n	80a0a5e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x7e>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 80a0a54:	2280      	movs	r2, #128	; 0x80
 80a0a56:	211a      	movs	r1, #26
 80a0a58:	4620      	mov	r0, r4
 80a0a5a:	f7ff ff0f 	bl	80a087c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
									 ) {
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a0a5e:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 80a0a62:	2108      	movs	r1, #8
 80a0a64:	4620      	mov	r0, r4
 80a0a66:	f7ff fe9b 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 80a0a6a:	9b02      	ldr	r3, [sp, #8]
 80a0a6c:	4218      	tst	r0, r3
 80a0a6e:	d104      	bne.n	80a0a7a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9a>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 80a0a70:	07c2      	lsls	r2, r0, #31
 80a0a72:	d452      	bmi.n	80a0b1a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 80a0a74:	3e01      	subs	r6, #1
 80a0a76:	d1f4      	bne.n	80a0a62 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x82>
 80a0a78:	e04f      	b.n	80a0b1a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a0a7a:	210c      	movs	r1, #12
 80a0a7c:	4620      	mov	r0, r4
 80a0a7e:	f7ff fe8f 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a0a82:	f010 0f13 	tst.w	r0, #19
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a0a86:	4606      	mov	r6, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a0a88:	d149      	bne.n	80a0b1e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13e>
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 80a0a8a:	b1df      	cbz	r7, 80a0ac4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
 80a0a8c:	b1d5      	cbz	r5, 80a0ac4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a0a8e:	2114      	movs	r1, #20
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	f7ff fe85 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
 80a0a96:	782b      	ldrb	r3, [r5, #0]
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a0a98:	4602      	mov	r2, r0
		if (n > *backLen) {
 80a0a9a:	4283      	cmp	r3, r0
 80a0a9c:	d341      	bcc.n	80a0b22 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x142>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of bytes returned
 80a0a9e:	7028      	strb	r0, [r5, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 80a0aa0:	463b      	mov	r3, r7
 80a0aa2:	2112      	movs	r1, #18
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	f8cd a000 	str.w	sl, [sp]
 80a0aaa:	f7ff fe95 	bl	80a07d8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
 80a0aae:	2118      	movs	r1, #24
 80a0ab0:	4620      	mov	r0, r4
 80a0ab2:	f7ff fe75 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a0ab6:	f000 0907 	and.w	r9, r0, #7
		if (validBits) {
 80a0aba:	f1b8 0f00 	cmp.w	r8, #0
 80a0abe:	d001      	beq.n	80a0ac4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
			*validBits = _validBits;
 80a0ac0:	f888 9000 	strb.w	r9, [r8]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
 80a0ac4:	0733      	lsls	r3, r6, #28
 80a0ac6:	d42e      	bmi.n	80a0b26 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		return STATUS_COLLISION;
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 80a0ac8:	b37f      	cbz	r7, 80a0b2a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
 80a0aca:	b375      	cbz	r5, 80a0b2a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
 80a0acc:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80a0ad0:	b35b      	cbz	r3, 80a0b2a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 80a0ad2:	782a      	ldrb	r2, [r5, #0]
 80a0ad4:	2a01      	cmp	r2, #1
 80a0ad6:	d104      	bne.n	80a0ae2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x102>
 80a0ad8:	f1b9 0f04 	cmp.w	r9, #4
 80a0adc:	d127      	bne.n	80a0b2e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_MIFARE_NACK;
 80a0ade:	2009      	movs	r0, #9
 80a0ae0:	e026      	b.n	80a0b30 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
 80a0ae2:	d924      	bls.n	80a0b2e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a0ae4:	f1b9 0f00 	cmp.w	r9, #0
 80a0ae8:	d121      	bne.n	80a0b2e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2]; 
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80a0aea:	3a02      	subs	r2, #2
 80a0aec:	ab05      	add	r3, sp, #20
 80a0aee:	b2d2      	uxtb	r2, r2
 80a0af0:	4639      	mov	r1, r7
 80a0af2:	4620      	mov	r0, r4
 80a0af4:	f7ff fee0 	bl	80a08b8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
 80a0af8:	2801      	cmp	r0, #1
 80a0afa:	d119      	bne.n	80a0b30 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80a0afc:	782b      	ldrb	r3, [r5, #0]
 80a0afe:	441f      	add	r7, r3
 80a0b00:	f817 2c02 	ldrb.w	r2, [r7, #-2]
 80a0b04:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a0b08:	429a      	cmp	r2, r3
 80a0b0a:	d110      	bne.n	80a0b2e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a0b0c:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80a0b10:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a0b14:	429a      	cmp	r2, r3
 80a0b16:	d10a      	bne.n	80a0b2e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a0b18:	e00a      	b.n	80a0b30 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
			return STATUS_TIMEOUT;
 80a0b1a:	2004      	movs	r0, #4
 80a0b1c:	e008      	b.n	80a0b30 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
		return STATUS_ERROR;
 80a0b1e:	2002      	movs	r0, #2
 80a0b20:	e006      	b.n	80a0b30 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
		if (n > *backLen) {
			return STATUS_NO_ROOM;
 80a0b22:	2005      	movs	r0, #5
 80a0b24:	e004      	b.n	80a0b30 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
		return STATUS_COLLISION;
 80a0b26:	2003      	movs	r0, #3
 80a0b28:	e002      	b.n	80a0b30 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
 80a0b2a:	2001      	movs	r0, #1
 80a0b2c:	e000      	b.n	80a0b30 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if (*backLen == 1 && _validBits == 4) {
			return STATUS_MIFARE_NACK;
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
			return STATUS_CRC_WRONG;
 80a0b2e:	2008      	movs	r0, #8
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
 80a0b30:	b007      	add	sp, #28
 80a0b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0b36 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
									byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
									byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
									byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits. Default NULL.
									byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
									bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
 80a0b36:	b510      	push	{r4, lr}
 80a0b38:	b086      	sub	sp, #24
	byte waitIRq = 0x30;		// RxIRq and IdleIRq
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 80a0b3a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80a0b3e:	9405      	str	r4, [sp, #20]
 80a0b40:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a0b44:	9404      	str	r4, [sp, #16]
 80a0b46:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a0b48:	9403      	str	r4, [sp, #12]
 80a0b4a:	9c08      	ldr	r4, [sp, #32]
 80a0b4c:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 80a0b50:	460b      	mov	r3, r1
 80a0b52:	2230      	movs	r2, #48	; 0x30
 80a0b54:	210c      	movs	r1, #12
 80a0b56:	f7ff ff43 	bl	80a09e0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
 80a0b5a:	b006      	add	sp, #24
 80a0b5c:	bd10      	pop	{r4, pc}

080a0b5e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
									byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
									byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							   ) {
 80a0b5e:	b570      	push	{r4, r5, r6, lr}
 80a0b60:	b088      	sub	sp, #32
 80a0b62:	4606      	mov	r6, r0
 80a0b64:	461c      	mov	r4, r3
 80a0b66:	f88d 1017 	strb.w	r1, [sp, #23]
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a0b6a:	4615      	mov	r5, r2
 80a0b6c:	b312      	cbz	r2, 80a0bb4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
 80a0b6e:	781b      	ldrb	r3, [r3, #0]
 80a0b70:	2b01      	cmp	r3, #1
 80a0b72:	d91f      	bls.n	80a0bb4 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a0b74:	2280      	movs	r2, #128	; 0x80
 80a0b76:	211c      	movs	r1, #28
 80a0b78:	f7ff fe8f 	bl	80a089a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
 80a0b7c:	2307      	movs	r3, #7
 80a0b7e:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 80a0b82:	2300      	movs	r3, #0
 80a0b84:	9303      	str	r3, [sp, #12]
 80a0b86:	9302      	str	r3, [sp, #8]
 80a0b88:	f10d 031f 	add.w	r3, sp, #31
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	9400      	str	r4, [sp, #0]
 80a0b90:	462b      	mov	r3, r5
 80a0b92:	2201      	movs	r2, #1
 80a0b94:	f10d 0117 	add.w	r1, sp, #23
 80a0b98:	4630      	mov	r0, r6
 80a0b9a:	f7ff ffcc 	bl	80a0b36 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
 80a0b9e:	2801      	cmp	r0, #1
 80a0ba0:	d10b      	bne.n	80a0bba <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 80a0ba2:	7820      	ldrb	r0, [r4, #0]
 80a0ba4:	2802      	cmp	r0, #2
 80a0ba6:	d107      	bne.n	80a0bb8 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5a>
 80a0ba8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a0bac:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
	}
	return STATUS_OK;
 80a0bae:	bf08      	it	eq
 80a0bb0:	2001      	moveq	r0, #1
 80a0bb2:	e002      	b.n	80a0bba <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
							   ) {
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
 80a0bb4:	2005      	movs	r0, #5
 80a0bb6:	e000      	b.n	80a0bba <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
 80a0bb8:	2002      	movs	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
 80a0bba:	b008      	add	sp, #32
 80a0bbc:	bd70      	pop	{r4, r5, r6, pc}

080a0bbe <_ZN7MFRC52212PICC_WakeupAEPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_WakeupA(	byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
							byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							) {
	return PICC_REQA_or_WUPA(PICC_CMD_WUPA, bufferATQA, bufferSize);
 80a0bbe:	4613      	mov	r3, r2
 80a0bc0:	460a      	mov	r2, r1
 80a0bc2:	2152      	movs	r1, #82	; 0x52
 80a0bc4:	f7ff bfcb 	b.w	80a0b5e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

080a0bc8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
 80a0bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 80a0bcc:	2a50      	cmp	r2, #80	; 0x50
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
 80a0bce:	b08b      	sub	sp, #44	; 0x2c
 80a0bd0:	4683      	mov	fp, r0
 80a0bd2:	468a      	mov	sl, r1
 80a0bd4:	4617      	mov	r7, r2
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 80a0bd6:	f200 80f6 	bhi.w	80a0dc6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
		return STATUS_INVALID;
	}

	// Prepare MFRC522
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a0bda:	2280      	movs	r2, #128	; 0x80
 80a0bdc:	211c      	movs	r1, #28
 80a0bde:	f7ff fe5c 	bl	80a089a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	byte cascadeLevel	= 1; 
 80a0be2:	2501      	movs	r5, #1

	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
 80a0be4:	2d02      	cmp	r5, #2
 80a0be6:	d010      	beq.n	80a0c0a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x42>
 80a0be8:	2d03      	cmp	r5, #3
 80a0bea:	d01b      	beq.n	80a0c24 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x5c>
 80a0bec:	2d01      	cmp	r5, #1
 80a0bee:	f040 80ec 	bne.w	80a0dca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x202>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
 80a0bf2:	2393      	movs	r3, #147	; 0x93
 80a0bf4:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 0;
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a0bf8:	b1d7      	cbz	r7, 80a0c30 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
 80a0bfa:	f89a 3000 	ldrb.w	r3, [sl]
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
 80a0bfe:	2600      	movs	r6, #0
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a0c00:	2b04      	cmp	r3, #4
 80a0c02:	bf94      	ite	ls
 80a0c04:	2300      	movls	r3, #0
 80a0c06:	2301      	movhi	r3, #1
 80a0c08:	e016      	b.n	80a0c38 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
 80a0c0a:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80a0c0e:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 3;
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a0c12:	b17f      	cbz	r7, 80a0c34 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6c>
 80a0c14:	f89a 3000 	ldrb.w	r3, [sl]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
 80a0c18:	2603      	movs	r6, #3
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a0c1a:	2b07      	cmp	r3, #7
 80a0c1c:	bf94      	ite	ls
 80a0c1e:	2300      	movls	r3, #0
 80a0c20:	2301      	movhi	r3, #1
 80a0c22:	e009      	b.n	80a0c38 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				break;
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
 80a0c24:	2397      	movs	r3, #151	; 0x97
 80a0c26:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
 80a0c2a:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
 80a0c2c:	2300      	movs	r3, #0
				break;
 80a0c2e:	e003      	b.n	80a0c38 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
 80a0c30:	463e      	mov	r6, r7
 80a0c32:	e000      	b.n	80a0c36 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6e>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
 80a0c34:	2603      	movs	r6, #3
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a0c36:	463b      	mov	r3, r7
				return STATUS_INTERNAL_ERROR;
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
 80a0c38:	eba7 04c6 	sub.w	r4, r7, r6, lsl #3
 80a0c3c:	b264      	sxtb	r4, r4
 80a0c3e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
		if (useCascadeTag) {
 80a0c42:	b12b      	cbz	r3, 80a0c50 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
			buffer[index++] = PICC_CMD_CT;
 80a0c44:	2288      	movs	r2, #136	; 0x88
 80a0c46:	f88d 201e 	strb.w	r2, [sp, #30]
 80a0c4a:	f04f 0803 	mov.w	r8, #3
 80a0c4e:	e001      	b.n	80a0c54 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8c>
		currentLevelKnownBits = validBits - (8 * uidIndex);
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
 80a0c50:	f04f 0802 	mov.w	r8, #2
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a0c54:	b2e1      	uxtb	r1, r4
 80a0c56:	f011 0207 	ands.w	r2, r1, #7
 80a0c5a:	bf18      	it	ne
 80a0c5c:	2201      	movne	r2, #1
 80a0c5e:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
 80a0c62:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80a0c66:	d106      	bne.n	80a0c76 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xae>
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
 80a0c68:	2b00      	cmp	r3, #0
 80a0c6a:	f000 808c 	beq.w	80a0d86 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1be>
			currentLevelKnownBits += 8;
 80a0c6e:	f101 0408 	add.w	r4, r1, #8
 80a0c72:	b264      	sxtb	r4, r4
 80a0c74:	e087      	b.n	80a0d86 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1be>
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 80a0c76:	2b00      	cmp	r3, #0
 80a0c78:	bf14      	ite	ne
 80a0c7a:	2003      	movne	r0, #3
 80a0c7c:	2004      	moveq	r0, #4
 80a0c7e:	4282      	cmp	r2, r0
 80a0c80:	bf28      	it	cs
 80a0c82:	4602      	movcs	r2, r0
 80a0c84:	2000      	movs	r0, #0
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a0c86:	eb08 0e00 	add.w	lr, r8, r0
 80a0c8a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80a0c8e:	fa5f fe8e 	uxtb.w	lr, lr
 80a0c92:	44e6      	add	lr, ip
 80a0c94:	eb06 0c00 	add.w	ip, r6, r0
 80a0c98:	44d4      	add	ip, sl
 80a0c9a:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a0c9e:	3001      	adds	r0, #1
 80a0ca0:	f80e cc0c 	strb.w	ip, [lr, #-12]
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
 80a0ca4:	fa5f fe80 	uxtb.w	lr, r0
 80a0ca8:	4596      	cmp	lr, r2
 80a0caa:	d3ec      	bcc.n	80a0c86 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
 80a0cac:	e7dc      	b.n	80a0c68 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
				currentLevelKnownBits = collisionPos;
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
			}
			else if (result != STATUS_OK) {
 80a0cae:	2801      	cmp	r0, #1
 80a0cb0:	f040 808d 	bne.w	80a0dce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
				return result;
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a0cb4:	2c1f      	cmp	r4, #31
 80a0cb6:	f300 808c 	bgt.w	80a0dd2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
					selectDone = true; // No more anticollision 
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
 80a0cba:	2420      	movs	r4, #32
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a0cbc:	f04f 0370 	mov.w	r3, #112	; 0x70
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a0cc0:	f89d 201e 	ldrb.w	r2, [sp, #30]
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a0cc4:	f88d 301d 	strb.w	r3, [sp, #29]
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a0cc8:	f89d 301f 	ldrb.w	r3, [sp, #31]
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a0ccc:	a907      	add	r1, sp, #28
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a0cce:	4053      	eors	r3, r2
 80a0cd0:	f89d 2020 	ldrb.w	r2, [sp, #32]
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a0cd4:	4658      	mov	r0, fp
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a0cd6:	405a      	eors	r2, r3
 80a0cd8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a0cdc:	4053      	eors	r3, r2
 80a0cde:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a0ce2:	2207      	movs	r2, #7
 80a0ce4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a0ce8:	f7ff fde6 	bl	80a08b8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
 80a0cec:	2801      	cmp	r0, #1
 80a0cee:	f040 80b7 	bne.w	80a0e60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
 80a0cf2:	f04f 0300 	mov.w	r3, #0
 80a0cf6:	f88d 301a 	strb.w	r3, [sp, #26]
				bufferUsed		= 9;
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
				responseLength	= 3;
 80a0cfa:	2303      	movs	r3, #3
 80a0cfc:	f88d 301b 	strb.w	r3, [sp, #27]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
 80a0d00:	2309      	movs	r3, #9
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
 80a0d02:	f10d 0922 	add.w	r9, sp, #34	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
 80a0d06:	9304      	str	r3, [sp, #16]
				responseBuffer	= &buffer[index];
				responseLength	= sizeof(buffer) - index;
			}

			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
 80a0d08:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80a0d0c:	f818 3d0e 	ldrb.w	r3, [r8, #-14]!
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a0d10:	211a      	movs	r1, #26
 80a0d12:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80a0d16:	b2d2      	uxtb	r2, r2
 80a0d18:	4658      	mov	r0, fp
 80a0d1a:	9305      	str	r3, [sp, #20]
 80a0d1c:	f7ff fd04 	bl	80a0728 <_ZN7MFRC52217PCD_WriteRegisterEhh>

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a0d20:	2300      	movs	r3, #0
 80a0d22:	9303      	str	r3, [sp, #12]
 80a0d24:	9b05      	ldr	r3, [sp, #20]
 80a0d26:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0d2a:	9302      	str	r3, [sp, #8]
 80a0d2c:	f10d 031b 	add.w	r3, sp, #27
 80a0d30:	9300      	str	r3, [sp, #0]
 80a0d32:	9a04      	ldr	r2, [sp, #16]
 80a0d34:	464b      	mov	r3, r9
 80a0d36:	a907      	add	r1, sp, #28
 80a0d38:	4658      	mov	r0, fp
 80a0d3a:	f7ff fefc 	bl	80a0b36 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a0d3e:	2803      	cmp	r0, #3
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a0d40:	4680      	mov	r8, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a0d42:	d1b4      	bne.n	80a0cae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe6>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80a0d44:	211c      	movs	r1, #28
 80a0d46:	4658      	mov	r0, fp
 80a0d48:	f7ff fd2a 	bl	80a07a0 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
 80a0d4c:	0681      	lsls	r1, r0, #26
 80a0d4e:	d43e      	bmi.n	80a0dce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
				}
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
 80a0d50:	f010 001f 	ands.w	r0, r0, #31
 80a0d54:	bf08      	it	eq
 80a0d56:	2020      	moveq	r0, #32
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 80a0d58:	42a0      	cmp	r0, r4
 80a0d5a:	dd36      	ble.n	80a0dca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x202>
					return STATUS_INTERNAL_ERROR;
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits = collisionPos;
 80a0d5c:	b244      	sxtb	r4, r0
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
 80a0d5e:	3801      	subs	r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
 80a0d60:	f000 0307 	and.w	r3, r0, #7
 80a0d64:	f010 0007 	ands.w	r0, r0, #7
 80a0d68:	bf18      	it	ne
 80a0d6a:	2001      	movne	r0, #1
 80a0d6c:	eb00 00e4 	add.w	r0, r0, r4, asr #3
 80a0d70:	aa0a      	add	r2, sp, #40	; 0x28
 80a0d72:	3001      	adds	r0, #1
 80a0d74:	4410      	add	r0, r2
 80a0d76:	2201      	movs	r2, #1
 80a0d78:	fa02 f303 	lsl.w	r3, r2, r3
 80a0d7c:	f810 2c0c 	ldrb.w	r2, [r0, #-12]
 80a0d80:	4313      	orrs	r3, r2
 80a0d82:	f800 3c0c 	strb.w	r3, [r0, #-12]
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 80a0d86:	2c1f      	cmp	r4, #31
 80a0d88:	dc98      	bgt.n	80a0cbc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf4>
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 80a0d8a:	10e3      	asrs	r3, r4, #3
 80a0d8c:	3302      	adds	r3, #2
 80a0d8e:	b2db      	uxtb	r3, r3
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 80a0d90:	f004 0807 	and.w	r8, r4, #7
 80a0d94:	fa5f f288 	uxtb.w	r2, r8
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a0d98:	f1b8 0f00 	cmp.w	r8, #0
 80a0d9c:	bf0c      	ite	eq
 80a0d9e:	4698      	moveq	r8, r3
 80a0da0:	f103 0801 	addne.w	r8, r3, #1
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 80a0da4:	f88d 201a 	strb.w	r2, [sp, #26]
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 80a0da8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80a0dac:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a0db0:	fa5f f288 	uxtb.w	r2, r8
 80a0db4:	9204      	str	r2, [sp, #16]
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
 80a0db6:	aa07      	add	r2, sp, #28
 80a0db8:	eb02 0903 	add.w	r9, r2, r3
				responseLength	= sizeof(buffer) - index;
 80a0dbc:	f1c3 0309 	rsb	r3, r3, #9
 80a0dc0:	f88d 301b 	strb.w	r3, [sp, #27]
 80a0dc4:	e7a0      	b.n	80a0d08 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x140>
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
		return STATUS_INVALID;
 80a0dc6:	2007      	movs	r0, #7
 80a0dc8:	e04a      	b.n	80a0e60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
					return STATUS_INTERNAL_ERROR;
 80a0dca:	2006      	movs	r0, #6
 80a0dcc:	e048      	b.n	80a0e60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a0dce:	4640      	mov	r0, r8
 80a0dd0:	e046      	b.n	80a0e60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a0dd2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a0dd6:	2b88      	cmp	r3, #136	; 0x88
 80a0dd8:	d03f      	beq.n	80a0e5a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
 80a0dda:	2102      	movs	r1, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a0ddc:	2404      	movs	r4, #4
 80a0dde:	2300      	movs	r3, #0
		for (count = 0; count < bytesToCopy; count++) {
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a0de0:	18ca      	adds	r2, r1, r3
 80a0de2:	b2d2      	uxtb	r2, r2
 80a0de4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80a0de8:	4472      	add	r2, lr
 80a0dea:	18f0      	adds	r0, r6, r3
 80a0dec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80a0df0:	4450      	add	r0, sl
 80a0df2:	3301      	adds	r3, #1
 80a0df4:	7042      	strb	r2, [r0, #1]
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
		for (count = 0; count < bytesToCopy; count++) {
 80a0df6:	b2da      	uxtb	r2, r3
 80a0df8:	4294      	cmp	r4, r2
 80a0dfa:	d8f1      	bhi.n	80a0de0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x218>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
 80a0dfc:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80a0e00:	2b03      	cmp	r3, #3
 80a0e02:	d126      	bne.n	80a0e52 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
 80a0e04:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80a0e08:	bb1b      	cbnz	r3, 80a0e52 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a0e0a:	f10d 031e 	add.w	r3, sp, #30
 80a0e0e:	2201      	movs	r2, #1
 80a0e10:	4649      	mov	r1, r9
 80a0e12:	4658      	mov	r0, fp
 80a0e14:	f7ff fd50 	bl	80a08b8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
 80a0e18:	2801      	cmp	r0, #1
 80a0e1a:	d121      	bne.n	80a0e60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80a0e1c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a0e20:	f899 3001 	ldrb.w	r3, [r9, #1]
 80a0e24:	429a      	cmp	r2, r3
 80a0e26:	d116      	bne.n	80a0e56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
 80a0e28:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80a0e2c:	f899 3002 	ldrb.w	r3, [r9, #2]
 80a0e30:	429a      	cmp	r2, r3
 80a0e32:	d110      	bne.n	80a0e56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
			return STATUS_CRC_WRONG;
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80a0e34:	f899 3000 	ldrb.w	r3, [r9]
 80a0e38:	075a      	lsls	r2, r3, #29
 80a0e3a:	d502      	bpl.n	80a0e42 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
			cascadeLevel++;
 80a0e3c:	3501      	adds	r5, #1
 80a0e3e:	b2ed      	uxtb	r5, r5
 80a0e40:	e6d0      	b.n	80a0be4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c>
			uid->sak = responseBuffer[0];
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80a0e42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80a0e46:	3501      	adds	r5, #1
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
			cascadeLevel++;
		}
		else {
			uidComplete = true;
			uid->sak = responseBuffer[0];
 80a0e48:	f88a 300b 	strb.w	r3, [sl, #11]
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80a0e4c:	f88a 5000 	strb.w	r5, [sl]

	return STATUS_OK;
 80a0e50:	e006      	b.n	80a0e60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
			return STATUS_ERROR;
 80a0e52:	2002      	movs	r0, #2
 80a0e54:	e004      	b.n	80a0e60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
		if (result != STATUS_OK) {
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
			return STATUS_CRC_WRONG;
 80a0e56:	2008      	movs	r0, #8
 80a0e58:	e002      	b.n	80a0e60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a0e5a:	2103      	movs	r1, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a0e5c:	460c      	mov	r4, r1
 80a0e5e:	e7be      	b.n	80a0dde <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x216>
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;

	return STATUS_OK;
} // End PICC_Select()
 80a0e60:	b00b      	add	sp, #44	; 0x2c
 80a0e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0e66 <_ZN7MFRC52210PICC_HaltAEv>:
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_HaltA() {
 80a0e66:	b570      	push	{r4, r5, r6, lr}
	byte result;
	byte buffer[4]; 

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
 80a0e68:	2350      	movs	r3, #80	; 0x50
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_HaltA() {
 80a0e6a:	b086      	sub	sp, #24
	byte result;
	byte buffer[4]; 

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
 80a0e6c:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
 80a0e70:	2500      	movs	r5, #0
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 80a0e72:	f10d 0316 	add.w	r3, sp, #22
 80a0e76:	2202      	movs	r2, #2
 80a0e78:	a905      	add	r1, sp, #20
/**
 * Instructs a PICC in state ACTIVE(*) to go to state HALT.
 *
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_HaltA() {
 80a0e7a:	4606      	mov	r6, r0
	byte result;
	byte buffer[4]; 

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
	buffer[1] = 0;
 80a0e7c:	f88d 5015 	strb.w	r5, [sp, #21]
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 80a0e80:	f7ff fd1a 	bl	80a08b8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
 80a0e84:	2801      	cmp	r0, #1

	// Build command buffer
	buffer[0] = PICC_CMD_HLTA;
	buffer[1] = 0;
	// Calculate CRC_A
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 80a0e86:	4604      	mov	r4, r0
	if (result != STATUS_OK) {
 80a0e88:	d10f      	bne.n	80a0eaa <_ZN7MFRC52210PICC_HaltAEv+0x44>
	// Send the command.
	// The standard says:
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is an success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
 80a0e8a:	9503      	str	r5, [sp, #12]
 80a0e8c:	9502      	str	r5, [sp, #8]
 80a0e8e:	9501      	str	r5, [sp, #4]
 80a0e90:	9500      	str	r5, [sp, #0]
 80a0e92:	462b      	mov	r3, r5
 80a0e94:	2204      	movs	r2, #4
 80a0e96:	a905      	add	r1, sp, #20
 80a0e98:	4630      	mov	r0, r6
 80a0e9a:	f7ff fe4c 	bl	80a0b36 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
 80a0e9e:	2804      	cmp	r0, #4
 80a0ea0:	d003      	beq.n	80a0eaa <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_OK;
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
 80a0ea2:	2801      	cmp	r0, #1
 80a0ea4:	bf08      	it	eq
 80a0ea6:	2002      	moveq	r0, #2
 80a0ea8:	e000      	b.n	80a0eac <_ZN7MFRC52210PICC_HaltAEv+0x46>
	//		If the PICC responds with any modulation during a period of 1 ms after the end of the frame containing the
	//		HLTA command, this response shall be interpreted as 'not acknowledge'.
	// We interpret that this way: Only STATUS_TIMEOUT is an success.
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
	if (result == STATUS_TIMEOUT) {
		return STATUS_OK;
 80a0eaa:	4620      	mov	r0, r4
	}
	if (result == STATUS_OK) { // That is ironically NOT ok in this case ;-)
		return STATUS_ERROR;
	}
	return result;
} // End PICC_HaltA()
 80a0eac:	b006      	add	sp, #24
 80a0eae:	bd70      	pop	{r4, r5, r6, pc}

080a0eb0 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
 80a0eb0:	b508      	push	{r3, lr}
	byte result = PICC_Select(&uid);
 80a0eb2:	2200      	movs	r2, #0
 80a0eb4:	4601      	mov	r1, r0
 80a0eb6:	f7ff fe87 	bl	80a0bc8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
 80a0eba:	1e43      	subs	r3, r0, #1
 80a0ebc:	4258      	negs	r0, r3
 80a0ebe:	4158      	adcs	r0, r3
 80a0ec0:	bd08      	pop	{r3, pc}

080a0ec2 <_GLOBAL__sub_I__ZN7MFRC522C2Ehh>:
 80a0ec2:	f000 b84f 	b.w	80a0f64 <HAL_Pin_Map>

080a0ec6 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals13IndentedPrint5writeEh>:
 80a0ec6:	f000 b84d 	b.w	80a0f64 <HAL_Pin_Map>
	...

080a0ecc <_GLOBAL__sub_I__ZN11ArduinoJson9JsonArray8_invalidE>:

    writer.writeComma();
  }

  writer.endArray();
}
 80a0ecc:	b508      	push	{r3, lr}
 80a0ece:	f000 f849 	bl	80a0f64 <HAL_Pin_Map>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
 80a0ed2:	4b02      	ldr	r3, [pc, #8]	; (80a0edc <_GLOBAL__sub_I__ZN11ArduinoJson9JsonArray8_invalidE+0x10>)
 80a0ed4:	2200      	movs	r2, #0
 80a0ed6:	601a      	str	r2, [r3, #0]
 80a0ed8:	605a      	str	r2, [r3, #4]
 80a0eda:	bd08      	pop	{r3, pc}
 80a0edc:	20000830 	.word	0x20000830

080a0ee0 <_GLOBAL__sub_I__ZN11ArduinoJson10JsonBuffer11createArrayEv>:
 80a0ee0:	f000 b840 	b.w	80a0f64 <HAL_Pin_Map>

080a0ee4 <_GLOBAL__sub_I__ZN11ArduinoJson10JsonObject8_invalidE>:

    writer.writeComma();
  }

  writer.endObject();
}
 80a0ee4:	b508      	push	{r3, lr}
 80a0ee6:	f000 f83d 	bl	80a0f64 <HAL_Pin_Map>
 80a0eea:	4b02      	ldr	r3, [pc, #8]	; (80a0ef4 <_GLOBAL__sub_I__ZN11ArduinoJson10JsonObject8_invalidE+0x10>)
 80a0eec:	2200      	movs	r2, #0
 80a0eee:	601a      	str	r2, [r3, #0]
 80a0ef0:	605a      	str	r2, [r3, #4]
 80a0ef2:	bd08      	pop	{r3, pc}
 80a0ef4:	20000838 	.word	0x20000838

080a0ef8 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals10JsonParser10skipSpacesEv>:
 80a0ef8:	f000 b834 	b.w	80a0f64 <HAL_Pin_Map>

080a0efc <_GLOBAL__sub_I__ZN11ArduinoJson11JsonVariant8_invalidE>:
    writer.writeBoolean(as<bool>());
  else if (is<double>()) {
    uint8_t decimals = static_cast<uint8_t>(_type - JSON_DOUBLE_0_DECIMALS);
    writer.writeDouble(as<double>(), decimals);
  }
}
 80a0efc:	b508      	push	{r3, lr}
 80a0efe:	f000 f831 	bl	80a0f64 <HAL_Pin_Map>
  // Return JsonVariant::invalid() if the variant is not an object.
  JsonVariant &operator[](const char *key);

 private:
  // Special constructor used only to create _invalid.
  explicit JsonVariant(Internals::JsonVariantType type) : _type(type) {}
 80a0f02:	4b02      	ldr	r3, [pc, #8]	; (80a0f0c <_GLOBAL__sub_I__ZN11ArduinoJson11JsonVariant8_invalidE+0x10>)
 80a0f04:	2200      	movs	r2, #0
 80a0f06:	701a      	strb	r2, [r3, #0]
 80a0f08:	bd08      	pop	{r3, pc}
 80a0f0a:	bf00      	nop
 80a0f0c:	20000840 	.word	0x20000840

080a0f10 <_GLOBAL__sub_I_List.cpp>:
 80a0f10:	f000 b828 	b.w	80a0f64 <HAL_Pin_Map>

080a0f14 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals10Prettyfier5writeEh>:
 80a0f14:	f000 b826 	b.w	80a0f64 <HAL_Pin_Map>

080a0f18 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals12QuotedString7printToEPKcR5Print>:
 80a0f18:	f000 b824 	b.w	80a0f64 <HAL_Pin_Map>

080a0f1c <_GLOBAL__sub_I_SparkJson.cpp>:
 80a0f1c:	f000 b822 	b.w	80a0f64 <HAL_Pin_Map>

080a0f20 <_GLOBAL__sub_I__ZN11ArduinoJson9Internals13StringBuilder5writeEh>:
 80a0f20:	f000 b820 	b.w	80a0f64 <HAL_Pin_Map>

080a0f24 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0f24:	b508      	push	{r3, lr}
 80a0f26:	4b02      	ldr	r3, [pc, #8]	; (80a0f30 <os_mutex_create+0xc>)
 80a0f28:	681b      	ldr	r3, [r3, #0]
 80a0f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0f2c:	9301      	str	r3, [sp, #4]
 80a0f2e:	bd08      	pop	{r3, pc}
 80a0f30:	080601d0 	.word	0x080601d0

080a0f34 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a0f34:	b508      	push	{r3, lr}
 80a0f36:	4b02      	ldr	r3, [pc, #8]	; (80a0f40 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a0f38:	681b      	ldr	r3, [r3, #0]
 80a0f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0f3c:	9301      	str	r3, [sp, #4]
 80a0f3e:	bd08      	pop	{r3, pc}
 80a0f40:	080601b8 	.word	0x080601b8

080a0f44 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0f44:	b508      	push	{r3, lr}
 80a0f46:	4b02      	ldr	r3, [pc, #8]	; (80a0f50 <HAL_RNG_GetRandomNumber+0xc>)
 80a0f48:	681b      	ldr	r3, [r3, #0]
 80a0f4a:	685b      	ldr	r3, [r3, #4]
 80a0f4c:	9301      	str	r3, [sp, #4]
 80a0f4e:	bd08      	pop	{r3, pc}
 80a0f50:	0806019c 	.word	0x0806019c

080a0f54 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0f54:	b508      	push	{r3, lr}
 80a0f56:	4b02      	ldr	r3, [pc, #8]	; (80a0f60 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0f58:	681b      	ldr	r3, [r3, #0]
 80a0f5a:	695b      	ldr	r3, [r3, #20]
 80a0f5c:	9301      	str	r3, [sp, #4]
 80a0f5e:	bd08      	pop	{r3, pc}
 80a0f60:	0806019c 	.word	0x0806019c

080a0f64 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0f64:	b508      	push	{r3, lr}
 80a0f66:	4b02      	ldr	r3, [pc, #8]	; (80a0f70 <HAL_Pin_Map+0xc>)
 80a0f68:	681b      	ldr	r3, [r3, #0]
 80a0f6a:	681b      	ldr	r3, [r3, #0]
 80a0f6c:	9301      	str	r3, [sp, #4]
 80a0f6e:	bd08      	pop	{r3, pc}
 80a0f70:	080601b0 	.word	0x080601b0

080a0f74 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0f74:	b508      	push	{r3, lr}
 80a0f76:	4b02      	ldr	r3, [pc, #8]	; (80a0f80 <HAL_Pin_Mode+0xc>)
 80a0f78:	681b      	ldr	r3, [r3, #0]
 80a0f7a:	689b      	ldr	r3, [r3, #8]
 80a0f7c:	9301      	str	r3, [sp, #4]
 80a0f7e:	bd08      	pop	{r3, pc}
 80a0f80:	080601b0 	.word	0x080601b0

080a0f84 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0f84:	b508      	push	{r3, lr}
 80a0f86:	4b02      	ldr	r3, [pc, #8]	; (80a0f90 <HAL_Get_Pin_Mode+0xc>)
 80a0f88:	681b      	ldr	r3, [r3, #0]
 80a0f8a:	68db      	ldr	r3, [r3, #12]
 80a0f8c:	9301      	str	r3, [sp, #4]
 80a0f8e:	bd08      	pop	{r3, pc}
 80a0f90:	080601b0 	.word	0x080601b0

080a0f94 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0f94:	b508      	push	{r3, lr}
 80a0f96:	4b02      	ldr	r3, [pc, #8]	; (80a0fa0 <HAL_GPIO_Write+0xc>)
 80a0f98:	681b      	ldr	r3, [r3, #0]
 80a0f9a:	691b      	ldr	r3, [r3, #16]
 80a0f9c:	9301      	str	r3, [sp, #4]
 80a0f9e:	bd08      	pop	{r3, pc}
 80a0fa0:	080601b0 	.word	0x080601b0

080a0fa4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0fa4:	b508      	push	{r3, lr}
 80a0fa6:	4b02      	ldr	r3, [pc, #8]	; (80a0fb0 <HAL_GPIO_Read+0xc>)
 80a0fa8:	681b      	ldr	r3, [r3, #0]
 80a0faa:	695b      	ldr	r3, [r3, #20]
 80a0fac:	9301      	str	r3, [sp, #4]
 80a0fae:	bd08      	pop	{r3, pc}
 80a0fb0:	080601b0 	.word	0x080601b0

080a0fb4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0fb4:	b508      	push	{r3, lr}
 80a0fb6:	4b02      	ldr	r3, [pc, #8]	; (80a0fc0 <HAL_I2C_Write_Data+0xc>)
 80a0fb8:	681b      	ldr	r3, [r3, #0]
 80a0fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0fbc:	9301      	str	r3, [sp, #4]
 80a0fbe:	bd08      	pop	{r3, pc}
 80a0fc0:	080601ac 	.word	0x080601ac

080a0fc4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0fc4:	b508      	push	{r3, lr}
 80a0fc6:	4b02      	ldr	r3, [pc, #8]	; (80a0fd0 <HAL_I2C_Available_Data+0xc>)
 80a0fc8:	681b      	ldr	r3, [r3, #0]
 80a0fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0fcc:	9301      	str	r3, [sp, #4]
 80a0fce:	bd08      	pop	{r3, pc}
 80a0fd0:	080601ac 	.word	0x080601ac

080a0fd4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0fd4:	b508      	push	{r3, lr}
 80a0fd6:	4b02      	ldr	r3, [pc, #8]	; (80a0fe0 <HAL_I2C_Read_Data+0xc>)
 80a0fd8:	681b      	ldr	r3, [r3, #0]
 80a0fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0fdc:	9301      	str	r3, [sp, #4]
 80a0fde:	bd08      	pop	{r3, pc}
 80a0fe0:	080601ac 	.word	0x080601ac

080a0fe4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0fe4:	b508      	push	{r3, lr}
 80a0fe6:	4b02      	ldr	r3, [pc, #8]	; (80a0ff0 <HAL_I2C_Peek_Data+0xc>)
 80a0fe8:	681b      	ldr	r3, [r3, #0]
 80a0fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0fec:	9301      	str	r3, [sp, #4]
 80a0fee:	bd08      	pop	{r3, pc}
 80a0ff0:	080601ac 	.word	0x080601ac

080a0ff4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0ff4:	b508      	push	{r3, lr}
 80a0ff6:	4b02      	ldr	r3, [pc, #8]	; (80a1000 <HAL_I2C_Flush_Data+0xc>)
 80a0ff8:	681b      	ldr	r3, [r3, #0]
 80a0ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0ffc:	9301      	str	r3, [sp, #4]
 80a0ffe:	bd08      	pop	{r3, pc}
 80a1000:	080601ac 	.word	0x080601ac

080a1004 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1004:	b508      	push	{r3, lr}
 80a1006:	4b02      	ldr	r3, [pc, #8]	; (80a1010 <HAL_I2C_Is_Enabled+0xc>)
 80a1008:	681b      	ldr	r3, [r3, #0]
 80a100a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a100c:	9301      	str	r3, [sp, #4]
 80a100e:	bd08      	pop	{r3, pc}
 80a1010:	080601ac 	.word	0x080601ac

080a1014 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1014:	b508      	push	{r3, lr}
 80a1016:	4b03      	ldr	r3, [pc, #12]	; (80a1024 <HAL_I2C_Init+0x10>)
 80a1018:	681b      	ldr	r3, [r3, #0]
 80a101a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a101e:	9301      	str	r3, [sp, #4]
 80a1020:	bd08      	pop	{r3, pc}
 80a1022:	0000      	.short	0x0000
 80a1024:	080601ac 	.word	0x080601ac

080a1028 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a1028:	b508      	push	{r3, lr}
 80a102a:	4b02      	ldr	r3, [pc, #8]	; (80a1034 <socket_active_status+0xc>)
 80a102c:	681b      	ldr	r3, [r3, #0]
 80a102e:	681b      	ldr	r3, [r3, #0]
 80a1030:	9301      	str	r3, [sp, #4]
 80a1032:	bd08      	pop	{r3, pc}
 80a1034:	080601bc 	.word	0x080601bc

080a1038 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1038:	b508      	push	{r3, lr}
 80a103a:	4b02      	ldr	r3, [pc, #8]	; (80a1044 <socket_handle_valid+0xc>)
 80a103c:	681b      	ldr	r3, [r3, #0]
 80a103e:	685b      	ldr	r3, [r3, #4]
 80a1040:	9301      	str	r3, [sp, #4]
 80a1042:	bd08      	pop	{r3, pc}
 80a1044:	080601bc 	.word	0x080601bc

080a1048 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1048:	b508      	push	{r3, lr}
 80a104a:	4b02      	ldr	r3, [pc, #8]	; (80a1054 <socket_create+0xc>)
 80a104c:	681b      	ldr	r3, [r3, #0]
 80a104e:	689b      	ldr	r3, [r3, #8]
 80a1050:	9301      	str	r3, [sp, #4]
 80a1052:	bd08      	pop	{r3, pc}
 80a1054:	080601bc 	.word	0x080601bc

080a1058 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a1058:	b508      	push	{r3, lr}
 80a105a:	4b02      	ldr	r3, [pc, #8]	; (80a1064 <socket_connect+0xc>)
 80a105c:	681b      	ldr	r3, [r3, #0]
 80a105e:	68db      	ldr	r3, [r3, #12]
 80a1060:	9301      	str	r3, [sp, #4]
 80a1062:	bd08      	pop	{r3, pc}
 80a1064:	080601bc 	.word	0x080601bc

080a1068 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a1068:	b508      	push	{r3, lr}
 80a106a:	4b02      	ldr	r3, [pc, #8]	; (80a1074 <socket_receive+0xc>)
 80a106c:	681b      	ldr	r3, [r3, #0]
 80a106e:	691b      	ldr	r3, [r3, #16]
 80a1070:	9301      	str	r3, [sp, #4]
 80a1072:	bd08      	pop	{r3, pc}
 80a1074:	080601bc 	.word	0x080601bc

080a1078 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1078:	b508      	push	{r3, lr}
 80a107a:	4b02      	ldr	r3, [pc, #8]	; (80a1084 <socket_close+0xc>)
 80a107c:	681b      	ldr	r3, [r3, #0]
 80a107e:	6a1b      	ldr	r3, [r3, #32]
 80a1080:	9301      	str	r3, [sp, #4]
 80a1082:	bd08      	pop	{r3, pc}
 80a1084:	080601bc 	.word	0x080601bc

080a1088 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1088:	b508      	push	{r3, lr}
 80a108a:	4b02      	ldr	r3, [pc, #8]	; (80a1094 <socket_handle_invalid+0xc>)
 80a108c:	681b      	ldr	r3, [r3, #0]
 80a108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1090:	9301      	str	r3, [sp, #4]
 80a1092:	bd08      	pop	{r3, pc}
 80a1094:	080601bc 	.word	0x080601bc

080a1098 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a1098:	b508      	push	{r3, lr}
 80a109a:	4b02      	ldr	r3, [pc, #8]	; (80a10a4 <socket_send_ex+0xc>)
 80a109c:	681b      	ldr	r3, [r3, #0]
 80a109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a10a0:	9301      	str	r3, [sp, #4]
 80a10a2:	bd08      	pop	{r3, pc}
 80a10a4:	080601bc 	.word	0x080601bc

080a10a8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a10a8:	b508      	push	{r3, lr}
 80a10aa:	4b02      	ldr	r3, [pc, #8]	; (80a10b4 <HAL_SPI_Begin+0xc>)
 80a10ac:	681b      	ldr	r3, [r3, #0]
 80a10ae:	681b      	ldr	r3, [r3, #0]
 80a10b0:	9301      	str	r3, [sp, #4]
 80a10b2:	bd08      	pop	{r3, pc}
 80a10b4:	080601b4 	.word	0x080601b4

080a10b8 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a10b8:	b508      	push	{r3, lr}
 80a10ba:	4b02      	ldr	r3, [pc, #8]	; (80a10c4 <HAL_SPI_Set_Bit_Order+0xc>)
 80a10bc:	681b      	ldr	r3, [r3, #0]
 80a10be:	689b      	ldr	r3, [r3, #8]
 80a10c0:	9301      	str	r3, [sp, #4]
 80a10c2:	bd08      	pop	{r3, pc}
 80a10c4:	080601b4 	.word	0x080601b4

080a10c8 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a10c8:	b508      	push	{r3, lr}
 80a10ca:	4b02      	ldr	r3, [pc, #8]	; (80a10d4 <HAL_SPI_Set_Data_Mode+0xc>)
 80a10cc:	681b      	ldr	r3, [r3, #0]
 80a10ce:	68db      	ldr	r3, [r3, #12]
 80a10d0:	9301      	str	r3, [sp, #4]
 80a10d2:	bd08      	pop	{r3, pc}
 80a10d4:	080601b4 	.word	0x080601b4

080a10d8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a10d8:	b508      	push	{r3, lr}
 80a10da:	4b02      	ldr	r3, [pc, #8]	; (80a10e4 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a10dc:	681b      	ldr	r3, [r3, #0]
 80a10de:	691b      	ldr	r3, [r3, #16]
 80a10e0:	9301      	str	r3, [sp, #4]
 80a10e2:	bd08      	pop	{r3, pc}
 80a10e4:	080601b4 	.word	0x080601b4

080a10e8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a10e8:	b508      	push	{r3, lr}
 80a10ea:	4b02      	ldr	r3, [pc, #8]	; (80a10f4 <HAL_SPI_Send_Receive_Data+0xc>)
 80a10ec:	681b      	ldr	r3, [r3, #0]
 80a10ee:	695b      	ldr	r3, [r3, #20]
 80a10f0:	9301      	str	r3, [sp, #4]
 80a10f2:	bd08      	pop	{r3, pc}
 80a10f4:	080601b4 	.word	0x080601b4

080a10f8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a10f8:	b508      	push	{r3, lr}
 80a10fa:	4b02      	ldr	r3, [pc, #8]	; (80a1104 <HAL_SPI_Init+0xc>)
 80a10fc:	681b      	ldr	r3, [r3, #0]
 80a10fe:	69db      	ldr	r3, [r3, #28]
 80a1100:	9301      	str	r3, [sp, #4]
 80a1102:	bd08      	pop	{r3, pc}
 80a1104:	080601b4 	.word	0x080601b4

080a1108 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1108:	b508      	push	{r3, lr}
 80a110a:	4b02      	ldr	r3, [pc, #8]	; (80a1114 <HAL_SPI_Is_Enabled+0xc>)
 80a110c:	681b      	ldr	r3, [r3, #0]
 80a110e:	6a1b      	ldr	r3, [r3, #32]
 80a1110:	9301      	str	r3, [sp, #4]
 80a1112:	bd08      	pop	{r3, pc}
 80a1114:	080601b4 	.word	0x080601b4

080a1118 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1118:	b508      	push	{r3, lr}
 80a111a:	4b02      	ldr	r3, [pc, #8]	; (80a1124 <HAL_SPI_Info+0xc>)
 80a111c:	681b      	ldr	r3, [r3, #0]
 80a111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1120:	9301      	str	r3, [sp, #4]
 80a1122:	bd08      	pop	{r3, pc}
 80a1124:	080601b4 	.word	0x080601b4

080a1128 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1128:	b508      	push	{r3, lr}
 80a112a:	4b02      	ldr	r3, [pc, #8]	; (80a1134 <HAL_USART_Init+0xc>)
 80a112c:	681b      	ldr	r3, [r3, #0]
 80a112e:	699b      	ldr	r3, [r3, #24]
 80a1130:	9301      	str	r3, [sp, #4]
 80a1132:	bd08      	pop	{r3, pc}
 80a1134:	080601c4 	.word	0x080601c4

080a1138 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1138:	b508      	push	{r3, lr}
 80a113a:	4b02      	ldr	r3, [pc, #8]	; (80a1144 <HAL_USART_Write_Data+0xc>)
 80a113c:	681b      	ldr	r3, [r3, #0]
 80a113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1140:	9301      	str	r3, [sp, #4]
 80a1142:	bd08      	pop	{r3, pc}
 80a1144:	080601c4 	.word	0x080601c4

080a1148 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1148:	b508      	push	{r3, lr}
 80a114a:	4b02      	ldr	r3, [pc, #8]	; (80a1154 <HAL_USART_Available_Data+0xc>)
 80a114c:	681b      	ldr	r3, [r3, #0]
 80a114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1150:	9301      	str	r3, [sp, #4]
 80a1152:	bd08      	pop	{r3, pc}
 80a1154:	080601c4 	.word	0x080601c4

080a1158 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1158:	b508      	push	{r3, lr}
 80a115a:	4b02      	ldr	r3, [pc, #8]	; (80a1164 <HAL_USART_Read_Data+0xc>)
 80a115c:	681b      	ldr	r3, [r3, #0]
 80a115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1160:	9301      	str	r3, [sp, #4]
 80a1162:	bd08      	pop	{r3, pc}
 80a1164:	080601c4 	.word	0x080601c4

080a1168 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1168:	b508      	push	{r3, lr}
 80a116a:	4b02      	ldr	r3, [pc, #8]	; (80a1174 <HAL_USART_Peek_Data+0xc>)
 80a116c:	681b      	ldr	r3, [r3, #0]
 80a116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1170:	9301      	str	r3, [sp, #4]
 80a1172:	bd08      	pop	{r3, pc}
 80a1174:	080601c4 	.word	0x080601c4

080a1178 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1178:	b508      	push	{r3, lr}
 80a117a:	4b02      	ldr	r3, [pc, #8]	; (80a1184 <HAL_USART_Flush_Data+0xc>)
 80a117c:	681b      	ldr	r3, [r3, #0]
 80a117e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1180:	9301      	str	r3, [sp, #4]
 80a1182:	bd08      	pop	{r3, pc}
 80a1184:	080601c4 	.word	0x080601c4

080a1188 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1188:	b508      	push	{r3, lr}
 80a118a:	4b02      	ldr	r3, [pc, #8]	; (80a1194 <HAL_USART_Is_Enabled+0xc>)
 80a118c:	681b      	ldr	r3, [r3, #0]
 80a118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1190:	9301      	str	r3, [sp, #4]
 80a1192:	bd08      	pop	{r3, pc}
 80a1194:	080601c4 	.word	0x080601c4

080a1198 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1198:	b508      	push	{r3, lr}
 80a119a:	4b02      	ldr	r3, [pc, #8]	; (80a11a4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a119c:	681b      	ldr	r3, [r3, #0]
 80a119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a11a0:	9301      	str	r3, [sp, #4]
 80a11a2:	bd08      	pop	{r3, pc}
 80a11a4:	080601c4 	.word	0x080601c4

080a11a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a11a8:	b508      	push	{r3, lr}
 80a11aa:	4b02      	ldr	r3, [pc, #8]	; (80a11b4 <HAL_USB_USART_Init+0xc>)
 80a11ac:	681b      	ldr	r3, [r3, #0]
 80a11ae:	681b      	ldr	r3, [r3, #0]
 80a11b0:	9301      	str	r3, [sp, #4]
 80a11b2:	bd08      	pop	{r3, pc}
 80a11b4:	080601d8 	.word	0x080601d8

080a11b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a11b8:	b508      	push	{r3, lr}
 80a11ba:	4b02      	ldr	r3, [pc, #8]	; (80a11c4 <HAL_USB_USART_Begin+0xc>)
 80a11bc:	681b      	ldr	r3, [r3, #0]
 80a11be:	685b      	ldr	r3, [r3, #4]
 80a11c0:	9301      	str	r3, [sp, #4]
 80a11c2:	bd08      	pop	{r3, pc}
 80a11c4:	080601d8 	.word	0x080601d8

080a11c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a11c8:	b508      	push	{r3, lr}
 80a11ca:	4b02      	ldr	r3, [pc, #8]	; (80a11d4 <HAL_USB_USART_Available_Data+0xc>)
 80a11cc:	681b      	ldr	r3, [r3, #0]
 80a11ce:	691b      	ldr	r3, [r3, #16]
 80a11d0:	9301      	str	r3, [sp, #4]
 80a11d2:	bd08      	pop	{r3, pc}
 80a11d4:	080601d8 	.word	0x080601d8

080a11d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a11d8:	b508      	push	{r3, lr}
 80a11da:	4b02      	ldr	r3, [pc, #8]	; (80a11e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a11dc:	681b      	ldr	r3, [r3, #0]
 80a11de:	695b      	ldr	r3, [r3, #20]
 80a11e0:	9301      	str	r3, [sp, #4]
 80a11e2:	bd08      	pop	{r3, pc}
 80a11e4:	080601d8 	.word	0x080601d8

080a11e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a11e8:	b508      	push	{r3, lr}
 80a11ea:	4b02      	ldr	r3, [pc, #8]	; (80a11f4 <HAL_USB_USART_Receive_Data+0xc>)
 80a11ec:	681b      	ldr	r3, [r3, #0]
 80a11ee:	699b      	ldr	r3, [r3, #24]
 80a11f0:	9301      	str	r3, [sp, #4]
 80a11f2:	bd08      	pop	{r3, pc}
 80a11f4:	080601d8 	.word	0x080601d8

080a11f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a11f8:	b508      	push	{r3, lr}
 80a11fa:	4b02      	ldr	r3, [pc, #8]	; (80a1204 <HAL_USB_USART_Send_Data+0xc>)
 80a11fc:	681b      	ldr	r3, [r3, #0]
 80a11fe:	69db      	ldr	r3, [r3, #28]
 80a1200:	9301      	str	r3, [sp, #4]
 80a1202:	bd08      	pop	{r3, pc}
 80a1204:	080601d8 	.word	0x080601d8

080a1208 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1208:	b508      	push	{r3, lr}
 80a120a:	4b02      	ldr	r3, [pc, #8]	; (80a1214 <HAL_USB_USART_Flush_Data+0xc>)
 80a120c:	681b      	ldr	r3, [r3, #0]
 80a120e:	6a1b      	ldr	r3, [r3, #32]
 80a1210:	9301      	str	r3, [sp, #4]
 80a1212:	bd08      	pop	{r3, pc}
 80a1214:	080601d8 	.word	0x080601d8

080a1218 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1218:	b508      	push	{r3, lr}
 80a121a:	4b02      	ldr	r3, [pc, #8]	; (80a1224 <HAL_NET_SetNetWatchDog+0xc>)
 80a121c:	681b      	ldr	r3, [r3, #0]
 80a121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1220:	9301      	str	r3, [sp, #4]
 80a1222:	bd08      	pop	{r3, pc}
 80a1224:	080601c0 	.word	0x080601c0

080a1228 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1228:	b508      	push	{r3, lr}
 80a122a:	4b02      	ldr	r3, [pc, #8]	; (80a1234 <inet_gethostbyname+0xc>)
 80a122c:	681b      	ldr	r3, [r3, #0]
 80a122e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1230:	9301      	str	r3, [sp, #4]
 80a1232:	bd08      	pop	{r3, pc}
 80a1234:	080601c0 	.word	0x080601c0

080a1238 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1238:	b508      	push	{r3, lr}
 80a123a:	4b02      	ldr	r3, [pc, #8]	; (80a1244 <log_message+0xc>)
 80a123c:	681b      	ldr	r3, [r3, #0]
 80a123e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1240:	9301      	str	r3, [sp, #4]
 80a1242:	bd08      	pop	{r3, pc}
 80a1244:	080201a8 	.word	0x080201a8

080a1248 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1248:	b508      	push	{r3, lr}
 80a124a:	4b02      	ldr	r3, [pc, #8]	; (80a1254 <set_system_mode+0xc>)
 80a124c:	681b      	ldr	r3, [r3, #0]
 80a124e:	685b      	ldr	r3, [r3, #4]
 80a1250:	9301      	str	r3, [sp, #4]
 80a1252:	bd08      	pop	{r3, pc}
 80a1254:	080601a4 	.word	0x080601a4

080a1258 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1258:	b508      	push	{r3, lr}
 80a125a:	4b02      	ldr	r3, [pc, #8]	; (80a1264 <system_delay_ms+0xc>)
 80a125c:	681b      	ldr	r3, [r3, #0]
 80a125e:	695b      	ldr	r3, [r3, #20]
 80a1260:	9301      	str	r3, [sp, #4]
 80a1262:	bd08      	pop	{r3, pc}
 80a1264:	080601a4 	.word	0x080601a4

080a1268 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1268:	b508      	push	{r3, lr}
 80a126a:	4b03      	ldr	r3, [pc, #12]	; (80a1278 <system_ctrl_set_app_request_handler+0x10>)
 80a126c:	681b      	ldr	r3, [r3, #0]
 80a126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1272:	9301      	str	r3, [sp, #4]
 80a1274:	bd08      	pop	{r3, pc}
 80a1276:	0000      	.short	0x0000
 80a1278:	080601a4 	.word	0x080601a4

080a127c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a127c:	b508      	push	{r3, lr}
 80a127e:	4b03      	ldr	r3, [pc, #12]	; (80a128c <system_ctrl_set_result+0x10>)
 80a1280:	681b      	ldr	r3, [r3, #0]
 80a1282:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1286:	9301      	str	r3, [sp, #4]
 80a1288:	bd08      	pop	{r3, pc}
 80a128a:	0000      	.short	0x0000
 80a128c:	080601a4 	.word	0x080601a4

080a1290 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a1290:	b508      	push	{r3, lr}
 80a1292:	4b02      	ldr	r3, [pc, #8]	; (80a129c <spark_deviceID+0xc>)
 80a1294:	681b      	ldr	r3, [r3, #0]
 80a1296:	69db      	ldr	r3, [r3, #28]
 80a1298:	9301      	str	r3, [sp, #4]
 80a129a:	bd08      	pop	{r3, pc}
 80a129c:	080601cc 	.word	0x080601cc

080a12a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a12a0:	b508      	push	{r3, lr}
 80a12a2:	4b02      	ldr	r3, [pc, #8]	; (80a12ac <spark_set_random_seed_from_cloud_handler+0xc>)
 80a12a4:	681b      	ldr	r3, [r3, #0]
 80a12a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a12a8:	9301      	str	r3, [sp, #4]
 80a12aa:	bd08      	pop	{r3, pc}
 80a12ac:	080601cc 	.word	0x080601cc

080a12b0 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a12b0:	b508      	push	{r3, lr}
 80a12b2:	4b02      	ldr	r3, [pc, #8]	; (80a12bc <network_ready+0xc>)
 80a12b4:	681b      	ldr	r3, [r3, #0]
 80a12b6:	691b      	ldr	r3, [r3, #16]
 80a12b8:	9301      	str	r3, [sp, #4]
 80a12ba:	bd08      	pop	{r3, pc}
 80a12bc:	080601c8 	.word	0x080601c8

080a12c0 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a12c0:	b508      	push	{r3, lr}
 80a12c2:	4b02      	ldr	r3, [pc, #8]	; (80a12cc <malloc+0xc>)
 80a12c4:	681b      	ldr	r3, [r3, #0]
 80a12c6:	681b      	ldr	r3, [r3, #0]
 80a12c8:	9301      	str	r3, [sp, #4]
 80a12ca:	bd08      	pop	{r3, pc}
 80a12cc:	080601a0 	.word	0x080601a0

080a12d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a12d0:	b508      	push	{r3, lr}
 80a12d2:	4b02      	ldr	r3, [pc, #8]	; (80a12dc <free+0xc>)
 80a12d4:	681b      	ldr	r3, [r3, #0]
 80a12d6:	685b      	ldr	r3, [r3, #4]
 80a12d8:	9301      	str	r3, [sp, #4]
 80a12da:	bd08      	pop	{r3, pc}
 80a12dc:	080601a0 	.word	0x080601a0

080a12e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a12e0:	b508      	push	{r3, lr}
 80a12e2:	4b02      	ldr	r3, [pc, #8]	; (80a12ec <realloc+0xc>)
 80a12e4:	681b      	ldr	r3, [r3, #0]
 80a12e6:	689b      	ldr	r3, [r3, #8]
 80a12e8:	9301      	str	r3, [sp, #4]
 80a12ea:	bd08      	pop	{r3, pc}
 80a12ec:	080601a0 	.word	0x080601a0

080a12f0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a12f0:	b508      	push	{r3, lr}
 80a12f2:	4b02      	ldr	r3, [pc, #8]	; (80a12fc <sprintf+0xc>)
 80a12f4:	681b      	ldr	r3, [r3, #0]
 80a12f6:	68db      	ldr	r3, [r3, #12]
 80a12f8:	9301      	str	r3, [sp, #4]
 80a12fa:	bd08      	pop	{r3, pc}
 80a12fc:	080601a0 	.word	0x080601a0

080a1300 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1300:	2100      	movs	r1, #0
 80a1302:	f7ff bfa9 	b.w	80a1258 <system_delay_ms>

080a1306 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1306:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1308:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a130a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a130c:	b113      	cbz	r3, 80a1314 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a130e:	2203      	movs	r2, #3
 80a1310:	4601      	mov	r1, r0
 80a1312:	4798      	blx	r3
    }
 80a1314:	4620      	mov	r0, r4
 80a1316:	bd10      	pop	{r4, pc}

080a1318 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1318:	4770      	bx	lr

080a131a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a131a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a131c:	4606      	mov	r6, r0
 80a131e:	4615      	mov	r5, r2
 80a1320:	460c      	mov	r4, r1
 80a1322:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1324:	42bc      	cmp	r4, r7
 80a1326:	d006      	beq.n	80a1336 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1328:	6833      	ldr	r3, [r6, #0]
 80a132a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a132e:	689b      	ldr	r3, [r3, #8]
 80a1330:	4630      	mov	r0, r6
 80a1332:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1334:	e7f6      	b.n	80a1324 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1336:	4628      	mov	r0, r5
 80a1338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a133a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a133a:	2200      	movs	r2, #0
 80a133c:	7c00      	ldrb	r0, [r0, #16]
 80a133e:	f7ff be39 	b.w	80a0fb4 <HAL_I2C_Write_Data>

080a1342 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1342:	2100      	movs	r1, #0
 80a1344:	7c00      	ldrb	r0, [r0, #16]
 80a1346:	f7ff be3d 	b.w	80a0fc4 <HAL_I2C_Available_Data>

080a134a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a134a:	2100      	movs	r1, #0
 80a134c:	7c00      	ldrb	r0, [r0, #16]
 80a134e:	f7ff be41 	b.w	80a0fd4 <HAL_I2C_Read_Data>

080a1352 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1352:	2100      	movs	r1, #0
 80a1354:	7c00      	ldrb	r0, [r0, #16]
 80a1356:	f7ff be45 	b.w	80a0fe4 <HAL_I2C_Peek_Data>

080a135a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a135a:	2100      	movs	r1, #0
 80a135c:	7c00      	ldrb	r0, [r0, #16]
 80a135e:	f7ff be49 	b.w	80a0ff4 <HAL_I2C_Flush_Data>

080a1362 <_ZN7TwoWireD0Ev>:
 80a1362:	b510      	push	{r4, lr}
 80a1364:	4604      	mov	r4, r0
 80a1366:	f7fe fe9a 	bl	80a009e <_ZdlPv>
 80a136a:	4620      	mov	r0, r4
 80a136c:	bd10      	pop	{r4, pc}
	...

080a1370 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1370:	b510      	push	{r4, lr}
 80a1372:	4604      	mov	r4, r0
 80a1374:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a137a:	60a3      	str	r3, [r4, #8]
 80a137c:	4b04      	ldr	r3, [pc, #16]	; (80a1390 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a137e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1380:	7420      	strb	r0, [r4, #16]
 80a1382:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1384:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1386:	f7ff fe45 	bl	80a1014 <HAL_I2C_Init>

}
 80a138a:	4620      	mov	r0, r4
 80a138c:	bd10      	pop	{r4, pc}
 80a138e:	bf00      	nop
 80a1390:	080a2a1c 	.word	0x080a2a1c

080a1394 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1394:	2100      	movs	r1, #0
 80a1396:	7c00      	ldrb	r0, [r0, #16]
 80a1398:	f7ff be34 	b.w	80a1004 <HAL_I2C_Is_Enabled>

080a139c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a139c:	4770      	bx	lr

080a139e <_ZN9IPAddressD0Ev>:
 80a139e:	b510      	push	{r4, lr}
 80a13a0:	4604      	mov	r4, r0
 80a13a2:	f7fe fe7c 	bl	80a009e <_ZdlPv>
 80a13a6:	4620      	mov	r0, r4
 80a13a8:	bd10      	pop	{r4, pc}

080a13aa <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a13aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a13ac:	460f      	mov	r7, r1
 80a13ae:	f100 0608 	add.w	r6, r0, #8
 80a13b2:	1d05      	adds	r5, r0, #4
 80a13b4:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a13b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a13ba:	220a      	movs	r2, #10
 80a13bc:	4638      	mov	r0, r7
 80a13be:	f000 f8aa 	bl	80a1516 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a13c2:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a13c4:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a13c6:	d007      	beq.n	80a13d8 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a13c8:	2c00      	cmp	r4, #0
 80a13ca:	d0f4      	beq.n	80a13b6 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a13cc:	212e      	movs	r1, #46	; 0x2e
 80a13ce:	4638      	mov	r0, r7
 80a13d0:	f000 f85e 	bl	80a1490 <_ZN5Print5printEc>
 80a13d4:	4404      	add	r4, r0
 80a13d6:	e7ee      	b.n	80a13b6 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a13d8:	4620      	mov	r0, r4
 80a13da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a13dc <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80a13dc:	b510      	push	{r4, lr}
 80a13de:	4604      	mov	r4, r0
 80a13e0:	4b04      	ldr	r3, [pc, #16]	; (80a13f4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a13e2:	2211      	movs	r2, #17
 80a13e4:	f840 3b04 	str.w	r3, [r0], #4
 80a13e8:	2100      	movs	r1, #0
 80a13ea:	f001 f974 	bl	80a26d6 <memset>
{
    clear();
}
 80a13ee:	4620      	mov	r0, r4
 80a13f0:	bd10      	pop	{r4, pc}
 80a13f2:	bf00      	nop
 80a13f4:	080a2a44 	.word	0x080a2a44

080a13f8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a13f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a13fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a13fe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1402:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1406:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a140a:	2304      	movs	r3, #4
 80a140c:	6041      	str	r1, [r0, #4]
 80a140e:	7503      	strb	r3, [r0, #20]
 80a1410:	bd10      	pop	{r4, pc}
	...

080a1414 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1416:	4d04      	ldr	r5, [pc, #16]	; (80a1428 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1418:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a141a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a141e:	9500      	str	r5, [sp, #0]
 80a1420:	f7ff ffea 	bl	80a13f8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1424:	b003      	add	sp, #12
 80a1426:	bd30      	pop	{r4, r5, pc}
 80a1428:	080a2a44 	.word	0x080a2a44

080a142c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a142c:	4a01      	ldr	r2, [pc, #4]	; (80a1434 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a142e:	4b02      	ldr	r3, [pc, #8]	; (80a1438 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1430:	601a      	str	r2, [r3, #0]
 80a1432:	4770      	bx	lr
 80a1434:	080a2b08 	.word	0x080a2b08
 80a1438:	20000850 	.word	0x20000850

080a143c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a143e:	4606      	mov	r6, r0
 80a1440:	460d      	mov	r5, r1
 80a1442:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1444:	2400      	movs	r4, #0
  while (size--) {
 80a1446:	42bd      	cmp	r5, r7
 80a1448:	d00c      	beq.n	80a1464 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a144a:	6833      	ldr	r3, [r6, #0]
 80a144c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1450:	689b      	ldr	r3, [r3, #8]
 80a1452:	4630      	mov	r0, r6
 80a1454:	4798      	blx	r3
     if (chunk>=0)
 80a1456:	2800      	cmp	r0, #0
 80a1458:	db01      	blt.n	80a145e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a145a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a145c:	e7f3      	b.n	80a1446 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a145e:	2c00      	cmp	r4, #0
 80a1460:	bf08      	it	eq
 80a1462:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1464:	4620      	mov	r0, r4
 80a1466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1468 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1468:	b570      	push	{r4, r5, r6, lr}
 80a146a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a146c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a146e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1470:	b149      	cbz	r1, 80a1486 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1472:	f001 f973 	bl	80a275c <strlen>
 80a1476:	682b      	ldr	r3, [r5, #0]
 80a1478:	4602      	mov	r2, r0
 80a147a:	4621      	mov	r1, r4
 80a147c:	4628      	mov	r0, r5
    }
 80a147e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1482:	68db      	ldr	r3, [r3, #12]
 80a1484:	4718      	bx	r3
    }
 80a1486:	bd70      	pop	{r4, r5, r6, pc}

080a1488 <_ZN5Print5printEPKc>:
 80a1488:	b508      	push	{r3, lr}
 80a148a:	f7ff ffed 	bl	80a1468 <_ZN5Print5writeEPKc>
 80a148e:	bd08      	pop	{r3, pc}

080a1490 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1490:	6803      	ldr	r3, [r0, #0]
 80a1492:	689b      	ldr	r3, [r3, #8]
 80a1494:	4718      	bx	r3

080a1496 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1496:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1498:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a149a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a149c:	f7ff fff8 	bl	80a1490 <_ZN5Print5printEc>
  n += print('\n');
 80a14a0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a14a2:	4604      	mov	r4, r0
  n += print('\n');
 80a14a4:	4628      	mov	r0, r5
 80a14a6:	f7ff fff3 	bl	80a1490 <_ZN5Print5printEc>
  return n;
}
 80a14aa:	4420      	add	r0, r4
 80a14ac:	bd38      	pop	{r3, r4, r5, pc}

080a14ae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a14ae:	b538      	push	{r3, r4, r5, lr}
 80a14b0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a14b2:	f7ff ffd9 	bl	80a1468 <_ZN5Print5writeEPKc>
 80a14b6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a14b8:	4628      	mov	r0, r5
 80a14ba:	f7ff ffec 	bl	80a1496 <_ZN5Print7printlnEv>
  return n;
}
 80a14be:	4420      	add	r0, r4
 80a14c0:	bd38      	pop	{r3, r4, r5, pc}

080a14c2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a14c2:	2a01      	cmp	r2, #1
 80a14c4:	bf98      	it	ls
 80a14c6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a14c8:	b530      	push	{r4, r5, lr}
 80a14ca:	460b      	mov	r3, r1
 80a14cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a14ce:	2100      	movs	r1, #0
 80a14d0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a14d4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a14d8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a14dc:	fb05 3312 	mls	r3, r5, r2, r3
 80a14e0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a14e2:	2b09      	cmp	r3, #9
 80a14e4:	bf94      	ite	ls
 80a14e6:	3330      	addls	r3, #48	; 0x30
 80a14e8:	3337      	addhi	r3, #55	; 0x37
 80a14ea:	b2db      	uxtb	r3, r3
 80a14ec:	4621      	mov	r1, r4
 80a14ee:	f804 3901 	strb.w	r3, [r4], #-1
 80a14f2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a14f4:	2d00      	cmp	r5, #0
 80a14f6:	d1ef      	bne.n	80a14d8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a14f8:	f7ff ffb6 	bl	80a1468 <_ZN5Print5writeEPKc>
}
 80a14fc:	b00b      	add	sp, #44	; 0x2c
 80a14fe:	bd30      	pop	{r4, r5, pc}

080a1500 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1500:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1502:	b922      	cbnz	r2, 80a150e <_ZN5Print5printEmi+0xe>
 80a1504:	6803      	ldr	r3, [r0, #0]
 80a1506:	b2c9      	uxtb	r1, r1
 80a1508:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a150a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a150c:	4718      	bx	r3
  else return printNumber(n, base);
 80a150e:	b2d2      	uxtb	r2, r2
}
 80a1510:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1512:	f7ff bfd6 	b.w	80a14c2 <_ZN5Print11printNumberEmh>

080a1516 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1516:	f7ff bff3 	b.w	80a1500 <_ZN5Print5printEmi>

080a151a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a151e:	4607      	mov	r7, r0
 80a1520:	460e      	mov	r6, r1
  if (base == 0) {
 80a1522:	4615      	mov	r5, r2
 80a1524:	b92a      	cbnz	r2, 80a1532 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a152a:	6803      	ldr	r3, [r0, #0]
 80a152c:	b2c9      	uxtb	r1, r1
 80a152e:	689b      	ldr	r3, [r3, #8]
 80a1530:	4718      	bx	r3
  } else if (base == 10) {
 80a1532:	2a0a      	cmp	r2, #10
 80a1534:	d102      	bne.n	80a153c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1536:	2900      	cmp	r1, #0
 80a1538:	da01      	bge.n	80a153e <_ZN5Print5printEli+0x24>
 80a153a:	e004      	b.n	80a1546 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a153c:	b2d2      	uxtb	r2, r2
  }
}
 80a153e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1542:	f7ff bfbe 	b.w	80a14c2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1546:	212d      	movs	r1, #45	; 0x2d
 80a1548:	f7ff ffa2 	bl	80a1490 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a154c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a154e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1550:	4271      	negs	r1, r6
 80a1552:	4638      	mov	r0, r7
 80a1554:	f7ff ffb5 	bl	80a14c2 <_ZN5Print11printNumberEmh>
 80a1558:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a155a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a155e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a155e:	b538      	push	{r3, r4, r5, lr}
 80a1560:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1562:	f7ff ffda 	bl	80a151a <_ZN5Print5printEli>
 80a1566:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a1568:	4628      	mov	r0, r5
 80a156a:	f7ff ff94 	bl	80a1496 <_ZN5Print7printlnEv>
  return n;
}
 80a156e:	4420      	add	r0, r4
 80a1570:	bd38      	pop	{r3, r4, r5, pc}

080a1572 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1572:	b510      	push	{r4, lr}
 80a1574:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1576:	f7ff fec6 	bl	80a1306 <_ZNSt14_Function_baseD1Ev>
 80a157a:	4620      	mov	r0, r4
 80a157c:	bd10      	pop	{r4, pc}
	...

080a1580 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1580:	4803      	ldr	r0, [pc, #12]	; (80a1590 <_GLOBAL__sub_I_RGB+0x10>)
 80a1582:	2300      	movs	r3, #0
 80a1584:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1586:	4a03      	ldr	r2, [pc, #12]	; (80a1594 <_GLOBAL__sub_I_RGB+0x14>)
 80a1588:	4903      	ldr	r1, [pc, #12]	; (80a1598 <_GLOBAL__sub_I_RGB+0x18>)
 80a158a:	f000 bf39 	b.w	80a2400 <__aeabi_atexit>
 80a158e:	bf00      	nop
 80a1590:	20000854 	.word	0x20000854
 80a1594:	20000390 	.word	0x20000390
 80a1598:	080a1573 	.word	0x080a1573

080a159c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a159c:	4770      	bx	lr

080a159e <_ZN8SPIClassD0Ev>:
 80a159e:	b510      	push	{r4, lr}
 80a15a0:	4604      	mov	r4, r0
 80a15a2:	f7fe fd7c 	bl	80a009e <_ZdlPv>
 80a15a6:	4620      	mov	r0, r4
 80a15a8:	bd10      	pop	{r4, pc}
	...

080a15ac <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a15ac:	b570      	push	{r4, r5, r6, lr}
 80a15ae:	4604      	mov	r4, r0
 80a15b0:	460e      	mov	r6, r1
 80a15b2:	4b07      	ldr	r3, [pc, #28]	; (80a15d0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a15b4:	2500      	movs	r5, #0
 80a15b6:	6003      	str	r3, [r0, #0]
 80a15b8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a15bc:	f7ff fcb2 	bl	80a0f24 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a15c0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a15c2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a15c4:	f7ff fd98 	bl	80a10f8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a15c8:	60a5      	str	r5, [r4, #8]
}
 80a15ca:	4620      	mov	r0, r4
 80a15cc:	bd70      	pop	{r4, r5, r6, pc}
 80a15ce:	bf00      	nop
 80a15d0:	080a2b3c 	.word	0x080a2b3c

080a15d4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a15d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a15d8:	7900      	ldrb	r0, [r0, #4]
 80a15da:	f7ff bd65 	b.w	80a10a8 <HAL_SPI_Begin>

080a15de <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a15de:	7900      	ldrb	r0, [r0, #4]
 80a15e0:	f7ff bd6a 	b.w	80a10b8 <HAL_SPI_Set_Bit_Order>

080a15e4 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a15e4:	7900      	ldrb	r0, [r0, #4]
 80a15e6:	f7ff bd6f 	b.w	80a10c8 <HAL_SPI_Set_Data_Mode>
	...

080a15ec <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a15ec:	4a05      	ldr	r2, [pc, #20]	; (80a1604 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a15ee:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a15f0:	5c99      	ldrb	r1, [r3, r2]
 80a15f2:	4281      	cmp	r1, r0
 80a15f4:	d002      	beq.n	80a15fc <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a15f6:	3301      	adds	r3, #1
 80a15f8:	2b08      	cmp	r3, #8
 80a15fa:	d1f9      	bne.n	80a15f0 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a15fc:	1c58      	adds	r0, r3, #1
}
 80a15fe:	b2c0      	uxtb	r0, r0
 80a1600:	4770      	bx	lr
 80a1602:	bf00      	nop
 80a1604:	080a2b44 	.word	0x080a2b44

080a1608 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1608:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a160a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a160c:	6018      	str	r0, [r3, #0]
 80a160e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a1610:	6818      	ldr	r0, [r3, #0]
 80a1612:	b2e5      	uxtb	r5, r4
 80a1614:	4288      	cmp	r0, r1
 80a1616:	d906      	bls.n	80a1626 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1618:	3401      	adds	r4, #1
 80a161a:	2c08      	cmp	r4, #8
 80a161c:	d002      	beq.n	80a1624 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a161e:	0840      	lsrs	r0, r0, #1
 80a1620:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a1622:	e7f5      	b.n	80a1610 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1624:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a1626:	4b02      	ldr	r3, [pc, #8]	; (80a1630 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1628:	5d5b      	ldrb	r3, [r3, r5]
 80a162a:	7013      	strb	r3, [r2, #0]
 80a162c:	bd30      	pop	{r4, r5, pc}
 80a162e:	bf00      	nop
 80a1630:	080a2b44 	.word	0x080a2b44

080a1634 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1634:	b570      	push	{r4, r5, r6, lr}
 80a1636:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a1638:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a163c:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a163e:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a1640:	2214      	movs	r2, #20
 80a1642:	2100      	movs	r1, #0
 80a1644:	a803      	add	r0, sp, #12
 80a1646:	f001 f846 	bl	80a26d6 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a164a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a164c:	a903      	add	r1, sp, #12
 80a164e:	4630      	mov	r0, r6
 80a1650:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1652:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a1656:	f7ff fd5f 	bl	80a1118 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a165a:	ab02      	add	r3, sp, #8
 80a165c:	f10d 0207 	add.w	r2, sp, #7
 80a1660:	4629      	mov	r1, r5
 80a1662:	9804      	ldr	r0, [sp, #16]
 80a1664:	f7ff ffd0 	bl	80a1608 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1668:	7920      	ldrb	r0, [r4, #4]
 80a166a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a166e:	f7ff fd33 	bl	80a10d8 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a1672:	9802      	ldr	r0, [sp, #8]
 80a1674:	b008      	add	sp, #32
 80a1676:	bd70      	pop	{r4, r5, r6, pc}

080a1678 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a1678:	b538      	push	{r3, r4, r5, lr}
 80a167a:	4604      	mov	r4, r0
    if (dividerReference)
 80a167c:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a167e:	4608      	mov	r0, r1
    if (dividerReference)
 80a1680:	b14d      	cbz	r5, 80a1696 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a1682:	f7ff ffb3 	bl	80a15ec <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1686:	2201      	movs	r2, #1
 80a1688:	fa25 f100 	lsr.w	r1, r5, r0
 80a168c:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a168e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1692:	f7ff bfcf 	b.w	80a1634 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1696:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a1698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a169c:	f7ff bd1c 	b.w	80a10d8 <HAL_SPI_Set_Clock_Divider>

080a16a0 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a16a0:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a16a2:	7900      	ldrb	r0, [r0, #4]
 80a16a4:	f7ff fd20 	bl	80a10e8 <HAL_SPI_Send_Receive_Data>
}
 80a16a8:	b2c0      	uxtb	r0, r0
 80a16aa:	bd08      	pop	{r3, pc}

080a16ac <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a16ac:	7900      	ldrb	r0, [r0, #4]
 80a16ae:	f7ff bd2b 	b.w	80a1108 <HAL_SPI_Is_Enabled>

080a16b2 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a16b2:	2300      	movs	r3, #0
 80a16b4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a16b6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a16b8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a16ba:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
 80a16bc:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
 80a16be:	680c      	ldr	r4, [r1, #0]
 80a16c0:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
 80a16c2:	684c      	ldr	r4, [r1, #4]
 80a16c4:	6044      	str	r4, [r0, #4]
	len = rhs.len;
 80a16c6:	688c      	ldr	r4, [r1, #8]
 80a16c8:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
 80a16ca:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
 80a16cc:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
 80a16ce:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
 80a16d0:	bd10      	pop	{r4, pc}

080a16d2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a16d2:	b510      	push	{r4, lr}
 80a16d4:	4604      	mov	r4, r0
{
	free(buffer);
 80a16d6:	6800      	ldr	r0, [r0, #0]
 80a16d8:	f7ff fdfa 	bl	80a12d0 <free>
}
 80a16dc:	4620      	mov	r0, r4
 80a16de:	bd10      	pop	{r4, pc}

080a16e0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a16e0:	b510      	push	{r4, lr}
 80a16e2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a16e4:	6800      	ldr	r0, [r0, #0]
 80a16e6:	b108      	cbz	r0, 80a16ec <_ZN6String10invalidateEv+0xc>
 80a16e8:	f7ff fdf2 	bl	80a12d0 <free>
	buffer = NULL;
 80a16ec:	2300      	movs	r3, #0
 80a16ee:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a16f0:	60a3      	str	r3, [r4, #8]
 80a16f2:	6063      	str	r3, [r4, #4]
 80a16f4:	bd10      	pop	{r4, pc}

080a16f6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a16f6:	b538      	push	{r3, r4, r5, lr}
 80a16f8:	4604      	mov	r4, r0
 80a16fa:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a16fc:	6800      	ldr	r0, [r0, #0]
 80a16fe:	3101      	adds	r1, #1
 80a1700:	f7ff fdee 	bl	80a12e0 <realloc>
	if (newbuffer) {
 80a1704:	b110      	cbz	r0, 80a170c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1706:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a170a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a170c:	bd38      	pop	{r3, r4, r5, pc}

080a170e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a170e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1710:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1712:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1714:	b113      	cbz	r3, 80a171c <_ZN6String7reserveEj+0xe>
 80a1716:	6843      	ldr	r3, [r0, #4]
 80a1718:	428b      	cmp	r3, r1
 80a171a:	d207      	bcs.n	80a172c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a171c:	4620      	mov	r0, r4
 80a171e:	f7ff ffea 	bl	80a16f6 <_ZN6String12changeBufferEj>
 80a1722:	b120      	cbz	r0, 80a172e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1724:	68a3      	ldr	r3, [r4, #8]
 80a1726:	b90b      	cbnz	r3, 80a172c <_ZN6String7reserveEj+0x1e>
 80a1728:	6822      	ldr	r2, [r4, #0]
 80a172a:	7013      	strb	r3, [r2, #0]
 80a172c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a172e:	bd10      	pop	{r4, pc}

080a1730 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1730:	b570      	push	{r4, r5, r6, lr}
 80a1732:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1734:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1736:	4604      	mov	r4, r0
 80a1738:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a173a:	f7ff ffe8 	bl	80a170e <_ZN6String7reserveEj>
 80a173e:	b918      	cbnz	r0, 80a1748 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1740:	4620      	mov	r0, r4
 80a1742:	f7ff ffcd 	bl	80a16e0 <_ZN6String10invalidateEv>
		return *this;
 80a1746:	e009      	b.n	80a175c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1748:	462a      	mov	r2, r5
 80a174a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a174c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a174e:	6820      	ldr	r0, [r4, #0]
 80a1750:	f000 ffb6 	bl	80a26c0 <memcpy>
	buffer[len] = 0;
 80a1754:	6822      	ldr	r2, [r4, #0]
 80a1756:	68a3      	ldr	r3, [r4, #8]
 80a1758:	2100      	movs	r1, #0
 80a175a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a175c:	4620      	mov	r0, r4
 80a175e:	bd70      	pop	{r4, r5, r6, pc}

080a1760 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1760:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1762:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1764:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1766:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1768:	6043      	str	r3, [r0, #4]
	len = 0;
 80a176a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a176c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a176e:	460d      	mov	r5, r1
 80a1770:	b139      	cbz	r1, 80a1782 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1772:	4608      	mov	r0, r1
 80a1774:	f000 fff2 	bl	80a275c <strlen>
 80a1778:	4629      	mov	r1, r5
 80a177a:	4602      	mov	r2, r0
 80a177c:	4620      	mov	r0, r4
 80a177e:	f7ff ffd7 	bl	80a1730 <_ZN6String4copyEPKcj>
}
 80a1782:	4620      	mov	r0, r4
 80a1784:	bd38      	pop	{r3, r4, r5, pc}

080a1786 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1786:	b538      	push	{r3, r4, r5, lr}
 80a1788:	4605      	mov	r5, r0
	if (buffer) {
 80a178a:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a178c:	460c      	mov	r4, r1
	if (buffer) {
 80a178e:	b160      	cbz	r0, 80a17aa <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a1790:	686a      	ldr	r2, [r5, #4]
 80a1792:	688b      	ldr	r3, [r1, #8]
 80a1794:	429a      	cmp	r2, r3
 80a1796:	d306      	bcc.n	80a17a6 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a1798:	6809      	ldr	r1, [r1, #0]
 80a179a:	f000 ffd7 	bl	80a274c <strcpy>
			len = rhs.len;
 80a179e:	68a3      	ldr	r3, [r4, #8]
 80a17a0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a17a2:	2300      	movs	r3, #0
 80a17a4:	e00a      	b.n	80a17bc <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a17a6:	f7ff fd93 	bl	80a12d0 <free>
		}
	}
	buffer = rhs.buffer;
 80a17aa:	6823      	ldr	r3, [r4, #0]
 80a17ac:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a17ae:	6863      	ldr	r3, [r4, #4]
 80a17b0:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a17b2:	68a3      	ldr	r3, [r4, #8]
 80a17b4:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a17b6:	2300      	movs	r3, #0
 80a17b8:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a17ba:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a17bc:	60a3      	str	r3, [r4, #8]
 80a17be:	bd38      	pop	{r3, r4, r5, pc}

080a17c0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a17c0:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a17c2:	b510      	push	{r4, lr}
 80a17c4:	460b      	mov	r3, r1
 80a17c6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a17c8:	d007      	beq.n	80a17da <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a17ca:	6809      	ldr	r1, [r1, #0]
 80a17cc:	b119      	cbz	r1, 80a17d6 <_ZN6StringaSERKS_+0x16>
 80a17ce:	689a      	ldr	r2, [r3, #8]
 80a17d0:	f7ff ffae 	bl	80a1730 <_ZN6String4copyEPKcj>
 80a17d4:	e001      	b.n	80a17da <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a17d6:	f7ff ff83 	bl	80a16e0 <_ZN6String10invalidateEv>

	return *this;
}
 80a17da:	4620      	mov	r0, r4
 80a17dc:	bd10      	pop	{r4, pc}

080a17de <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a17de:	b510      	push	{r4, lr}
 80a17e0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a17e2:	2300      	movs	r3, #0
 80a17e4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a17e6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a17e8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a17ea:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a17ec:	f7ff ffe8 	bl	80a17c0 <_ZN6StringaSERKS_>
}
 80a17f0:	4620      	mov	r0, r4
 80a17f2:	bd10      	pop	{r4, pc}

080a17f4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a17f4:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a17f6:	b510      	push	{r4, lr}
 80a17f8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a17fa:	d001      	beq.n	80a1800 <_ZN6StringaSEOS_+0xc>
 80a17fc:	f7ff ffc3 	bl	80a1786 <_ZN6String4moveERS_>
	return *this;
}
 80a1800:	4620      	mov	r0, r4
 80a1802:	bd10      	pop	{r4, pc}

080a1804 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1804:	b538      	push	{r3, r4, r5, lr}
 80a1806:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1808:	460c      	mov	r4, r1
 80a180a:	b141      	cbz	r1, 80a181e <_ZN6StringaSEPKc+0x1a>
 80a180c:	4608      	mov	r0, r1
 80a180e:	f000 ffa5 	bl	80a275c <strlen>
 80a1812:	4621      	mov	r1, r4
 80a1814:	4602      	mov	r2, r0
 80a1816:	4628      	mov	r0, r5
 80a1818:	f7ff ff8a 	bl	80a1730 <_ZN6String4copyEPKcj>
 80a181c:	e001      	b.n	80a1822 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a181e:	f7ff ff5f 	bl	80a16e0 <_ZN6String10invalidateEv>

	return *this;
}
 80a1822:	4628      	mov	r0, r5
 80a1824:	bd38      	pop	{r3, r4, r5, pc}

080a1826 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a1826:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1828:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a182a:	2300      	movs	r3, #0
 80a182c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a182e:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1830:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1832:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a1834:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
 80a1836:	a901      	add	r1, sp, #4
 80a1838:	f000 fc85 	bl	80a2146 <utoa>
	*this = buf;
 80a183c:	a901      	add	r1, sp, #4
 80a183e:	4620      	mov	r0, r4
 80a1840:	f7ff ffe0 	bl	80a1804 <_ZN6StringaSEPKc>
}
 80a1844:	4620      	mov	r0, r4
 80a1846:	b004      	add	sp, #16
 80a1848:	bd10      	pop	{r4, pc}

080a184a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a184a:	b570      	push	{r4, r5, r6, lr}
 80a184c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a184e:	460e      	mov	r6, r1
 80a1850:	b909      	cbnz	r1, 80a1856 <_ZN6String6concatEPKcj+0xc>
 80a1852:	2000      	movs	r0, #0
 80a1854:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1856:	b16a      	cbz	r2, 80a1874 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a1858:	6883      	ldr	r3, [r0, #8]
 80a185a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a185c:	4629      	mov	r1, r5
 80a185e:	f7ff ff56 	bl	80a170e <_ZN6String7reserveEj>
 80a1862:	2800      	cmp	r0, #0
 80a1864:	d0f5      	beq.n	80a1852 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1866:	6820      	ldr	r0, [r4, #0]
 80a1868:	68a3      	ldr	r3, [r4, #8]
 80a186a:	4631      	mov	r1, r6
 80a186c:	4418      	add	r0, r3
 80a186e:	f000 ff6d 	bl	80a274c <strcpy>
	len = newlen;
 80a1872:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a1874:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1876:	bd70      	pop	{r4, r5, r6, pc}

080a1878 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a1878:	688a      	ldr	r2, [r1, #8]
 80a187a:	6809      	ldr	r1, [r1, #0]
 80a187c:	f7ff bfe5 	b.w	80a184a <_ZN6String6concatEPKcj>

080a1880 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1880:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1882:	688a      	ldr	r2, [r1, #8]
 80a1884:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1886:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1888:	f7ff ffdf 	bl	80a184a <_ZN6String6concatEPKcj>
 80a188c:	b910      	cbnz	r0, 80a1894 <_ZplRK15StringSumHelperRK6String+0x14>
 80a188e:	4620      	mov	r0, r4
 80a1890:	f7ff ff26 	bl	80a16e0 <_ZN6String10invalidateEv>
	return a;
}
 80a1894:	4620      	mov	r0, r4
 80a1896:	bd10      	pop	{r4, pc}

080a1898 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1898:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a189a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a189c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a189e:	b912      	cbnz	r2, 80a18a6 <_ZNK6String6equalsEPKc+0xe>
 80a18a0:	b919      	cbnz	r1, 80a18aa <_ZNK6String6equalsEPKc+0x12>
 80a18a2:	2001      	movs	r0, #1
 80a18a4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a18a6:	b911      	cbnz	r1, 80a18ae <_ZNK6String6equalsEPKc+0x16>
 80a18a8:	6803      	ldr	r3, [r0, #0]
 80a18aa:	7818      	ldrb	r0, [r3, #0]
 80a18ac:	e002      	b.n	80a18b4 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a18ae:	6800      	ldr	r0, [r0, #0]
 80a18b0:	f000 ff42 	bl	80a2738 <strcmp>
 80a18b4:	fab0 f080 	clz	r0, r0
 80a18b8:	0940      	lsrs	r0, r0, #5
}
 80a18ba:	bd08      	pop	{r3, pc}

080a18bc <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a18bc:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a18be:	6883      	ldr	r3, [r0, #8]
 80a18c0:	4293      	cmp	r3, r2
 80a18c2:	d907      	bls.n	80a18d4 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a18c4:	6804      	ldr	r4, [r0, #0]
 80a18c6:	6809      	ldr	r1, [r1, #0]
 80a18c8:	18a0      	adds	r0, r4, r2
 80a18ca:	f000 ff4f 	bl	80a276c <strstr>
	if (found == NULL) return -1;
 80a18ce:	b108      	cbz	r0, 80a18d4 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a18d0:	1b00      	subs	r0, r0, r4
 80a18d2:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
 80a18d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
 80a18d8:	bd10      	pop	{r4, pc}

080a18da <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
 80a18da:	2200      	movs	r2, #0
 80a18dc:	f7ff bfee 	b.w	80a18bc <_ZNK6String7indexOfERKS_j>

080a18e0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a18e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a18e4:	461c      	mov	r4, r3
	if (left > right) {
 80a18e6:	429a      	cmp	r2, r3
 80a18e8:	bf88      	it	hi
 80a18ea:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a18ec:	460e      	mov	r6, r1
 80a18ee:	4615      	mov	r5, r2
	if (left > right) {
 80a18f0:	bf88      	it	hi
 80a18f2:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a18f4:	490d      	ldr	r1, [pc, #52]	; (80a192c <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a18f6:	bf88      	it	hi
 80a18f8:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a18fa:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a18fc:	f7ff ff30 	bl	80a1760 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a1900:	68b1      	ldr	r1, [r6, #8]
 80a1902:	428d      	cmp	r5, r1
 80a1904:	d80f      	bhi.n	80a1926 <_ZNK6String9substringEjj+0x46>
 80a1906:	428c      	cmp	r4, r1
 80a1908:	bf28      	it	cs
 80a190a:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a190c:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80a190e:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a1910:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80a1914:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80a1916:	6831      	ldr	r1, [r6, #0]
 80a1918:	4638      	mov	r0, r7
 80a191a:	4429      	add	r1, r5
 80a191c:	f7ff ff72 	bl	80a1804 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80a1920:	6833      	ldr	r3, [r6, #0]
 80a1922:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80a1926:	4638      	mov	r0, r7
 80a1928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a192c:	080a2a12 	.word	0x080a2a12

080a1930 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a1930:	b510      	push	{r4, lr}
 80a1932:	4604      	mov	r4, r0
	return substring(left, len);
 80a1934:	688b      	ldr	r3, [r1, #8]
 80a1936:	f7ff ffd3 	bl	80a18e0 <_ZNK6String9substringEjj>
}
 80a193a:	4620      	mov	r0, r4
 80a193c:	bd10      	pop	{r4, pc}
	...

080a1940 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1940:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a1944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1946:	4c0d      	ldr	r4, [pc, #52]	; (80a197c <_GLOBAL__sub_I_System+0x3c>)
 80a1948:	2500      	movs	r5, #0
 80a194a:	8063      	strh	r3, [r4, #2]
 80a194c:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1950:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1952:	80a3      	strh	r3, [r4, #4]
 80a1954:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1956:	f7ff fc77 	bl	80a1248 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a195a:	a802      	add	r0, sp, #8
 80a195c:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a1960:	462a      	mov	r2, r5
 80a1962:	4629      	mov	r1, r5
 80a1964:	f7ff fae6 	bl	80a0f34 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a1968:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a196a:	2b1e      	cmp	r3, #30
 80a196c:	d104      	bne.n	80a1978 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a196e:	2303      	movs	r3, #3
 80a1970:	7023      	strb	r3, [r4, #0]
 80a1972:	2311      	movs	r3, #17
 80a1974:	8065      	strh	r5, [r4, #2]
 80a1976:	80a3      	strh	r3, [r4, #4]
 80a1978:	b003      	add	sp, #12
 80a197a:	bd30      	pop	{r4, r5, pc}
 80a197c:	20000864 	.word	0x20000864

080a1980 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1982:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1984:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1986:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a198a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a198c:	2201      	movs	r2, #1
 80a198e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1992:	4621      	mov	r1, r4
 80a1994:	47a8      	blx	r5
}
 80a1996:	b003      	add	sp, #12
 80a1998:	bd30      	pop	{r4, r5, pc}

080a199a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a199a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a199c:	6803      	ldr	r3, [r0, #0]
 80a199e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a19a0:	f247 5330 	movw	r3, #30000	; 0x7530
 80a19a4:	46a4      	mov	ip, r4
}
 80a19a6:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a19a8:	4760      	bx	ip

080a19aa <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a19aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a19ac:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a19ae:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a19b0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a19b4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a19b6:	4621      	mov	r1, r4
 80a19b8:	4613      	mov	r3, r2
 80a19ba:	2201      	movs	r2, #1
 80a19bc:	47a8      	blx	r5
}
 80a19be:	b003      	add	sp, #12
 80a19c0:	bd30      	pop	{r4, r5, pc}

080a19c2 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a19c2:	4770      	bx	lr

080a19c4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a19c4:	4770      	bx	lr

080a19c6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a19c6:	2000      	movs	r0, #0
 80a19c8:	4770      	bx	lr

080a19ca <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a19ca:	b510      	push	{r4, lr}
 80a19cc:	4604      	mov	r4, r0
 80a19ce:	f7fe fb66 	bl	80a009e <_ZdlPv>
 80a19d2:	4620      	mov	r0, r4
 80a19d4:	bd10      	pop	{r4, pc}

080a19d6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a19d6:	f7fe bb62 	b.w	80a009e <_ZdlPv>
	...

080a19dc <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a19dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a19e0:	461f      	mov	r7, r3
    stop();
 80a19e2:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a19e4:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a19e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a19e8:	4606      	mov	r6, r0
 80a19ea:	460c      	mov	r4, r1
 80a19ec:	4690      	mov	r8, r2
    stop();
 80a19ee:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80a19f0:	4b13      	ldr	r3, [pc, #76]	; (80a1a40 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a19f2:	6818      	ldr	r0, [r3, #0]
 80a19f4:	6803      	ldr	r3, [r0, #0]
 80a19f6:	681b      	ldr	r3, [r3, #0]
 80a19f8:	4798      	blx	r3
 80a19fa:	b1f0      	cbz	r0, 80a1a3a <_ZN9TCPClient7connectEPKctm+0x5e>
      {
        IPAddress ip_addr;
 80a19fc:	a802      	add	r0, sp, #8
 80a19fe:	f7ff fced 	bl	80a13dc <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80a1a02:	4620      	mov	r0, r4
 80a1a04:	f000 feaa 	bl	80a275c <strlen>
 80a1a08:	2300      	movs	r3, #0
 80a1a0a:	9300      	str	r3, [sp, #0]
 80a1a0c:	b281      	uxth	r1, r0
 80a1a0e:	463b      	mov	r3, r7
 80a1a10:	aa03      	add	r2, sp, #12
 80a1a12:	4620      	mov	r0, r4
 80a1a14:	f7ff fc08 	bl	80a1228 <inet_gethostbyname>
 80a1a18:	b978      	cbnz	r0, 80a1a3a <_ZN9TCPClient7connectEPKctm+0x5e>
        {
                return connect(ip_addr, port, nif);
 80a1a1a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1a1c:	ad09      	add	r5, sp, #36	; 0x24
 80a1a1e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a1a22:	4b08      	ldr	r3, [pc, #32]	; (80a1a44 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a1a24:	ac03      	add	r4, sp, #12
 80a1a26:	9308      	str	r3, [sp, #32]
 80a1a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1a2c:	6823      	ldr	r3, [r4, #0]
 80a1a2e:	4642      	mov	r2, r8
 80a1a30:	702b      	strb	r3, [r5, #0]
 80a1a32:	a908      	add	r1, sp, #32
 80a1a34:	463b      	mov	r3, r7
 80a1a36:	4630      	mov	r0, r6
 80a1a38:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80a1a3a:	b00f      	add	sp, #60	; 0x3c
 80a1a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1a40:	080a2c64 	.word	0x080a2c64
 80a1a44:	080a2a44 	.word	0x080a2a44

080a1a48 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a1a48:	b510      	push	{r4, lr}
 80a1a4a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a1a4c:	6803      	ldr	r3, [r0, #0]
 80a1a4e:	689b      	ldr	r3, [r3, #8]
 80a1a50:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1a52:	68a3      	ldr	r3, [r4, #8]
 80a1a54:	3b01      	subs	r3, #1
 80a1a56:	60a3      	str	r3, [r4, #8]
 80a1a58:	b92b      	cbnz	r3, 80a1a66 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30+0x1e>
            _M_destroy();
 80a1a5a:	6823      	ldr	r3, [r4, #0]
 80a1a5c:	4620      	mov	r0, r4
        }
    }
 80a1a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a1a62:	68db      	ldr	r3, [r3, #12]
 80a1a64:	4718      	bx	r3
 80a1a66:	bd10      	pop	{r4, pc}

080a1a68 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a1a68:	b570      	push	{r4, r5, r6, lr}
 80a1a6a:	4604      	mov	r4, r0
 80a1a6c:	4606      	mov	r6, r0
 80a1a6e:	694d      	ldr	r5, [r1, #20]
 80a1a70:	4b04      	ldr	r3, [pc, #16]	; (80a1a84 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a1a72:	358c      	adds	r5, #140	; 0x8c
 80a1a74:	f844 3b04 	str.w	r3, [r4], #4
 80a1a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1a7c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a1a7e:	4630      	mov	r0, r6
 80a1a80:	7023      	strb	r3, [r4, #0]
 80a1a82:	bd70      	pop	{r4, r5, r6, pc}
 80a1a84:	080a2a44 	.word	0x080a2a44

080a1a88 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a1a88:	b510      	push	{r4, lr}
 80a1a8a:	6943      	ldr	r3, [r0, #20]
 80a1a8c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1a8e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1a92:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1a96:	429a      	cmp	r2, r3
 80a1a98:	d005      	beq.n	80a1aa6 <_ZN9TCPClient4peekEv+0x1e>
 80a1a9a:	6962      	ldr	r2, [r4, #20]
 80a1a9c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1aa0:	4413      	add	r3, r2
 80a1aa2:	7918      	ldrb	r0, [r3, #4]
 80a1aa4:	bd10      	pop	{r4, pc}
 80a1aa6:	6803      	ldr	r3, [r0, #0]
 80a1aa8:	691b      	ldr	r3, [r3, #16]
 80a1aaa:	4798      	blx	r3
 80a1aac:	2800      	cmp	r0, #0
 80a1aae:	d1f4      	bne.n	80a1a9a <_ZN9TCPClient4peekEv+0x12>
 80a1ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1ab4:	bd10      	pop	{r4, pc}

080a1ab6 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a1ab6:	b510      	push	{r4, lr}
 80a1ab8:	6943      	ldr	r3, [r0, #20]
 80a1aba:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1abc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1ac0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1ac4:	429a      	cmp	r2, r3
 80a1ac6:	d008      	beq.n	80a1ada <_ZN9TCPClient4readEv+0x24>
 80a1ac8:	6962      	ldr	r2, [r4, #20]
 80a1aca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1ace:	1c59      	adds	r1, r3, #1
 80a1ad0:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a1ad4:	4413      	add	r3, r2
 80a1ad6:	7918      	ldrb	r0, [r3, #4]
 80a1ad8:	bd10      	pop	{r4, pc}
 80a1ada:	6803      	ldr	r3, [r0, #0]
 80a1adc:	691b      	ldr	r3, [r3, #16]
 80a1ade:	4798      	blx	r3
 80a1ae0:	2800      	cmp	r0, #0
 80a1ae2:	d1f1      	bne.n	80a1ac8 <_ZN9TCPClient4readEv+0x12>
 80a1ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1ae8:	bd10      	pop	{r4, pc}

080a1aea <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a1aea:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a1aec:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80a1aee:	6820      	ldr	r0, [r4, #0]
 80a1af0:	f7ff faa2 	bl	80a1038 <socket_handle_valid>
 80a1af4:	b110      	cbz	r0, 80a1afc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80a1af6:	6820      	ldr	r0, [r4, #0]
 80a1af8:	f7ff fabe 	bl	80a1078 <socket_close>
 80a1afc:	4620      	mov	r0, r4
 80a1afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1b02:	f7fe bacc 	b.w	80a009e <_ZdlPv>

080a1b06 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b08:	6943      	ldr	r3, [r0, #20]
 80a1b0a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a1b0c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1b10:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1b14:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a1b16:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1b18:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a1b1a:	d106      	bne.n	80a1b2a <_ZN9TCPClient4readEPhj+0x24>
 80a1b1c:	6803      	ldr	r3, [r0, #0]
 80a1b1e:	691b      	ldr	r3, [r3, #16]
 80a1b20:	4798      	blx	r3
 80a1b22:	b910      	cbnz	r0, 80a1b2a <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a1b24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1b28:	e014      	b.n	80a1b54 <_ZN9TCPClient4readEPhj+0x4e>
 80a1b2a:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1b2c:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1b2e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1b32:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1b36:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1b38:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1b3a:	42bc      	cmp	r4, r7
 80a1b3c:	bf28      	it	cs
 80a1b3e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1b40:	3104      	adds	r1, #4
 80a1b42:	4622      	mov	r2, r4
 80a1b44:	f000 fdbc 	bl	80a26c0 <memcpy>
 80a1b48:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1b4a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1b4e:	4423      	add	r3, r4
 80a1b50:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a1b54:	4620      	mov	r0, r4
 80a1b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b58 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1b58:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a1b5a:	2300      	movs	r3, #0
 80a1b5c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1b60:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1b62:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1b66:	4770      	bx	lr

080a1b68 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1b68:	b538      	push	{r3, r4, r5, lr}
 80a1b6a:	6942      	ldr	r2, [r0, #20]
 80a1b6c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a1b6e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1b72:	b11b      	cbz	r3, 80a1b7c <_ZN9TCPClient9availableEv+0x14>
 80a1b74:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1b78:	429a      	cmp	r2, r3
 80a1b7a:	d00b      	beq.n	80a1b94 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80a1b7c:	4b18      	ldr	r3, [pc, #96]	; (80a1be0 <_ZN9TCPClient9availableEv+0x78>)
 80a1b7e:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1b80:	6803      	ldr	r3, [r0, #0]
 80a1b82:	681b      	ldr	r3, [r3, #0]
 80a1b84:	4798      	blx	r3
 80a1b86:	b318      	cbz	r0, 80a1bd0 <_ZN9TCPClient9availableEv+0x68>
 80a1b88:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1b8a:	6818      	ldr	r0, [r3, #0]
 80a1b8c:	f7ff fa54 	bl	80a1038 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1b90:	b918      	cbnz	r0, 80a1b9a <_ZN9TCPClient9availableEv+0x32>
 80a1b92:	e01d      	b.n	80a1bd0 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a1b94:	f7ff ffe0 	bl	80a1b58 <_ZN9TCPClient12flush_bufferEv>
 80a1b98:	e7f0      	b.n	80a1b7c <_ZN9TCPClient9availableEv+0x14>
 80a1b9a:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a1b9c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a1ba0:	297f      	cmp	r1, #127	; 0x7f
 80a1ba2:	d815      	bhi.n	80a1bd0 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1ba4:	1d05      	adds	r5, r0, #4
 80a1ba6:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1baa:	2300      	movs	r3, #0
 80a1bac:	4429      	add	r1, r5
 80a1bae:	6800      	ldr	r0, [r0, #0]
 80a1bb0:	f7ff fa5a 	bl	80a1068 <socket_receive>
            if (ret > 0)
 80a1bb4:	2800      	cmp	r0, #0
 80a1bb6:	dd0b      	ble.n	80a1bd0 <_ZN9TCPClient9availableEv+0x68>
 80a1bb8:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a1bba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1bbe:	b90a      	cbnz	r2, 80a1bc4 <_ZN9TCPClient9availableEv+0x5c>
 80a1bc0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1bc4:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a1bc6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1bca:	4418      	add	r0, r3
 80a1bcc:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a1bd0:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a1bd2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1bd6:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a1bda:	1a18      	subs	r0, r3, r0
}
 80a1bdc:	bd38      	pop	{r3, r4, r5, pc}
 80a1bde:	bf00      	nop
 80a1be0:	080a2c64 	.word	0x080a2c64

080a1be4 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a1be4:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1be6:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a1be8:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1bea:	6818      	ldr	r0, [r3, #0]
 80a1bec:	f7ff fa24 	bl	80a1038 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1bf0:	b118      	cbz	r0, 80a1bfa <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a1bf2:	6963      	ldr	r3, [r4, #20]
 80a1bf4:	6818      	ldr	r0, [r3, #0]
 80a1bf6:	f7ff fa3f 	bl	80a1078 <socket_close>
 80a1bfa:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1bfc:	f7ff fa44 	bl	80a1088 <socket_handle_invalid>
 80a1c00:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1c02:	6960      	ldr	r0, [r4, #20]
 80a1c04:	2211      	movs	r2, #17
 80a1c06:	2100      	movs	r1, #0
 80a1c08:	308c      	adds	r0, #140	; 0x8c
 80a1c0a:	f000 fd64 	bl	80a26d6 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a1c0e:	4620      	mov	r0, r4
}
 80a1c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a1c14:	f7ff bfa0 	b.w	80a1b58 <_ZN9TCPClient12flush_bufferEv>

080a1c18 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1c1e:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a1c20:	4b17      	ldr	r3, [pc, #92]	; (80a1c80 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1c22:	2600      	movs	r6, #0
 80a1c24:	6046      	str	r6, [r0, #4]
 80a1c26:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a1c28:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1c2a:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1c2c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1c2e:	20a0      	movs	r0, #160	; 0xa0
 80a1c30:	460f      	mov	r7, r1
 80a1c32:	f7fe fa32 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1c36:	4605      	mov	r5, r0
 80a1c38:	b138      	cbz	r0, 80a1c4a <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 80a1c3a:	6007      	str	r7, [r0, #0]
 80a1c3c:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 80a1c40:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 80a1c44:	3088      	adds	r0, #136	; 0x88
 80a1c46:	f7ff fbc9 	bl	80a13dc <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1c4a:	2014      	movs	r0, #20
 80a1c4c:	f7fe fa25 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1c50:	4603      	mov	r3, r0
 80a1c52:	b128      	cbz	r0, 80a1c60 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1c54:	2201      	movs	r2, #1
 80a1c56:	6042      	str	r2, [r0, #4]
 80a1c58:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1c5a:	4a0a      	ldr	r2, [pc, #40]	; (80a1c84 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a1c5c:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1c5e:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1c60:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a1c62:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1c64:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1c66:	b128      	cbz	r0, 80a1c74 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1c68:	6843      	ldr	r3, [r0, #4]
 80a1c6a:	3b01      	subs	r3, #1
 80a1c6c:	6043      	str	r3, [r0, #4]
 80a1c6e:	b90b      	cbnz	r3, 80a1c74 <_ZN9TCPClientC1Em+0x5c>
 80a1c70:	f7ff feea 	bl	80a1a48 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a1c74:	4620      	mov	r0, r4
 80a1c76:	f7ff ff6f 	bl	80a1b58 <_ZN9TCPClient12flush_bufferEv>
}
 80a1c7a:	4620      	mov	r0, r4
 80a1c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1c7e:	bf00      	nop
 80a1c80:	080a2b70 	.word	0x080a2b70
 80a1c84:	080a2b54 	.word	0x080a2b54

080a1c88 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1c88:	b510      	push	{r4, lr}
 80a1c8a:	4604      	mov	r4, r0
 80a1c8c:	f7ff f9fc 	bl	80a1088 <socket_handle_invalid>
 80a1c90:	4601      	mov	r1, r0
 80a1c92:	4620      	mov	r0, r4
 80a1c94:	f7ff ffc0 	bl	80a1c18 <_ZN9TCPClientC1Em>
{
}
 80a1c98:	4620      	mov	r0, r4
 80a1c9a:	bd10      	pop	{r4, pc}

080a1c9c <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1ca0:	4698      	mov	r8, r3
    stop();
 80a1ca2:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1ca4:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a1ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1ca8:	4606      	mov	r6, r0
 80a1caa:	460c      	mov	r4, r1
 80a1cac:	4615      	mov	r5, r2
    stop();
 80a1cae:	4798      	blx	r3
 80a1cb0:	4b2f      	ldr	r3, [pc, #188]	; (80a1d70 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>)
 80a1cb2:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80a1cb4:	6803      	ldr	r3, [r0, #0]
 80a1cb6:	681b      	ldr	r3, [r3, #0]
 80a1cb8:	4798      	blx	r3
 80a1cba:	2800      	cmp	r0, #0
 80a1cbc:	d055      	beq.n	80a1d6a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1cbe:	462b      	mov	r3, r5
 80a1cc0:	2206      	movs	r2, #6
 80a1cc2:	2101      	movs	r1, #1
 80a1cc4:	f8cd 8000 	str.w	r8, [sp]
 80a1cc8:	2002      	movs	r0, #2
 80a1cca:	6977      	ldr	r7, [r6, #20]
 80a1ccc:	f7ff f9bc 	bl	80a1048 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1cd0:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1cd2:	6038      	str	r0, [r7, #0]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1cd4:	9302      	str	r3, [sp, #8]
 80a1cd6:	2700      	movs	r7, #0
 80a1cd8:	6973      	ldr	r3, [r6, #20]
 80a1cda:	9703      	str	r7, [sp, #12]
 80a1cdc:	681b      	ldr	r3, [r3, #0]
 80a1cde:	2001      	movs	r0, #1
 80a1ce0:	9301      	str	r3, [sp, #4]
 80a1ce2:	4b24      	ldr	r3, [pc, #144]	; (80a1d74 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1ce4:	aa02      	add	r2, sp, #8
 80a1ce6:	9300      	str	r3, [sp, #0]
 80a1ce8:	4923      	ldr	r1, [pc, #140]	; (80a1d78 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1cea:	463b      	mov	r3, r7
 80a1cec:	f7ff faa4 	bl	80a1238 <log_message>

          if (socket_handle_valid(d_->sock))
 80a1cf0:	6973      	ldr	r3, [r6, #20]
 80a1cf2:	6818      	ldr	r0, [r3, #0]
 80a1cf4:	f7ff f9a0 	bl	80a1038 <socket_handle_valid>
 80a1cf8:	2800      	cmp	r0, #0
 80a1cfa:	d036      	beq.n	80a1d6a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          {
            flush_buffer();
 80a1cfc:	4630      	mov	r0, r6
 80a1cfe:	f7ff ff2b 	bl	80a1b58 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a1d02:	2302      	movs	r3, #2
 80a1d04:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1d08:	0a2b      	lsrs	r3, r5, #8
 80a1d0a:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1d0e:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1d10:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1d14:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1d18:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a1d1a:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a1d1e:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a1d22:	7963      	ldrb	r3, [r4, #5]
 80a1d24:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1d28:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1d2c:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1d30:	f7ff fa72 	bl	80a1218 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1d34:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1d36:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1d38:	2210      	movs	r2, #16
 80a1d3a:	a902      	add	r1, sp, #8
 80a1d3c:	6818      	ldr	r0, [r3, #0]
 80a1d3e:	f7ff f98b 	bl	80a1058 <socket_connect>
 80a1d42:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a1d44:	4628      	mov	r0, r5
 80a1d46:	f7ff fa67 	bl	80a1218 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1d4c:	6975      	ldr	r5, [r6, #20]
 80a1d4e:	358c      	adds	r5, #140	; 0x8c
 80a1d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1d52:	6823      	ldr	r3, [r4, #0]
 80a1d54:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a1d56:	f1b8 0f00 	cmp.w	r8, #0
 80a1d5a:	d005      	beq.n	80a1d68 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
            {
                stop();
 80a1d5c:	6833      	ldr	r3, [r6, #0]
 80a1d5e:	4630      	mov	r0, r6
 80a1d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1d62:	4798      	blx	r3
 80a1d64:	4638      	mov	r0, r7
 80a1d66:	e000      	b.n	80a1d6a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a1d68:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a1d6a:	b00a      	add	sp, #40	; 0x28
 80a1d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1d70:	080a2c64 	.word	0x080a2c64
 80a1d74:	080a2bbb 	.word	0x080a2bbb
 80a1d78:	080a2bb4 	.word	0x080a2bb4

080a1d7c <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1d7c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1d7e:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1d80:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1d82:	6818      	ldr	r0, [r3, #0]
 80a1d84:	f7ff f958 	bl	80a1038 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1d88:	b908      	cbnz	r0, 80a1d8e <_ZN9TCPClient6statusEv+0x12>
 80a1d8a:	2000      	movs	r0, #0
 80a1d8c:	bd10      	pop	{r4, pc}
 80a1d8e:	4b07      	ldr	r3, [pc, #28]	; (80a1dac <_ZN9TCPClient6statusEv+0x30>)
 80a1d90:	6818      	ldr	r0, [r3, #0]
 80a1d92:	6803      	ldr	r3, [r0, #0]
 80a1d94:	681b      	ldr	r3, [r3, #0]
 80a1d96:	4798      	blx	r3
 80a1d98:	2800      	cmp	r0, #0
 80a1d9a:	d0f6      	beq.n	80a1d8a <_ZN9TCPClient6statusEv+0xe>
 80a1d9c:	6963      	ldr	r3, [r4, #20]
 80a1d9e:	6818      	ldr	r0, [r3, #0]
 80a1da0:	f7ff f942 	bl	80a1028 <socket_active_status>
 80a1da4:	fab0 f080 	clz	r0, r0
 80a1da8:	0940      	lsrs	r0, r0, #5
}
 80a1daa:	bd10      	pop	{r4, pc}
 80a1dac:	080a2c64 	.word	0x080a2c64

080a1db0 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a1db0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a1db4:	2500      	movs	r5, #0
 80a1db6:	6045      	str	r5, [r0, #4]
 80a1db8:	4604      	mov	r4, r0
 80a1dba:	460e      	mov	r6, r1
 80a1dbc:	4617      	mov	r7, r2
 80a1dbe:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1dc0:	f7ff ffdc 	bl	80a1d7c <_ZN9TCPClient6statusEv>
 80a1dc4:	b160      	cbz	r0, 80a1de0 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a1dc6:	6960      	ldr	r0, [r4, #20]
 80a1dc8:	9501      	str	r5, [sp, #4]
 80a1dca:	f8cd 8000 	str.w	r8, [sp]
 80a1dce:	462b      	mov	r3, r5
 80a1dd0:	463a      	mov	r2, r7
 80a1dd2:	4631      	mov	r1, r6
 80a1dd4:	6800      	ldr	r0, [r0, #0]
 80a1dd6:	f7ff f95f 	bl	80a1098 <socket_send_ex>
    if (ret < 0) {
 80a1dda:	2800      	cmp	r0, #0
 80a1ddc:	da03      	bge.n	80a1de6 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a1dde:	e001      	b.n	80a1de4 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1de4:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a1de6:	b002      	add	sp, #8
 80a1de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1dec <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a1dec:	b538      	push	{r3, r4, r5, lr}
 80a1dee:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1df0:	f7ff ffc4 	bl	80a1d7c <_ZN9TCPClient6statusEv>
 80a1df4:	bb00      	cbnz	r0, 80a1e38 <_ZN9TCPClient9connectedEv+0x4c>
 80a1df6:	6963      	ldr	r3, [r4, #20]
 80a1df8:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1dfc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1e00:	4291      	cmp	r1, r2
 80a1e02:	d119      	bne.n	80a1e38 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1e04:	6818      	ldr	r0, [r3, #0]
 80a1e06:	f7ff f917 	bl	80a1038 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1e0a:	b128      	cbz	r0, 80a1e18 <_ZN9TCPClient9connectedEv+0x2c>
 80a1e0c:	6963      	ldr	r3, [r4, #20]
 80a1e0e:	6818      	ldr	r0, [r3, #0]
 80a1e10:	f7ff f90a 	bl	80a1028 <socket_active_status>
 80a1e14:	2801      	cmp	r0, #1
 80a1e16:	d001      	beq.n	80a1e1c <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1e18:	2500      	movs	r5, #0
 80a1e1a:	e00e      	b.n	80a1e3a <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a1e1c:	6823      	ldr	r3, [r4, #0]
 80a1e1e:	4620      	mov	r0, r4
 80a1e20:	691b      	ldr	r3, [r3, #16]
 80a1e22:	4798      	blx	r3
 80a1e24:	2800      	cmp	r0, #0
 80a1e26:	bf14      	ite	ne
 80a1e28:	2501      	movne	r5, #1
 80a1e2a:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a1e2c:	d105      	bne.n	80a1e3a <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80a1e2e:	6823      	ldr	r3, [r4, #0]
 80a1e30:	4620      	mov	r0, r4
 80a1e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1e34:	4798      	blx	r3
 80a1e36:	e000      	b.n	80a1e3a <_ZN9TCPClient9connectedEv+0x4e>
 80a1e38:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a1e3a:	4628      	mov	r0, r5
 80a1e3c:	bd38      	pop	{r3, r4, r5, pc}

080a1e3e <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a1e3e:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1e40:	f7ff ff9c 	bl	80a1d7c <_ZN9TCPClient6statusEv>
}
 80a1e44:	3000      	adds	r0, #0
 80a1e46:	bf18      	it	ne
 80a1e48:	2001      	movne	r0, #1
 80a1e4a:	bd08      	pop	{r3, pc}

080a1e4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1e4c:	4b02      	ldr	r3, [pc, #8]	; (80a1e58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1e4e:	681a      	ldr	r2, [r3, #0]
 80a1e50:	4b02      	ldr	r3, [pc, #8]	; (80a1e5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1e52:	601a      	str	r2, [r3, #0]
 80a1e54:	4770      	bx	lr
 80a1e56:	bf00      	nop
 80a1e58:	20000320 	.word	0x20000320
 80a1e5c:	2000086c 	.word	0x2000086c

080a1e60 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1e60:	4770      	bx	lr

080a1e62 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1e62:	7441      	strb	r1, [r0, #17]
 80a1e64:	4770      	bx	lr

080a1e66 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a1e66:	7c00      	ldrb	r0, [r0, #16]
 80a1e68:	f7ff b996 	b.w	80a1198 <HAL_USART_Available_Data_For_Write>

080a1e6c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1e6c:	7c00      	ldrb	r0, [r0, #16]
 80a1e6e:	f7ff b96b 	b.w	80a1148 <HAL_USART_Available_Data>

080a1e72 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1e72:	7c00      	ldrb	r0, [r0, #16]
 80a1e74:	f7ff b978 	b.w	80a1168 <HAL_USART_Peek_Data>

080a1e78 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1e78:	7c00      	ldrb	r0, [r0, #16]
 80a1e7a:	f7ff b96d 	b.w	80a1158 <HAL_USART_Read_Data>

080a1e7e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1e7e:	7c00      	ldrb	r0, [r0, #16]
 80a1e80:	f7ff b97a 	b.w	80a1178 <HAL_USART_Flush_Data>

080a1e84 <_ZN11USARTSerialD0Ev>:
 80a1e84:	b510      	push	{r4, lr}
 80a1e86:	4604      	mov	r4, r0
 80a1e88:	f7fe f909 	bl	80a009e <_ZdlPv>
 80a1e8c:	4620      	mov	r0, r4
 80a1e8e:	bd10      	pop	{r4, pc}

080a1e90 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1e90:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1e92:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1e94:	4604      	mov	r4, r0
 80a1e96:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1e98:	b925      	cbnz	r5, 80a1ea4 <_ZN11USARTSerial5writeEh+0x14>
 80a1e9a:	7c00      	ldrb	r0, [r0, #16]
 80a1e9c:	f7ff f97c 	bl	80a1198 <HAL_USART_Available_Data_For_Write>
 80a1ea0:	2800      	cmp	r0, #0
 80a1ea2:	dd05      	ble.n	80a1eb0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1ea4:	4631      	mov	r1, r6
 80a1ea6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1eac:	f7ff b944 	b.w	80a1138 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1eb0:	4628      	mov	r0, r5
 80a1eb2:	bd70      	pop	{r4, r5, r6, pc}

080a1eb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1eb4:	b510      	push	{r4, lr}
 80a1eb6:	4604      	mov	r4, r0
 80a1eb8:	4608      	mov	r0, r1
 80a1eba:	4611      	mov	r1, r2
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1ebc:	2200      	movs	r2, #0
 80a1ebe:	6062      	str	r2, [r4, #4]
 80a1ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1ec4:	60a2      	str	r2, [r4, #8]
 80a1ec6:	4a05      	ldr	r2, [pc, #20]	; (80a1edc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1ec8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1eca:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1ecc:	2201      	movs	r2, #1
 80a1ece:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1ed0:	461a      	mov	r2, r3
 80a1ed2:	f7ff f929 	bl	80a1128 <HAL_USART_Init>
}
 80a1ed6:	4620      	mov	r0, r4
 80a1ed8:	bd10      	pop	{r4, pc}
 80a1eda:	bf00      	nop
 80a1edc:	080a2c00 	.word	0x080a2c00

080a1ee0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1ee0:	7c00      	ldrb	r0, [r0, #16]
 80a1ee2:	f7ff b951 	b.w	80a1188 <HAL_USART_Is_Enabled>
	...

080a1ee8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1ee8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1eea:	4d0c      	ldr	r5, [pc, #48]	; (80a1f1c <_Z22__fetch_global_Serial1v+0x34>)
 80a1eec:	6829      	ldr	r1, [r5, #0]
 80a1eee:	f011 0401 	ands.w	r4, r1, #1
 80a1ef2:	d111      	bne.n	80a1f18 <_Z22__fetch_global_Serial1v+0x30>
 80a1ef4:	4628      	mov	r0, r5
 80a1ef6:	f7fe f8d4 	bl	80a00a2 <__cxa_guard_acquire>
 80a1efa:	b168      	cbz	r0, 80a1f18 <_Z22__fetch_global_Serial1v+0x30>
 80a1efc:	4a08      	ldr	r2, [pc, #32]	; (80a1f20 <_Z22__fetch_global_Serial1v+0x38>)
 80a1efe:	4621      	mov	r1, r4
 80a1f00:	4b08      	ldr	r3, [pc, #32]	; (80a1f24 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1f02:	4809      	ldr	r0, [pc, #36]	; (80a1f28 <_Z22__fetch_global_Serial1v+0x40>)
 80a1f04:	f7ff ffd6 	bl	80a1eb4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1f08:	4628      	mov	r0, r5
 80a1f0a:	f7fe f8cf 	bl	80a00ac <__cxa_guard_release>
 80a1f0e:	4a07      	ldr	r2, [pc, #28]	; (80a1f2c <_Z22__fetch_global_Serial1v+0x44>)
 80a1f10:	4907      	ldr	r1, [pc, #28]	; (80a1f30 <_Z22__fetch_global_Serial1v+0x48>)
 80a1f12:	4805      	ldr	r0, [pc, #20]	; (80a1f28 <_Z22__fetch_global_Serial1v+0x40>)
 80a1f14:	f000 fa74 	bl	80a2400 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1f18:	4803      	ldr	r0, [pc, #12]	; (80a1f28 <_Z22__fetch_global_Serial1v+0x40>)
 80a1f1a:	bd38      	pop	{r3, r4, r5, pc}
 80a1f1c:	20000908 	.word	0x20000908
 80a1f20:	2000090c 	.word	0x2000090c
 80a1f24:	20000884 	.word	0x20000884
 80a1f28:	20000870 	.word	0x20000870
 80a1f2c:	20000390 	.word	0x20000390
 80a1f30:	080a1e61 	.word	0x080a1e61

080a1f34 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1f34:	7441      	strb	r1, [r0, #17]
 80a1f36:	4770      	bx	lr

080a1f38 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1f38:	4770      	bx	lr

080a1f3a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1f3a:	2100      	movs	r1, #0
 80a1f3c:	7c00      	ldrb	r0, [r0, #16]
 80a1f3e:	f7ff b953 	b.w	80a11e8 <HAL_USB_USART_Receive_Data>

080a1f42 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a1f42:	2101      	movs	r1, #1
 80a1f44:	7c00      	ldrb	r0, [r0, #16]
 80a1f46:	f7ff b94f 	b.w	80a11e8 <HAL_USB_USART_Receive_Data>

080a1f4a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a1f4a:	7c00      	ldrb	r0, [r0, #16]
 80a1f4c:	f7ff b944 	b.w	80a11d8 <HAL_USB_USART_Available_Data_For_Write>

080a1f50 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1f50:	7c00      	ldrb	r0, [r0, #16]
 80a1f52:	f7ff b939 	b.w	80a11c8 <HAL_USB_USART_Available_Data>

080a1f56 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a1f56:	b538      	push	{r3, r4, r5, lr}
 80a1f58:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1f5a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1f5c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1f5e:	f7ff f93b 	bl	80a11d8 <HAL_USB_USART_Available_Data_For_Write>
 80a1f62:	2800      	cmp	r0, #0
 80a1f64:	dc01      	bgt.n	80a1f6a <_ZN9USBSerial5writeEh+0x14>
 80a1f66:	7c60      	ldrb	r0, [r4, #17]
 80a1f68:	b120      	cbz	r0, 80a1f74 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1f6a:	4629      	mov	r1, r5
 80a1f6c:	7c20      	ldrb	r0, [r4, #16]
 80a1f6e:	f7ff f943 	bl	80a11f8 <HAL_USB_USART_Send_Data>
    return 1;
 80a1f72:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1f74:	bd38      	pop	{r3, r4, r5, pc}

080a1f76 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1f76:	7c00      	ldrb	r0, [r0, #16]
 80a1f78:	f7ff b946 	b.w	80a1208 <HAL_USB_USART_Flush_Data>

080a1f7c <_ZN9USBSerialD0Ev>:
 80a1f7c:	b510      	push	{r4, lr}
 80a1f7e:	4604      	mov	r4, r0
 80a1f80:	f7fe f88d 	bl	80a009e <_ZdlPv>
 80a1f84:	4620      	mov	r0, r4
 80a1f86:	bd10      	pop	{r4, pc}

080a1f88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1f88:	b510      	push	{r4, lr}
 80a1f8a:	4604      	mov	r4, r0
 80a1f8c:	2300      	movs	r3, #0
 80a1f8e:	6063      	str	r3, [r4, #4]
 80a1f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1f94:	60a3      	str	r3, [r4, #8]
 80a1f96:	4b05      	ldr	r3, [pc, #20]	; (80a1fac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1f98:	4608      	mov	r0, r1
 80a1f9a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1f9c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1f9e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1fa0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1fa2:	4611      	mov	r1, r2
 80a1fa4:	f7ff f900 	bl	80a11a8 <HAL_USB_USART_Init>
}
 80a1fa8:	4620      	mov	r0, r4
 80a1faa:	bd10      	pop	{r4, pc}
 80a1fac:	080a2c30 	.word	0x080a2c30

080a1fb0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1fb0:	2200      	movs	r2, #0
 80a1fb2:	7c00      	ldrb	r0, [r0, #16]
 80a1fb4:	f7ff b900 	b.w	80a11b8 <HAL_USB_USART_Begin>

080a1fb8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1fb8:	b510      	push	{r4, lr}
 80a1fba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1fbc:	2214      	movs	r2, #20
 80a1fbe:	2100      	movs	r1, #0
 80a1fc0:	f000 fb89 	bl	80a26d6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1fc4:	4b05      	ldr	r3, [pc, #20]	; (80a1fdc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1fc6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1fc8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1fca:	4b05      	ldr	r3, [pc, #20]	; (80a1fe0 <_Z19acquireSerialBufferv+0x28>)
 80a1fcc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1fce:	f240 1301 	movw	r3, #257	; 0x101
 80a1fd2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1fd4:	2381      	movs	r3, #129	; 0x81
 80a1fd6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1fd8:	bd10      	pop	{r4, pc}
 80a1fda:	bf00      	nop
 80a1fdc:	20000a15 	.word	0x20000a15
 80a1fe0:	20000994 	.word	0x20000994

080a1fe4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1fe4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1fe6:	4d0e      	ldr	r5, [pc, #56]	; (80a2020 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1fe8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1fea:	a801      	add	r0, sp, #4
 80a1fec:	f7ff ffe4 	bl	80a1fb8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1ff0:	6829      	ldr	r1, [r5, #0]
 80a1ff2:	f011 0401 	ands.w	r4, r1, #1
 80a1ff6:	d110      	bne.n	80a201a <_Z16_fetch_usbserialv+0x36>
 80a1ff8:	4628      	mov	r0, r5
 80a1ffa:	f7fe f852 	bl	80a00a2 <__cxa_guard_acquire>
 80a1ffe:	b160      	cbz	r0, 80a201a <_Z16_fetch_usbserialv+0x36>
 80a2000:	aa01      	add	r2, sp, #4
 80a2002:	4621      	mov	r1, r4
 80a2004:	4807      	ldr	r0, [pc, #28]	; (80a2024 <_Z16_fetch_usbserialv+0x40>)
 80a2006:	f7ff ffbf 	bl	80a1f88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a200a:	4628      	mov	r0, r5
 80a200c:	f7fe f84e 	bl	80a00ac <__cxa_guard_release>
 80a2010:	4a05      	ldr	r2, [pc, #20]	; (80a2028 <_Z16_fetch_usbserialv+0x44>)
 80a2012:	4906      	ldr	r1, [pc, #24]	; (80a202c <_Z16_fetch_usbserialv+0x48>)
 80a2014:	4803      	ldr	r0, [pc, #12]	; (80a2024 <_Z16_fetch_usbserialv+0x40>)
 80a2016:	f000 f9f3 	bl	80a2400 <__aeabi_atexit>
	return _usbserial;
}
 80a201a:	4802      	ldr	r0, [pc, #8]	; (80a2024 <_Z16_fetch_usbserialv+0x40>)
 80a201c:	b007      	add	sp, #28
 80a201e:	bd30      	pop	{r4, r5, pc}
 80a2020:	20000990 	.word	0x20000990
 80a2024:	20000b18 	.word	0x20000b18
 80a2028:	20000390 	.word	0x20000390
 80a202c:	080a1f39 	.word	0x080a1f39

080a2030 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2030:	b510      	push	{r4, lr}
 80a2032:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2034:	2214      	movs	r2, #20
 80a2036:	2100      	movs	r1, #0
 80a2038:	f000 fb4d 	bl	80a26d6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a203c:	4b05      	ldr	r3, [pc, #20]	; (80a2054 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a203e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2040:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2042:	4b05      	ldr	r3, [pc, #20]	; (80a2058 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2044:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2046:	f240 1301 	movw	r3, #257	; 0x101
 80a204a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a204c:	2381      	movs	r3, #129	; 0x81
 80a204e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2050:	bd10      	pop	{r4, pc}
 80a2052:	bf00      	nop
 80a2054:	20000bc8 	.word	0x20000bc8
 80a2058:	20000b30 	.word	0x20000b30

080a205c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a205c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a205e:	4c0e      	ldr	r4, [pc, #56]	; (80a2098 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2060:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2062:	a801      	add	r0, sp, #4
 80a2064:	f7ff ffe4 	bl	80a2030 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2068:	6823      	ldr	r3, [r4, #0]
 80a206a:	07db      	lsls	r3, r3, #31
 80a206c:	d410      	bmi.n	80a2090 <_Z17_fetch_usbserial1v+0x34>
 80a206e:	4620      	mov	r0, r4
 80a2070:	f7fe f817 	bl	80a00a2 <__cxa_guard_acquire>
 80a2074:	b160      	cbz	r0, 80a2090 <_Z17_fetch_usbserial1v+0x34>
 80a2076:	aa01      	add	r2, sp, #4
 80a2078:	2101      	movs	r1, #1
 80a207a:	4808      	ldr	r0, [pc, #32]	; (80a209c <_Z17_fetch_usbserial1v+0x40>)
 80a207c:	f7ff ff84 	bl	80a1f88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2080:	4620      	mov	r0, r4
 80a2082:	f7fe f813 	bl	80a00ac <__cxa_guard_release>
 80a2086:	4a06      	ldr	r2, [pc, #24]	; (80a20a0 <_Z17_fetch_usbserial1v+0x44>)
 80a2088:	4906      	ldr	r1, [pc, #24]	; (80a20a4 <_Z17_fetch_usbserial1v+0x48>)
 80a208a:	4804      	ldr	r0, [pc, #16]	; (80a209c <_Z17_fetch_usbserial1v+0x40>)
 80a208c:	f000 f9b8 	bl	80a2400 <__aeabi_atexit>
  return _usbserial1;
}
 80a2090:	4802      	ldr	r0, [pc, #8]	; (80a209c <_Z17_fetch_usbserial1v+0x40>)
 80a2092:	b006      	add	sp, #24
 80a2094:	bd10      	pop	{r4, pc}
 80a2096:	bf00      	nop
 80a2098:	20000b2c 	.word	0x20000b2c
 80a209c:	20000bb4 	.word	0x20000bb4
 80a20a0:	20000390 	.word	0x20000390
 80a20a4:	080a1f39 	.word	0x080a1f39

080a20a8 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a20a8:	4770      	bx	lr

080a20aa <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a20aa:	2200      	movs	r2, #0
 80a20ac:	4611      	mov	r1, r2
 80a20ae:	4610      	mov	r0, r2
 80a20b0:	f7ff b8fe 	b.w	80a12b0 <network_ready>

080a20b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a20b4:	4803      	ldr	r0, [pc, #12]	; (80a20c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a20b6:	4b04      	ldr	r3, [pc, #16]	; (80a20c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a20b8:	4a04      	ldr	r2, [pc, #16]	; (80a20cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a20ba:	4905      	ldr	r1, [pc, #20]	; (80a20d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a20bc:	6003      	str	r3, [r0, #0]
 80a20be:	f000 b99f 	b.w	80a2400 <__aeabi_atexit>
 80a20c2:	bf00      	nop
 80a20c4:	20000ccc 	.word	0x20000ccc
 80a20c8:	080a2c60 	.word	0x080a2c60
 80a20cc:	20000390 	.word	0x20000390
 80a20d0:	080a20a9 	.word	0x080a20a9

080a20d4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a20d4:	b510      	push	{r4, lr}
 80a20d6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a20d8:	f000 fb40 	bl	80a275c <strlen>
 80a20dc:	3801      	subs	r0, #1
 80a20de:	1823      	adds	r3, r4, r0
 80a20e0:	4620      	mov	r0, r4
	while(i<j){
 80a20e2:	4298      	cmp	r0, r3
 80a20e4:	d206      	bcs.n	80a20f4 <_Z11str_reversePc+0x20>
		c = *i;
 80a20e6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a20e8:	7819      	ldrb	r1, [r3, #0]
 80a20ea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a20ee:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a20f2:	e7f6      	b.n	80a20e2 <_Z11str_reversePc+0xe>
 80a20f4:	bd10      	pop	{r4, pc}

080a20f6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a20f6:	b570      	push	{r4, r5, r6, lr}
 80a20f8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a20fa:	1e91      	subs	r1, r2, #2
 80a20fc:	2922      	cmp	r1, #34	; 0x22
 80a20fe:	d820      	bhi.n	80a2142 <ultoa+0x4c>
 80a2100:	4625      	mov	r5, r4
 80a2102:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2104:	b910      	cbnz	r0, 80a210c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2106:	4423      	add	r3, r4
            *ptr++ = '0';
 80a2108:	2230      	movs	r2, #48	; 0x30
 80a210a:	e00e      	b.n	80a212a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a210c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a2110:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a2114:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a2116:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a2118:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a211c:	bf94      	ite	ls
 80a211e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a2120:	3157      	addhi	r1, #87	; 0x57
 80a2122:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a2126:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2128:	e7eb      	b.n	80a2102 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a212a:	4299      	cmp	r1, r3
 80a212c:	d202      	bcs.n	80a2134 <ultoa+0x3e>
            *ptr++ = '0';
 80a212e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2132:	e7fa      	b.n	80a212a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a2134:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a2136:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a2138:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a213a:	f7ff ffcb 	bl	80a20d4 <_Z11str_reversePc>
	return buffer;
 80a213e:	4620      	mov	r0, r4
 80a2140:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a2142:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a2144:	bd70      	pop	{r4, r5, r6, pc}

080a2146 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a2146:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a2148:	2301      	movs	r3, #1
 80a214a:	f7ff ffd4 	bl	80a20f6 <ultoa>
}
 80a214e:	bd08      	pop	{r3, pc}

080a2150 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2150:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2152:	4b14      	ldr	r3, [pc, #80]	; (80a21a4 <serialEventRun+0x54>)
 80a2154:	b133      	cbz	r3, 80a2164 <serialEventRun+0x14>
 80a2156:	f7ff ff45 	bl	80a1fe4 <_Z16_fetch_usbserialv>
 80a215a:	6803      	ldr	r3, [r0, #0]
 80a215c:	691b      	ldr	r3, [r3, #16]
 80a215e:	4798      	blx	r3
 80a2160:	2800      	cmp	r0, #0
 80a2162:	dc16      	bgt.n	80a2192 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2164:	4b10      	ldr	r3, [pc, #64]	; (80a21a8 <serialEventRun+0x58>)
 80a2166:	b133      	cbz	r3, 80a2176 <serialEventRun+0x26>
 80a2168:	f7ff febe 	bl	80a1ee8 <_Z22__fetch_global_Serial1v>
 80a216c:	6803      	ldr	r3, [r0, #0]
 80a216e:	691b      	ldr	r3, [r3, #16]
 80a2170:	4798      	blx	r3
 80a2172:	2800      	cmp	r0, #0
 80a2174:	dc10      	bgt.n	80a2198 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2176:	4b0d      	ldr	r3, [pc, #52]	; (80a21ac <serialEventRun+0x5c>)
 80a2178:	b10b      	cbz	r3, 80a217e <serialEventRun+0x2e>
 80a217a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a217e:	4b0c      	ldr	r3, [pc, #48]	; (80a21b0 <serialEventRun+0x60>)
 80a2180:	b17b      	cbz	r3, 80a21a2 <serialEventRun+0x52>
 80a2182:	f7ff ff6b 	bl	80a205c <_Z17_fetch_usbserial1v>
 80a2186:	6803      	ldr	r3, [r0, #0]
 80a2188:	691b      	ldr	r3, [r3, #16]
 80a218a:	4798      	blx	r3
 80a218c:	2800      	cmp	r0, #0
 80a218e:	dc06      	bgt.n	80a219e <serialEventRun+0x4e>
 80a2190:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2192:	f3af 8000 	nop.w
 80a2196:	e7e5      	b.n	80a2164 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2198:	f3af 8000 	nop.w
 80a219c:	e7eb      	b.n	80a2176 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a219e:	f3af 8000 	nop.w
 80a21a2:	bd08      	pop	{r3, pc}
	...

080a21b4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a21b4:	b508      	push	{r3, lr}
	serialEventRun();
 80a21b6:	f7ff ffcb 	bl	80a2150 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a21ba:	f7fe fecb 	bl	80a0f54 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a21be:	4b01      	ldr	r3, [pc, #4]	; (80a21c4 <_post_loop+0x10>)
 80a21c0:	6018      	str	r0, [r3, #0]
 80a21c2:	bd08      	pop	{r3, pc}
 80a21c4:	20000cd8 	.word	0x20000cd8

080a21c8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a21c8:	4802      	ldr	r0, [pc, #8]	; (80a21d4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a21ca:	4a03      	ldr	r2, [pc, #12]	; (80a21d8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a21cc:	4903      	ldr	r1, [pc, #12]	; (80a21dc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a21ce:	1a12      	subs	r2, r2, r0
 80a21d0:	f000 ba76 	b.w	80a26c0 <memcpy>
 80a21d4:	40024000 	.word	0x40024000
 80a21d8:	40024004 	.word	0x40024004
 80a21dc:	080a2e40 	.word	0x080a2e40

080a21e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a21e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a21e2:	2300      	movs	r3, #0
 80a21e4:	9300      	str	r3, [sp, #0]
 80a21e6:	461a      	mov	r2, r3
 80a21e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a21ec:	f7ff f846 	bl	80a127c <system_ctrl_set_result>
}
 80a21f0:	b003      	add	sp, #12
 80a21f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a21f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a21f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a21fa:	8843      	ldrh	r3, [r0, #2]
 80a21fc:	2b0a      	cmp	r3, #10
 80a21fe:	d008      	beq.n	80a2212 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2200:	2b50      	cmp	r3, #80	; 0x50
 80a2202:	d109      	bne.n	80a2218 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2204:	4b09      	ldr	r3, [pc, #36]	; (80a222c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2206:	681b      	ldr	r3, [r3, #0]
 80a2208:	b13b      	cbz	r3, 80a221a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a220a:	b003      	add	sp, #12
 80a220c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2210:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2212:	f7ff ffe5 	bl	80a21e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2216:	e006      	b.n	80a2226 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2218:	2300      	movs	r3, #0
 80a221a:	9300      	str	r3, [sp, #0]
 80a221c:	461a      	mov	r2, r3
 80a221e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2222:	f7ff f82b 	bl	80a127c <system_ctrl_set_result>
        break;
    }
}
 80a2226:	b003      	add	sp, #12
 80a2228:	f85d fb04 	ldr.w	pc, [sp], #4
 80a222c:	20000cd0 	.word	0x20000cd0

080a2230 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2230:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2232:	4c10      	ldr	r4, [pc, #64]	; (80a2274 <module_user_init_hook+0x44>)
 80a2234:	4d10      	ldr	r5, [pc, #64]	; (80a2278 <module_user_init_hook+0x48>)
 80a2236:	6823      	ldr	r3, [r4, #0]
 80a2238:	42ab      	cmp	r3, r5
 80a223a:	4b10      	ldr	r3, [pc, #64]	; (80a227c <module_user_init_hook+0x4c>)
 80a223c:	bf0c      	ite	eq
 80a223e:	2201      	moveq	r2, #1
 80a2240:	2200      	movne	r2, #0
 80a2242:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2244:	d002      	beq.n	80a224c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2246:	f7ff ffbf 	bl	80a21c8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a224a:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a224c:	f7fe fe7a 	bl	80a0f44 <HAL_RNG_GetRandomNumber>
 80a2250:	f000 fa4a 	bl	80a26e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2254:	4b0a      	ldr	r3, [pc, #40]	; (80a2280 <module_user_init_hook+0x50>)
 80a2256:	b11b      	cbz	r3, 80a2260 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2258:	f7fe fe74 	bl	80a0f44 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a225c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2260:	2100      	movs	r1, #0
 80a2262:	4807      	ldr	r0, [pc, #28]	; (80a2280 <module_user_init_hook+0x50>)
 80a2264:	f7ff f81c 	bl	80a12a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a226c:	2100      	movs	r1, #0
 80a226e:	4805      	ldr	r0, [pc, #20]	; (80a2284 <module_user_init_hook+0x54>)
 80a2270:	f7fe bffa 	b.w	80a1268 <system_ctrl_set_app_request_handler>
 80a2274:	40024000 	.word	0x40024000
 80a2278:	9a271c1e 	.word	0x9a271c1e
 80a227c:	20000cd4 	.word	0x20000cd4
 80a2280:	00000000 	.word	0x00000000
 80a2284:	080a21f9 	.word	0x080a21f9

080a2288 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2288:	b510      	push	{r4, lr}
 80a228a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a228c:	480f      	ldr	r0, [pc, #60]	; (80a22cc <pinAvailable+0x44>)
 80a228e:	f7ff fa0d 	bl	80a16ac <_ZN8SPIClass9isEnabledEv>
 80a2292:	b128      	cbz	r0, 80a22a0 <pinAvailable+0x18>
 80a2294:	f1a4 030d 	sub.w	r3, r4, #13
 80a2298:	2b02      	cmp	r3, #2
 80a229a:	d801      	bhi.n	80a22a0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a229c:	2000      	movs	r0, #0
 80a229e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a22a0:	f000 f854 	bl	80a234c <_Z19__fetch_global_Wirev>
 80a22a4:	f7ff f876 	bl	80a1394 <_ZN7TwoWire9isEnabledEv>
 80a22a8:	b108      	cbz	r0, 80a22ae <pinAvailable+0x26>
 80a22aa:	2c01      	cmp	r4, #1
 80a22ac:	d9f6      	bls.n	80a229c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a22ae:	f7ff fe1b 	bl	80a1ee8 <_Z22__fetch_global_Serial1v>
 80a22b2:	f7ff fe15 	bl	80a1ee0 <_ZN11USARTSerial9isEnabledEv>
 80a22b6:	b118      	cbz	r0, 80a22c0 <pinAvailable+0x38>
 80a22b8:	f1a4 0312 	sub.w	r3, r4, #18
 80a22bc:	2b01      	cmp	r3, #1
 80a22be:	d9ed      	bls.n	80a229c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a22c0:	2c17      	cmp	r4, #23
 80a22c2:	bf8c      	ite	hi
 80a22c4:	2000      	movhi	r0, #0
 80a22c6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a22c8:	bd10      	pop	{r4, pc}
 80a22ca:	bf00      	nop
 80a22cc:	20000d0c 	.word	0x20000d0c

080a22d0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22d0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a22d2:	b538      	push	{r3, r4, r5, lr}
 80a22d4:	4604      	mov	r4, r0
 80a22d6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22d8:	d80a      	bhi.n	80a22f0 <pinMode+0x20>
 80a22da:	29ff      	cmp	r1, #255	; 0xff
 80a22dc:	d008      	beq.n	80a22f0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a22de:	f7ff ffd3 	bl	80a2288 <pinAvailable>
 80a22e2:	b128      	cbz	r0, 80a22f0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a22e4:	4629      	mov	r1, r5
 80a22e6:	4620      	mov	r0, r4
}
 80a22e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a22ec:	f7fe be42 	b.w	80a0f74 <HAL_Pin_Mode>
 80a22f0:	bd38      	pop	{r3, r4, r5, pc}

080a22f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a22f2:	b538      	push	{r3, r4, r5, lr}
 80a22f4:	4604      	mov	r4, r0
 80a22f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a22f8:	f7fe fe44 	bl	80a0f84 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a22fc:	28ff      	cmp	r0, #255	; 0xff
 80a22fe:	d010      	beq.n	80a2322 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2300:	2806      	cmp	r0, #6
 80a2302:	d804      	bhi.n	80a230e <digitalWrite+0x1c>
 80a2304:	234d      	movs	r3, #77	; 0x4d
 80a2306:	fa23 f000 	lsr.w	r0, r3, r0
 80a230a:	07c3      	lsls	r3, r0, #31
 80a230c:	d409      	bmi.n	80a2322 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a230e:	4620      	mov	r0, r4
 80a2310:	f7ff ffba 	bl	80a2288 <pinAvailable>
 80a2314:	b128      	cbz	r0, 80a2322 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2316:	4629      	mov	r1, r5
 80a2318:	4620      	mov	r0, r4
}
 80a231a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a231e:	f7fe be39 	b.w	80a0f94 <HAL_GPIO_Write>
 80a2322:	bd38      	pop	{r3, r4, r5, pc}

080a2324 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2324:	b510      	push	{r4, lr}
 80a2326:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2328:	f7fe fe2c 	bl	80a0f84 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a232c:	3804      	subs	r0, #4
 80a232e:	b2c0      	uxtb	r0, r0
 80a2330:	2801      	cmp	r0, #1
 80a2332:	d908      	bls.n	80a2346 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2334:	4620      	mov	r0, r4
 80a2336:	f7ff ffa7 	bl	80a2288 <pinAvailable>
 80a233a:	b120      	cbz	r0, 80a2346 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a233c:	4620      	mov	r0, r4
}
 80a233e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2342:	f7fe be2f 	b.w	80a0fa4 <HAL_GPIO_Read>
}
 80a2346:	2000      	movs	r0, #0
 80a2348:	bd10      	pop	{r4, pc}
	...

080a234c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a234c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a234e:	4d0b      	ldr	r5, [pc, #44]	; (80a237c <_Z19__fetch_global_Wirev+0x30>)
 80a2350:	6829      	ldr	r1, [r5, #0]
 80a2352:	f011 0401 	ands.w	r4, r1, #1
 80a2356:	d10f      	bne.n	80a2378 <_Z19__fetch_global_Wirev+0x2c>
 80a2358:	4628      	mov	r0, r5
 80a235a:	f7fd fea2 	bl	80a00a2 <__cxa_guard_acquire>
 80a235e:	b158      	cbz	r0, 80a2378 <_Z19__fetch_global_Wirev+0x2c>
 80a2360:	4621      	mov	r1, r4
 80a2362:	4807      	ldr	r0, [pc, #28]	; (80a2380 <_Z19__fetch_global_Wirev+0x34>)
 80a2364:	f7ff f804 	bl	80a1370 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2368:	4628      	mov	r0, r5
 80a236a:	f7fd fe9f 	bl	80a00ac <__cxa_guard_release>
 80a236e:	4a05      	ldr	r2, [pc, #20]	; (80a2384 <_Z19__fetch_global_Wirev+0x38>)
 80a2370:	4905      	ldr	r1, [pc, #20]	; (80a2388 <_Z19__fetch_global_Wirev+0x3c>)
 80a2372:	4803      	ldr	r0, [pc, #12]	; (80a2380 <_Z19__fetch_global_Wirev+0x34>)
 80a2374:	f000 f844 	bl	80a2400 <__aeabi_atexit>
	return wire;
}
 80a2378:	4801      	ldr	r0, [pc, #4]	; (80a2380 <_Z19__fetch_global_Wirev+0x34>)
 80a237a:	bd38      	pop	{r3, r4, r5, pc}
 80a237c:	20000cdc 	.word	0x20000cdc
 80a2380:	20000ce0 	.word	0x20000ce0
 80a2384:	20000390 	.word	0x20000390
 80a2388:	080a1319 	.word	0x080a1319

080a238c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a238c:	b513      	push	{r0, r1, r4, lr}
 80a238e:	4c08      	ldr	r4, [pc, #32]	; (80a23b0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2390:	2300      	movs	r3, #0
 80a2392:	461a      	mov	r2, r3
 80a2394:	4619      	mov	r1, r3
 80a2396:	9300      	str	r3, [sp, #0]
 80a2398:	4620      	mov	r0, r4
 80a239a:	f7ff f83b 	bl	80a1414 <_ZN9IPAddressC1Ehhhh>
 80a239e:	4620      	mov	r0, r4
 80a23a0:	4a04      	ldr	r2, [pc, #16]	; (80a23b4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a23a2:	4905      	ldr	r1, [pc, #20]	; (80a23b8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a23a4:	b002      	add	sp, #8
 80a23a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a23aa:	f000 b829 	b.w	80a2400 <__aeabi_atexit>
 80a23ae:	bf00      	nop
 80a23b0:	20000cf4 	.word	0x20000cf4
 80a23b4:	20000390 	.word	0x20000390
 80a23b8:	080a139d 	.word	0x080a139d

080a23bc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23bc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a23be:	4c0c      	ldr	r4, [pc, #48]	; (80a23f0 <_GLOBAL__sub_I_SPI+0x34>)
 80a23c0:	4e0c      	ldr	r6, [pc, #48]	; (80a23f4 <_GLOBAL__sub_I_SPI+0x38>)
 80a23c2:	4d0d      	ldr	r5, [pc, #52]	; (80a23f8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a23c4:	2100      	movs	r1, #0
 80a23c6:	4620      	mov	r0, r4
 80a23c8:	f7ff f8f0 	bl	80a15ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23cc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23ce:	4c0b      	ldr	r4, [pc, #44]	; (80a23fc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a23d0:	4632      	mov	r2, r6
 80a23d2:	4629      	mov	r1, r5
 80a23d4:	f000 f814 	bl	80a2400 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23d8:	2101      	movs	r1, #1
 80a23da:	4620      	mov	r0, r4
 80a23dc:	f7ff f8e6 	bl	80a15ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23e0:	4632      	mov	r2, r6
 80a23e2:	4629      	mov	r1, r5
 80a23e4:	4620      	mov	r0, r4
 80a23e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a23ea:	f000 b809 	b.w	80a2400 <__aeabi_atexit>
 80a23ee:	bf00      	nop
 80a23f0:	20000d0c 	.word	0x20000d0c
 80a23f4:	20000390 	.word	0x20000390
 80a23f8:	080a159d 	.word	0x080a159d
 80a23fc:	20000d1c 	.word	0x20000d1c

080a2400 <__aeabi_atexit>:
 80a2400:	460b      	mov	r3, r1
 80a2402:	4601      	mov	r1, r0
 80a2404:	4618      	mov	r0, r3
 80a2406:	f000 b94d 	b.w	80a26a4 <__cxa_atexit>
	...

080a240c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a240c:	4b24      	ldr	r3, [pc, #144]	; (80a24a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a240e:	681a      	ldr	r2, [r3, #0]
 80a2410:	07d0      	lsls	r0, r2, #31
 80a2412:	bf5c      	itt	pl
 80a2414:	2201      	movpl	r2, #1
 80a2416:	601a      	strpl	r2, [r3, #0]
 80a2418:	4b22      	ldr	r3, [pc, #136]	; (80a24a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a241a:	681a      	ldr	r2, [r3, #0]
 80a241c:	07d1      	lsls	r1, r2, #31
 80a241e:	bf5c      	itt	pl
 80a2420:	2201      	movpl	r2, #1
 80a2422:	601a      	strpl	r2, [r3, #0]
 80a2424:	4b20      	ldr	r3, [pc, #128]	; (80a24a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2426:	681a      	ldr	r2, [r3, #0]
 80a2428:	07d2      	lsls	r2, r2, #31
 80a242a:	bf5c      	itt	pl
 80a242c:	2201      	movpl	r2, #1
 80a242e:	601a      	strpl	r2, [r3, #0]
 80a2430:	4b1e      	ldr	r3, [pc, #120]	; (80a24ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2432:	681a      	ldr	r2, [r3, #0]
 80a2434:	07d0      	lsls	r0, r2, #31
 80a2436:	bf5c      	itt	pl
 80a2438:	2201      	movpl	r2, #1
 80a243a:	601a      	strpl	r2, [r3, #0]
 80a243c:	4b1c      	ldr	r3, [pc, #112]	; (80a24b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a243e:	681a      	ldr	r2, [r3, #0]
 80a2440:	07d1      	lsls	r1, r2, #31
 80a2442:	bf5c      	itt	pl
 80a2444:	2201      	movpl	r2, #1
 80a2446:	601a      	strpl	r2, [r3, #0]
 80a2448:	4b1a      	ldr	r3, [pc, #104]	; (80a24b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a244a:	681a      	ldr	r2, [r3, #0]
 80a244c:	07d2      	lsls	r2, r2, #31
 80a244e:	bf5c      	itt	pl
 80a2450:	2201      	movpl	r2, #1
 80a2452:	601a      	strpl	r2, [r3, #0]
 80a2454:	4b18      	ldr	r3, [pc, #96]	; (80a24b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2456:	681a      	ldr	r2, [r3, #0]
 80a2458:	07d0      	lsls	r0, r2, #31
 80a245a:	bf5c      	itt	pl
 80a245c:	2201      	movpl	r2, #1
 80a245e:	601a      	strpl	r2, [r3, #0]
 80a2460:	4b16      	ldr	r3, [pc, #88]	; (80a24bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2462:	681a      	ldr	r2, [r3, #0]
 80a2464:	07d1      	lsls	r1, r2, #31
 80a2466:	bf5c      	itt	pl
 80a2468:	2201      	movpl	r2, #1
 80a246a:	601a      	strpl	r2, [r3, #0]
 80a246c:	4b14      	ldr	r3, [pc, #80]	; (80a24c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a246e:	681a      	ldr	r2, [r3, #0]
 80a2470:	07d2      	lsls	r2, r2, #31
 80a2472:	bf5c      	itt	pl
 80a2474:	2201      	movpl	r2, #1
 80a2476:	601a      	strpl	r2, [r3, #0]
 80a2478:	4b12      	ldr	r3, [pc, #72]	; (80a24c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a247a:	681a      	ldr	r2, [r3, #0]
 80a247c:	07d0      	lsls	r0, r2, #31
 80a247e:	bf5c      	itt	pl
 80a2480:	2201      	movpl	r2, #1
 80a2482:	601a      	strpl	r2, [r3, #0]
 80a2484:	4b10      	ldr	r3, [pc, #64]	; (80a24c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2486:	681a      	ldr	r2, [r3, #0]
 80a2488:	07d1      	lsls	r1, r2, #31
 80a248a:	bf5c      	itt	pl
 80a248c:	2201      	movpl	r2, #1
 80a248e:	601a      	strpl	r2, [r3, #0]
 80a2490:	4b0e      	ldr	r3, [pc, #56]	; (80a24cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2492:	681a      	ldr	r2, [r3, #0]
 80a2494:	07d2      	lsls	r2, r2, #31
 80a2496:	bf5c      	itt	pl
 80a2498:	2201      	movpl	r2, #1
 80a249a:	601a      	strpl	r2, [r3, #0]
 80a249c:	4770      	bx	lr
 80a249e:	bf00      	nop
 80a24a0:	20000d58 	.word	0x20000d58
 80a24a4:	20000d54 	.word	0x20000d54
 80a24a8:	20000d50 	.word	0x20000d50
 80a24ac:	20000d4c 	.word	0x20000d4c
 80a24b0:	20000d48 	.word	0x20000d48
 80a24b4:	20000d44 	.word	0x20000d44
 80a24b8:	20000d40 	.word	0x20000d40
 80a24bc:	20000d3c 	.word	0x20000d3c
 80a24c0:	20000d38 	.word	0x20000d38
 80a24c4:	20000d34 	.word	0x20000d34
 80a24c8:	20000d30 	.word	0x20000d30
 80a24cc:	20000d2c 	.word	0x20000d2c

080a24d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a24d0:	4b18      	ldr	r3, [pc, #96]	; (80a2534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a24d2:	681a      	ldr	r2, [r3, #0]
 80a24d4:	07d1      	lsls	r1, r2, #31
 80a24d6:	bf5c      	itt	pl
 80a24d8:	2201      	movpl	r2, #1
 80a24da:	601a      	strpl	r2, [r3, #0]
 80a24dc:	4b16      	ldr	r3, [pc, #88]	; (80a2538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a24de:	681a      	ldr	r2, [r3, #0]
 80a24e0:	07d2      	lsls	r2, r2, #31
 80a24e2:	bf5c      	itt	pl
 80a24e4:	2201      	movpl	r2, #1
 80a24e6:	601a      	strpl	r2, [r3, #0]
 80a24e8:	4b14      	ldr	r3, [pc, #80]	; (80a253c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a24ea:	681a      	ldr	r2, [r3, #0]
 80a24ec:	07d0      	lsls	r0, r2, #31
 80a24ee:	bf5c      	itt	pl
 80a24f0:	2201      	movpl	r2, #1
 80a24f2:	601a      	strpl	r2, [r3, #0]
 80a24f4:	4b12      	ldr	r3, [pc, #72]	; (80a2540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a24f6:	681a      	ldr	r2, [r3, #0]
 80a24f8:	07d1      	lsls	r1, r2, #31
 80a24fa:	bf5c      	itt	pl
 80a24fc:	2201      	movpl	r2, #1
 80a24fe:	601a      	strpl	r2, [r3, #0]
 80a2500:	4b10      	ldr	r3, [pc, #64]	; (80a2544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2502:	681a      	ldr	r2, [r3, #0]
 80a2504:	07d2      	lsls	r2, r2, #31
 80a2506:	bf5c      	itt	pl
 80a2508:	2201      	movpl	r2, #1
 80a250a:	601a      	strpl	r2, [r3, #0]
 80a250c:	4b0e      	ldr	r3, [pc, #56]	; (80a2548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a250e:	681a      	ldr	r2, [r3, #0]
 80a2510:	07d0      	lsls	r0, r2, #31
 80a2512:	bf5c      	itt	pl
 80a2514:	2201      	movpl	r2, #1
 80a2516:	601a      	strpl	r2, [r3, #0]
 80a2518:	4b0c      	ldr	r3, [pc, #48]	; (80a254c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a251a:	681a      	ldr	r2, [r3, #0]
 80a251c:	07d1      	lsls	r1, r2, #31
 80a251e:	bf5c      	itt	pl
 80a2520:	2201      	movpl	r2, #1
 80a2522:	601a      	strpl	r2, [r3, #0]
 80a2524:	4b0a      	ldr	r3, [pc, #40]	; (80a2550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2526:	681a      	ldr	r2, [r3, #0]
 80a2528:	07d2      	lsls	r2, r2, #31
 80a252a:	bf5c      	itt	pl
 80a252c:	2201      	movpl	r2, #1
 80a252e:	601a      	strpl	r2, [r3, #0]
 80a2530:	4770      	bx	lr
 80a2532:	bf00      	nop
 80a2534:	20000d78 	.word	0x20000d78
 80a2538:	20000d74 	.word	0x20000d74
 80a253c:	20000d70 	.word	0x20000d70
 80a2540:	20000d6c 	.word	0x20000d6c
 80a2544:	20000d68 	.word	0x20000d68
 80a2548:	20000d64 	.word	0x20000d64
 80a254c:	20000d60 	.word	0x20000d60
 80a2550:	20000d5c 	.word	0x20000d5c

080a2554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2554:	4b18      	ldr	r3, [pc, #96]	; (80a25b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2556:	681a      	ldr	r2, [r3, #0]
 80a2558:	07d1      	lsls	r1, r2, #31
 80a255a:	bf5c      	itt	pl
 80a255c:	2201      	movpl	r2, #1
 80a255e:	601a      	strpl	r2, [r3, #0]
 80a2560:	4b16      	ldr	r3, [pc, #88]	; (80a25bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2562:	681a      	ldr	r2, [r3, #0]
 80a2564:	07d2      	lsls	r2, r2, #31
 80a2566:	bf5c      	itt	pl
 80a2568:	2201      	movpl	r2, #1
 80a256a:	601a      	strpl	r2, [r3, #0]
 80a256c:	4b14      	ldr	r3, [pc, #80]	; (80a25c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a256e:	681a      	ldr	r2, [r3, #0]
 80a2570:	07d0      	lsls	r0, r2, #31
 80a2572:	bf5c      	itt	pl
 80a2574:	2201      	movpl	r2, #1
 80a2576:	601a      	strpl	r2, [r3, #0]
 80a2578:	4b12      	ldr	r3, [pc, #72]	; (80a25c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a257a:	681a      	ldr	r2, [r3, #0]
 80a257c:	07d1      	lsls	r1, r2, #31
 80a257e:	bf5c      	itt	pl
 80a2580:	2201      	movpl	r2, #1
 80a2582:	601a      	strpl	r2, [r3, #0]
 80a2584:	4b10      	ldr	r3, [pc, #64]	; (80a25c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2586:	681a      	ldr	r2, [r3, #0]
 80a2588:	07d2      	lsls	r2, r2, #31
 80a258a:	bf5c      	itt	pl
 80a258c:	2201      	movpl	r2, #1
 80a258e:	601a      	strpl	r2, [r3, #0]
 80a2590:	4b0e      	ldr	r3, [pc, #56]	; (80a25cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2592:	681a      	ldr	r2, [r3, #0]
 80a2594:	07d0      	lsls	r0, r2, #31
 80a2596:	bf5c      	itt	pl
 80a2598:	2201      	movpl	r2, #1
 80a259a:	601a      	strpl	r2, [r3, #0]
 80a259c:	4b0c      	ldr	r3, [pc, #48]	; (80a25d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a259e:	681a      	ldr	r2, [r3, #0]
 80a25a0:	07d1      	lsls	r1, r2, #31
 80a25a2:	bf5c      	itt	pl
 80a25a4:	2201      	movpl	r2, #1
 80a25a6:	601a      	strpl	r2, [r3, #0]
 80a25a8:	4b0a      	ldr	r3, [pc, #40]	; (80a25d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a25aa:	681a      	ldr	r2, [r3, #0]
 80a25ac:	07d2      	lsls	r2, r2, #31
 80a25ae:	bf5c      	itt	pl
 80a25b0:	2201      	movpl	r2, #1
 80a25b2:	601a      	strpl	r2, [r3, #0]
 80a25b4:	4770      	bx	lr
 80a25b6:	bf00      	nop
 80a25b8:	20000d98 	.word	0x20000d98
 80a25bc:	20000d94 	.word	0x20000d94
 80a25c0:	20000d90 	.word	0x20000d90
 80a25c4:	20000d8c 	.word	0x20000d8c
 80a25c8:	20000d88 	.word	0x20000d88
 80a25cc:	20000d84 	.word	0x20000d84
 80a25d0:	20000d80 	.word	0x20000d80
 80a25d4:	20000d7c 	.word	0x20000d7c

080a25d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a25d8:	4b24      	ldr	r3, [pc, #144]	; (80a266c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a25da:	681a      	ldr	r2, [r3, #0]
 80a25dc:	07d0      	lsls	r0, r2, #31
 80a25de:	bf5c      	itt	pl
 80a25e0:	2201      	movpl	r2, #1
 80a25e2:	601a      	strpl	r2, [r3, #0]
 80a25e4:	4b22      	ldr	r3, [pc, #136]	; (80a2670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a25e6:	681a      	ldr	r2, [r3, #0]
 80a25e8:	07d1      	lsls	r1, r2, #31
 80a25ea:	bf5c      	itt	pl
 80a25ec:	2201      	movpl	r2, #1
 80a25ee:	601a      	strpl	r2, [r3, #0]
 80a25f0:	4b20      	ldr	r3, [pc, #128]	; (80a2674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a25f2:	681a      	ldr	r2, [r3, #0]
 80a25f4:	07d2      	lsls	r2, r2, #31
 80a25f6:	bf5c      	itt	pl
 80a25f8:	2201      	movpl	r2, #1
 80a25fa:	601a      	strpl	r2, [r3, #0]
 80a25fc:	4b1e      	ldr	r3, [pc, #120]	; (80a2678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a25fe:	681a      	ldr	r2, [r3, #0]
 80a2600:	07d0      	lsls	r0, r2, #31
 80a2602:	bf5c      	itt	pl
 80a2604:	2201      	movpl	r2, #1
 80a2606:	601a      	strpl	r2, [r3, #0]
 80a2608:	4b1c      	ldr	r3, [pc, #112]	; (80a267c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a260a:	681a      	ldr	r2, [r3, #0]
 80a260c:	07d1      	lsls	r1, r2, #31
 80a260e:	bf5c      	itt	pl
 80a2610:	2201      	movpl	r2, #1
 80a2612:	601a      	strpl	r2, [r3, #0]
 80a2614:	4b1a      	ldr	r3, [pc, #104]	; (80a2680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2616:	681a      	ldr	r2, [r3, #0]
 80a2618:	07d2      	lsls	r2, r2, #31
 80a261a:	bf5c      	itt	pl
 80a261c:	2201      	movpl	r2, #1
 80a261e:	601a      	strpl	r2, [r3, #0]
 80a2620:	4b18      	ldr	r3, [pc, #96]	; (80a2684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2622:	681a      	ldr	r2, [r3, #0]
 80a2624:	07d0      	lsls	r0, r2, #31
 80a2626:	bf5c      	itt	pl
 80a2628:	2201      	movpl	r2, #1
 80a262a:	601a      	strpl	r2, [r3, #0]
 80a262c:	4b16      	ldr	r3, [pc, #88]	; (80a2688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a262e:	681a      	ldr	r2, [r3, #0]
 80a2630:	07d1      	lsls	r1, r2, #31
 80a2632:	bf5c      	itt	pl
 80a2634:	2201      	movpl	r2, #1
 80a2636:	601a      	strpl	r2, [r3, #0]
 80a2638:	4b14      	ldr	r3, [pc, #80]	; (80a268c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a263a:	681a      	ldr	r2, [r3, #0]
 80a263c:	07d2      	lsls	r2, r2, #31
 80a263e:	bf5c      	itt	pl
 80a2640:	2201      	movpl	r2, #1
 80a2642:	601a      	strpl	r2, [r3, #0]
 80a2644:	4b12      	ldr	r3, [pc, #72]	; (80a2690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2646:	681a      	ldr	r2, [r3, #0]
 80a2648:	07d0      	lsls	r0, r2, #31
 80a264a:	bf5c      	itt	pl
 80a264c:	2201      	movpl	r2, #1
 80a264e:	601a      	strpl	r2, [r3, #0]
 80a2650:	4b10      	ldr	r3, [pc, #64]	; (80a2694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2652:	681a      	ldr	r2, [r3, #0]
 80a2654:	07d1      	lsls	r1, r2, #31
 80a2656:	bf5c      	itt	pl
 80a2658:	2201      	movpl	r2, #1
 80a265a:	601a      	strpl	r2, [r3, #0]
 80a265c:	4b0e      	ldr	r3, [pc, #56]	; (80a2698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a265e:	681a      	ldr	r2, [r3, #0]
 80a2660:	07d2      	lsls	r2, r2, #31
 80a2662:	bf5c      	itt	pl
 80a2664:	2201      	movpl	r2, #1
 80a2666:	601a      	strpl	r2, [r3, #0]
 80a2668:	4770      	bx	lr
 80a266a:	bf00      	nop
 80a266c:	20000dc8 	.word	0x20000dc8
 80a2670:	20000dc4 	.word	0x20000dc4
 80a2674:	20000dc0 	.word	0x20000dc0
 80a2678:	20000dbc 	.word	0x20000dbc
 80a267c:	20000db8 	.word	0x20000db8
 80a2680:	20000db4 	.word	0x20000db4
 80a2684:	20000db0 	.word	0x20000db0
 80a2688:	20000dac 	.word	0x20000dac
 80a268c:	20000da8 	.word	0x20000da8
 80a2690:	20000da4 	.word	0x20000da4
 80a2694:	20000da0 	.word	0x20000da0
 80a2698:	20000d9c 	.word	0x20000d9c

080a269c <atoi>:
 80a269c:	220a      	movs	r2, #10
 80a269e:	2100      	movs	r1, #0
 80a26a0:	f000 b904 	b.w	80a28ac <strtol>

080a26a4 <__cxa_atexit>:
 80a26a4:	b510      	push	{r4, lr}
 80a26a6:	4c05      	ldr	r4, [pc, #20]	; (80a26bc <__cxa_atexit+0x18>)
 80a26a8:	4613      	mov	r3, r2
 80a26aa:	b12c      	cbz	r4, 80a26b8 <__cxa_atexit+0x14>
 80a26ac:	460a      	mov	r2, r1
 80a26ae:	4601      	mov	r1, r0
 80a26b0:	2002      	movs	r0, #2
 80a26b2:	f3af 8000 	nop.w
 80a26b6:	bd10      	pop	{r4, pc}
 80a26b8:	4620      	mov	r0, r4
 80a26ba:	bd10      	pop	{r4, pc}
 80a26bc:	00000000 	.word	0x00000000

080a26c0 <memcpy>:
 80a26c0:	b510      	push	{r4, lr}
 80a26c2:	1e43      	subs	r3, r0, #1
 80a26c4:	440a      	add	r2, r1
 80a26c6:	4291      	cmp	r1, r2
 80a26c8:	d004      	beq.n	80a26d4 <memcpy+0x14>
 80a26ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a26ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a26d2:	e7f8      	b.n	80a26c6 <memcpy+0x6>
 80a26d4:	bd10      	pop	{r4, pc}

080a26d6 <memset>:
 80a26d6:	4603      	mov	r3, r0
 80a26d8:	4402      	add	r2, r0
 80a26da:	4293      	cmp	r3, r2
 80a26dc:	d002      	beq.n	80a26e4 <memset+0xe>
 80a26de:	f803 1b01 	strb.w	r1, [r3], #1
 80a26e2:	e7fa      	b.n	80a26da <memset+0x4>
 80a26e4:	4770      	bx	lr
	...

080a26e8 <srand>:
 80a26e8:	b538      	push	{r3, r4, r5, lr}
 80a26ea:	4b12      	ldr	r3, [pc, #72]	; (80a2734 <srand+0x4c>)
 80a26ec:	4605      	mov	r5, r0
 80a26ee:	681c      	ldr	r4, [r3, #0]
 80a26f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a26f2:	b9d3      	cbnz	r3, 80a272a <srand+0x42>
 80a26f4:	2018      	movs	r0, #24
 80a26f6:	f7fe fde3 	bl	80a12c0 <malloc>
 80a26fa:	f243 330e 	movw	r3, #13070	; 0x330e
 80a26fe:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2700:	8003      	strh	r3, [r0, #0]
 80a2702:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2706:	8043      	strh	r3, [r0, #2]
 80a2708:	f241 2334 	movw	r3, #4660	; 0x1234
 80a270c:	8083      	strh	r3, [r0, #4]
 80a270e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2712:	80c3      	strh	r3, [r0, #6]
 80a2714:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2718:	8103      	strh	r3, [r0, #8]
 80a271a:	2305      	movs	r3, #5
 80a271c:	8143      	strh	r3, [r0, #10]
 80a271e:	230b      	movs	r3, #11
 80a2720:	8183      	strh	r3, [r0, #12]
 80a2722:	2201      	movs	r2, #1
 80a2724:	2300      	movs	r3, #0
 80a2726:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a272a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a272c:	2200      	movs	r2, #0
 80a272e:	611d      	str	r5, [r3, #16]
 80a2730:	615a      	str	r2, [r3, #20]
 80a2732:	bd38      	pop	{r3, r4, r5, pc}
 80a2734:	20000388 	.word	0x20000388

080a2738 <strcmp>:
 80a2738:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a273c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2740:	2a01      	cmp	r2, #1
 80a2742:	bf28      	it	cs
 80a2744:	429a      	cmpcs	r2, r3
 80a2746:	d0f7      	beq.n	80a2738 <strcmp>
 80a2748:	1ad0      	subs	r0, r2, r3
 80a274a:	4770      	bx	lr

080a274c <strcpy>:
 80a274c:	4603      	mov	r3, r0
 80a274e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2752:	f803 2b01 	strb.w	r2, [r3], #1
 80a2756:	2a00      	cmp	r2, #0
 80a2758:	d1f9      	bne.n	80a274e <strcpy+0x2>
 80a275a:	4770      	bx	lr

080a275c <strlen>:
 80a275c:	4603      	mov	r3, r0
 80a275e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2762:	2a00      	cmp	r2, #0
 80a2764:	d1fb      	bne.n	80a275e <strlen+0x2>
 80a2766:	1a18      	subs	r0, r3, r0
 80a2768:	3801      	subs	r0, #1
 80a276a:	4770      	bx	lr

080a276c <strstr>:
 80a276c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a276e:	7803      	ldrb	r3, [r0, #0]
 80a2770:	b963      	cbnz	r3, 80a278c <strstr+0x20>
 80a2772:	780b      	ldrb	r3, [r1, #0]
 80a2774:	2b00      	cmp	r3, #0
 80a2776:	bf18      	it	ne
 80a2778:	2000      	movne	r0, #0
 80a277a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a277c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a2780:	b162      	cbz	r2, 80a279c <strstr+0x30>
 80a2782:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80a2786:	4630      	mov	r0, r6
 80a2788:	4297      	cmp	r7, r2
 80a278a:	d0f7      	beq.n	80a277c <strstr+0x10>
 80a278c:	4603      	mov	r3, r0
 80a278e:	1c46      	adds	r6, r0, #1
 80a2790:	7800      	ldrb	r0, [r0, #0]
 80a2792:	b110      	cbz	r0, 80a279a <strstr+0x2e>
 80a2794:	1e4d      	subs	r5, r1, #1
 80a2796:	1e5c      	subs	r4, r3, #1
 80a2798:	e7f0      	b.n	80a277c <strstr+0x10>
 80a279a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a279c:	4618      	mov	r0, r3
 80a279e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a27a0 <_strtol_r>:
 80a27a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a27a4:	460f      	mov	r7, r1
 80a27a6:	4680      	mov	r8, r0
 80a27a8:	483f      	ldr	r0, [pc, #252]	; (80a28a8 <_strtol_r+0x108>)
 80a27aa:	f8d0 9000 	ldr.w	r9, [r0]
 80a27ae:	463d      	mov	r5, r7
 80a27b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a27b4:	eb09 0004 	add.w	r0, r9, r4
 80a27b8:	7840      	ldrb	r0, [r0, #1]
 80a27ba:	f000 0008 	and.w	r0, r0, #8
 80a27be:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a27c2:	b108      	cbz	r0, 80a27c8 <_strtol_r+0x28>
 80a27c4:	462f      	mov	r7, r5
 80a27c6:	e7f2      	b.n	80a27ae <_strtol_r+0xe>
 80a27c8:	2c2d      	cmp	r4, #45	; 0x2d
 80a27ca:	d103      	bne.n	80a27d4 <_strtol_r+0x34>
 80a27cc:	1cbd      	adds	r5, r7, #2
 80a27ce:	787c      	ldrb	r4, [r7, #1]
 80a27d0:	2601      	movs	r6, #1
 80a27d2:	e003      	b.n	80a27dc <_strtol_r+0x3c>
 80a27d4:	2c2b      	cmp	r4, #43	; 0x2b
 80a27d6:	bf04      	itt	eq
 80a27d8:	787c      	ldrbeq	r4, [r7, #1]
 80a27da:	1cbd      	addeq	r5, r7, #2
 80a27dc:	b113      	cbz	r3, 80a27e4 <_strtol_r+0x44>
 80a27de:	2b10      	cmp	r3, #16
 80a27e0:	d10a      	bne.n	80a27f8 <_strtol_r+0x58>
 80a27e2:	e05b      	b.n	80a289c <_strtol_r+0xfc>
 80a27e4:	2c30      	cmp	r4, #48	; 0x30
 80a27e6:	d157      	bne.n	80a2898 <_strtol_r+0xf8>
 80a27e8:	7828      	ldrb	r0, [r5, #0]
 80a27ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a27ee:	2858      	cmp	r0, #88	; 0x58
 80a27f0:	d14d      	bne.n	80a288e <_strtol_r+0xee>
 80a27f2:	786c      	ldrb	r4, [r5, #1]
 80a27f4:	2310      	movs	r3, #16
 80a27f6:	3502      	adds	r5, #2
 80a27f8:	2e00      	cmp	r6, #0
 80a27fa:	bf14      	ite	ne
 80a27fc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a2800:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a2804:	fbbc faf3 	udiv	sl, ip, r3
 80a2808:	2700      	movs	r7, #0
 80a280a:	4638      	mov	r0, r7
 80a280c:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a2810:	eb09 0e04 	add.w	lr, r9, r4
 80a2814:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a2818:	f01e 0f04 	tst.w	lr, #4
 80a281c:	d001      	beq.n	80a2822 <_strtol_r+0x82>
 80a281e:	3c30      	subs	r4, #48	; 0x30
 80a2820:	e00b      	b.n	80a283a <_strtol_r+0x9a>
 80a2822:	f01e 0e03 	ands.w	lr, lr, #3
 80a2826:	d01b      	beq.n	80a2860 <_strtol_r+0xc0>
 80a2828:	f1be 0f01 	cmp.w	lr, #1
 80a282c:	bf0c      	ite	eq
 80a282e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a2832:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a2836:	ebce 0404 	rsb	r4, lr, r4
 80a283a:	42a3      	cmp	r3, r4
 80a283c:	dd10      	ble.n	80a2860 <_strtol_r+0xc0>
 80a283e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a2842:	d00a      	beq.n	80a285a <_strtol_r+0xba>
 80a2844:	4550      	cmp	r0, sl
 80a2846:	d806      	bhi.n	80a2856 <_strtol_r+0xb6>
 80a2848:	d101      	bne.n	80a284e <_strtol_r+0xae>
 80a284a:	4564      	cmp	r4, ip
 80a284c:	dc03      	bgt.n	80a2856 <_strtol_r+0xb6>
 80a284e:	fb03 4000 	mla	r0, r3, r0, r4
 80a2852:	2701      	movs	r7, #1
 80a2854:	e001      	b.n	80a285a <_strtol_r+0xba>
 80a2856:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a285a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a285e:	e7d7      	b.n	80a2810 <_strtol_r+0x70>
 80a2860:	1c7b      	adds	r3, r7, #1
 80a2862:	d10c      	bne.n	80a287e <_strtol_r+0xde>
 80a2864:	2e00      	cmp	r6, #0
 80a2866:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a286a:	bf14      	ite	ne
 80a286c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a2870:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2874:	f8c8 3000 	str.w	r3, [r8]
 80a2878:	b92a      	cbnz	r2, 80a2886 <_strtol_r+0xe6>
 80a287a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a287e:	b106      	cbz	r6, 80a2882 <_strtol_r+0xe2>
 80a2880:	4240      	negs	r0, r0
 80a2882:	b172      	cbz	r2, 80a28a2 <_strtol_r+0x102>
 80a2884:	b107      	cbz	r7, 80a2888 <_strtol_r+0xe8>
 80a2886:	1e69      	subs	r1, r5, #1
 80a2888:	6011      	str	r1, [r2, #0]
 80a288a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a288e:	2430      	movs	r4, #48	; 0x30
 80a2890:	2b00      	cmp	r3, #0
 80a2892:	d1b1      	bne.n	80a27f8 <_strtol_r+0x58>
 80a2894:	2308      	movs	r3, #8
 80a2896:	e7af      	b.n	80a27f8 <_strtol_r+0x58>
 80a2898:	230a      	movs	r3, #10
 80a289a:	e7ad      	b.n	80a27f8 <_strtol_r+0x58>
 80a289c:	2c30      	cmp	r4, #48	; 0x30
 80a289e:	d0a3      	beq.n	80a27e8 <_strtol_r+0x48>
 80a28a0:	e7aa      	b.n	80a27f8 <_strtol_r+0x58>
 80a28a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a28a6:	bf00      	nop
 80a28a8:	20000324 	.word	0x20000324

080a28ac <strtol>:
 80a28ac:	4613      	mov	r3, r2
 80a28ae:	460a      	mov	r2, r1
 80a28b0:	4601      	mov	r1, r0
 80a28b2:	4802      	ldr	r0, [pc, #8]	; (80a28bc <strtol+0x10>)
 80a28b4:	6800      	ldr	r0, [r0, #0]
 80a28b6:	f7ff bf73 	b.w	80a27a0 <_strtol_r>
 80a28ba:	bf00      	nop
 80a28bc:	20000388 	.word	0x20000388

080a28c0 <dynalib_user>:
 80a28c0:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a28d0:	00000000 6c63227b 226d6961 6850223a     ....{"claim":"Ph
 80a28e0:	6e6f746f 72207325 20646165 7325225c     oton%s read \"%s
 80a28f0:	6f20225c 6573206e 726f736e 22692520     \" on sensor %i"
 80a2900:	7222202c 61727465 3a227463 24202422     , "retract":"$ $
 80a2910:	6f685020 256e6f74 65722073 24206461      Photon%s read $
 80a2920:	206e6f20 736e6573 2520726f 007d2269      on sensor %i"}.
 80a2930:	656c632f 70756e61 616c632d 50006d69     /cleanup-claim.P
 80a2940:	0054534f 6c707041 74616369 3e6e6f69     OST.Application>
 80a2950:	73655209 736e6f70 74732065 73757461     .Response status
 80a2960:	5300203a 206e6163 43434950 206f7420     : .Scan PICC to 
 80a2970:	20656573 20444955 20646e61 65707974     see UID and type
 80a2980:	002e2e2e 54530030 53555441 20736920     ....0.STATUS is 
 80a2990:	20746f6e 6f204b4f 4f432072 53494c4c     not OK or COLLIS
 80a29a0:	004e4f49 6c6c756e 72614300 49552064     ION.null.Card UI
 80a29b0:	00203a44 746e6f43 2d746e65 65707954     D: .Content-Type
 80a29c0:	70706100 6163696c 6e6f6974 6f736a2f     .application/jso
 80a29d0:	6341006e 74706563 2a2f2a00 54482000     n.Accept.*/*. HT
 80a29e0:	312f5054 0a0d302e 6f6c6300 43006573     TP/1.0...close.C
 80a29f0:	656e6e6f 6f697463 4f48006e 43005453     onnection.HOST.C
 80a2a00:	65746e6f 4c2d746e 74676e65 0a0d0068     ontent-Length...
 80a2a10:	00000a0d                                ....

080a2a14 <_ZTV7TwoWire>:
	...
 80a2a1c:	080a1319 080a1363 080a133b 080a131b     ....c...;.......
 80a2a2c:	080a1343 080a134b 080a1353 080a135b     C...K...S...[...

080a2a3c <_ZTV9IPAddress>:
	...
 80a2a44:	080a13ab 080a139d 080a139f 6e6c0066     ............f.ln
 80a2a54:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a2a64:	30313025 5d002075 64250020 00202c00     %010u .] .%d., .
 80a2a74:	203a2928 005b2000 65646f63 00203d20     (): . [.code = .
 80a2a84:	64006925 69617465 3d20736c 61620020     %i.details = .ba
 80a2a94:	53006475 61697265 5355006c 72655342     ud.Serial.USBSer
 80a2aa4:	316c6169 70797400 61700065 006d6172     ial1.type.param.
 80a2ab4:	00646d63 68006469 7300646e 006d7274     cmd.id.hnd.strm.
 80a2ac4:	746c6966 6c766c00 64646100 646e6148     filt.lvl.addHand
 80a2ad4:	0072656c 6f6d6572 61486576 656c646e     ler.removeHandle
 80a2ae4:	6e650072 61486d75 656c646e 4a007372     r.enumHandlers.J
 80a2af4:	534e4f53 61657274 676f4c6d 646e6148     SONStreamLogHand
 80a2b04:	0072656c 00707061 656e6f6e 61727400     ler.app.none.tra
 80a2b14:	69006563 006f666e 6e726177 72726500     ce.info.warn.err
 80a2b24:	7000726f 63696e61 6c6c6100 00000000     or.panic.all....

080a2b34 <_ZTV8SPIClass>:
	...
 80a2b3c:	080a159d 080a159f                       ........

080a2b44 <_ZL14clock_divisors>:
 80a2b44:	18100800 38302820                       .... (08

080a2b4c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a2b54:	080a19c5 080a19cb 080a1aeb 080a19d7     ................
 80a2b64:	080a19c7                                ....

080a2b68 <_ZTV9TCPClient>:
	...
 80a2b70:	080a00dd 080a011d 080a1981 080a199b     ................
 80a2b80:	080a1b69 080a1ab7 080a1a89 080a19c3     i...............
 80a2b90:	080a1c9d 080a19dd 080a1b07 080a1be5     ................
 80a2ba0:	080a1ded 080a1e3f 080a19ab 080a1db1     ....?...........
 80a2bb0:	080a1a69 69726977 5400676e 6c435043     i...wiring.TCPCl
 80a2bc0:	746e6569 636f7320 3d74656b 5a007825     ient socket=%x.Z
 80a2bd0:	302b2500 253a6433 00753230 252d5925     .%+03d:%02u.%Y-%
 80a2be0:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80a2bf0:	74637361 00656d69                       asctime.

080a2bf8 <_ZTV11USARTSerial>:
	...
 80a2c00:	080a1e61 080a1e85 080a1e91 080a143d     a...........=...
 80a2c10:	080a1e6d 080a1e79 080a1e73 080a1e7f     m...y...s.......
 80a2c20:	080a1e63 080a1e67                       c...g...

080a2c28 <_ZTV9USBSerial>:
	...
 80a2c30:	080a1f39 080a1f7d 080a1f57 080a143d     9...}...W...=...
 80a2c40:	080a1f51 080a1f3b 080a1f43 080a1f77     Q...;...C...w...
 80a2c50:	080a1f4b 080a1f35                       K...5...

080a2c58 <_ZTVN5spark9WiFiClassE>:
	...
 80a2c60:	080a20ab                                . ..

080a2c64 <_ZN5spark7NetworkE>:
 80a2c64:	20000ccc                                ... 

080a2c68 <_ctype_>:
 80a2c68:	20202000 20202020 28282020 20282828     .         ((((( 
 80a2c78:	20202020 20202020 20202020 20202020                     
 80a2c88:	10108820 10101010 10101010 10101010      ...............
 80a2c98:	04040410 04040404 10040404 10101010     ................
 80a2ca8:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a2cb8:	01010101 01010101 01010101 10101010     ................
 80a2cc8:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a2cd8:	02020202 02020202 02020202 10101010     ................
 80a2ce8:	00000020 00000000 00000000 00000000      ...............
	...

080a2d6c <__sf_fake_stdin>:
	...

080a2d8c <__sf_fake_stdout>:
	...

080a2dac <__sf_fake_stderr>:
	...
 80a2dcc:	00000043                                         C.

080a2dce <link_const_variable_data_end>:
	...

080a2dd0 <link_constructors_location>:
 80a2dd0:	080a0391 	.word	0x080a0391
 80a2dd4:	080a0491 	.word	0x080a0491
 80a2dd8:	080a0ec3 	.word	0x080a0ec3
 80a2ddc:	080a0ec7 	.word	0x080a0ec7
 80a2de0:	080a0ecd 	.word	0x080a0ecd
 80a2de4:	080a0ee1 	.word	0x080a0ee1
 80a2de8:	080a0ee5 	.word	0x080a0ee5
 80a2dec:	080a0ef9 	.word	0x080a0ef9
 80a2df0:	080a0efd 	.word	0x080a0efd
 80a2df4:	080a0f11 	.word	0x080a0f11
 80a2df8:	080a0f15 	.word	0x080a0f15
 80a2dfc:	080a0f19 	.word	0x080a0f19
 80a2e00:	080a0f1d 	.word	0x080a0f1d
 80a2e04:	080a0f21 	.word	0x080a0f21
 80a2e08:	080a142d 	.word	0x080a142d
 80a2e0c:	080a1581 	.word	0x080a1581
 80a2e10:	080a1941 	.word	0x080a1941
 80a2e14:	080a1e4d 	.word	0x080a1e4d
 80a2e18:	080a20b5 	.word	0x080a20b5
 80a2e1c:	080a238d 	.word	0x080a238d
 80a2e20:	080a23bd 	.word	0x080a23bd
 80a2e24:	080a240d 	.word	0x080a240d
 80a2e28:	080a24d1 	.word	0x080a24d1
 80a2e2c:	080a2555 	.word	0x080a2555
 80a2e30:	080a25d9 	.word	0x080a25d9

080a2e34 <link_constructors_end>:
	...
